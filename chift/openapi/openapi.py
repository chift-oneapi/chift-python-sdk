# generated by datamodel-codegen:
#   filename:  openapi.json
#   timestamp: 2023-10-12T13:16:03+00:00

from __future__ import annotations

from datetime import date, datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union
from uuid import UUID

from pydantic import BaseModel, Field, confloat, conint, constr


class AccountBalance(BaseModel):
    account_number: str = Field(..., title="Account Number")
    debit: float = Field(..., title="Debit")
    credit: float = Field(..., title="Credit")
    balance: float = Field(..., title="Balance")


class AccountBalanceFilter(BaseModel):
    accounts: List[str] = Field(
        ...,
        description='Array/list containing the account numbers/classes to include in the response. E.g. ["601", "7"] to retrieve all account in the class 7 and accounts with an account number beginning with 601',
        title="Accounts",
    )
    start: str = Field(
        ...,
        description="Start month (included, e.g. 022023 for february 2023)",
        title="Start",
    )
    end: str = Field(
        ...,
        description="End month (included, e.g. 122023 for december 2023)",
        title="End",
    )


class AccountItemType(Enum):
    bank = "bank"
    cash = "cash"
    other_financial = "other_financial"
    receivable = "receivable"
    payable = "payable"
    income = "income"
    expense = "expense"
    vat = "vat"
    other = "other"


class AddressItem(BaseModel):
    address_type: Optional[str] = Field(None, title="Address Type")
    name: Optional[str] = Field(None, title="Name")
    street: Optional[str] = Field(None, title="Street")
    number: Optional[str] = Field(None, title="Number")
    box: Optional[str] = Field(None, title="Box")
    city: Optional[str] = Field(None, title="City")
    postal_code: Optional[str] = Field(None, title="Postal Code")
    country: Optional[str] = Field(None, title="Country")


class AddressType(Enum):
    main = "main"
    delivery = "delivery"
    invoice = "invoice"


class AnalyticAccountItemIn(BaseModel):
    active: Optional[bool] = Field(True, title="Active")
    code: str = Field(..., title="Code")
    name: str = Field(..., title="Name")
    currency: str = Field(
        ...,
        description="Indicates the currency of the analytic account (e.g. EUR).",
        title="Currency",
    )


class AnalyticAccountItemOut(BaseModel):
    active: Optional[bool] = Field(True, title="Active")
    code: Optional[str] = Field(None, title="Code")
    name: Optional[str] = Field(None, title="Name")
    currency: Optional[str] = Field(
        None,
        description="Indicates the currency of the analytic account (e.g. EUR).",
        title="Currency",
    )
    id: Optional[str] = Field(None, title="Id")
    balance: Optional[float] = Field(0, title="Balance")
    credit: Optional[float] = Field(0, title="Credit")
    debit: Optional[float] = Field(0, title="Debit")


class AnalyticAccountItemOutMultiAnalyticPlans(BaseModel):
    active: Optional[bool] = Field(True, title="Active")
    code: Optional[str] = Field(None, title="Code")
    name: Optional[str] = Field(None, title="Name")
    currency: Optional[str] = Field(
        None,
        description="Indicates the currency of the analytic account (e.g. EUR).",
        title="Currency",
    )
    id: Optional[str] = Field(None, title="Id")
    balance: Optional[float] = Field(0, title="Balance")
    credit: Optional[float] = Field(0, title="Credit")
    debit: Optional[float] = Field(0, title="Debit")
    analytic_plan: str = Field(..., title="Analytic Plan")


class AnalyticAccountItemUpdate(BaseModel):
    active: Optional[bool] = Field(True, title="Active")
    code: Optional[str] = Field(None, title="Code")
    name: Optional[str] = Field(None, title="Name")
    currency: Optional[str] = Field(
        None,
        description="Indicates the currency of the analytic account (e.g. EUR).",
        title="Currency",
    )


class AnalyticAccountLineItemOut(BaseModel):
    account_id: str = Field(..., title="Account Id")
    description: str = Field(..., title="Description")
    amount: float = Field(..., title="Amount")
    date: date = Field(..., title="Date")
    id: Optional[str] = Field(None, title="Id")


class AnalyticDistributionDetail(BaseModel):
    analytic_account: str = Field(..., title="Analytic Account")
    percentage: float = Field(
        ...,
        description="Indicates the percentage of the untaxed amount to attribute to the given analytic account (Only percentages without decimals are allowed).",
        title="Percentage",
    )


class AnalyticPlanItem(BaseModel):
    id: str = Field(..., title="Id")
    name: str = Field(..., title="Name")
    active: Optional[bool] = Field(True, title="Active")


class Api(Enum):
    Point_of_Sale = "Point of Sale"
    eCommerce = "eCommerce"
    Accounting = "Accounting"
    Invoicing = "Invoicing"
    Communication = "Communication"
    Banking = "Banking"
    Custom = "Custom"
    Payment = "Payment"


class AttachmentItem(BaseModel):
    base64_string: str = Field(..., title="Base64 String")


class AttachmentItemOut(BaseModel):
    id: str = Field(..., title="Id")
    base64_string: str = Field(..., title="Base64 String")


class AuthItem(BaseModel):
    clientId: str = Field(..., title="Clientid")
    clientSecret: str = Field(..., title="Clientsecret")
    accountId: UUID = Field(..., title="Accountid")


class BankingAccountItem(BaseModel):
    id: str = Field(..., title="Id")
    currency: str = Field(..., title="Currency")
    current_balance: float = Field(..., title="Current Balance")
    current_balance_last_update_date: datetime = Field(
        ..., title="Current Balance Last Update Date"
    )
    available_balance: float = Field(..., title="Available Balance")
    available_balance_last_update_date: datetime = Field(
        ..., title="Available Balance Last Update Date"
    )
    description: str = Field(..., title="Description")
    reference: str = Field(..., title="Reference")
    reference_type: str = Field(..., title="Reference Type")
    holder_name: Optional[str] = Field(None, title="Holder Name")


class BankingFinancialInstitutionItem(BaseModel):
    id: str = Field(..., title="Id")
    bic: Optional[str] = Field(None, title="Bic")
    country: Optional[str] = Field(None, title="Country")
    name: str = Field(..., title="Name")


class BankingTransactionItem(BaseModel):
    id: str = Field(..., title="Id")
    amount: float = Field(..., title="Amount")
    currency: str = Field(..., title="Currency")
    description: Optional[str] = Field(None, title="Description")
    additional_information: Optional[str] = Field(None, title="Additional Information")
    counterpart_name: Optional[str] = Field(None, title="Counterpart Name")
    counterpart_reference: Optional[str] = Field(None, title="Counterpart Reference")
    creation_date: datetime = Field(..., title="Creation Date")
    value_date: datetime = Field(..., title="Value Date")
    execution_date: datetime = Field(..., title="Execution Date")


class BoolParam(Enum):
    true = "true"
    false = "false"


class CategoryItem(BaseModel):
    id: str = Field(
        ...,
        description="Technical id of the category in the target software",
        title="Id",
    )
    name: str = Field(..., title="Name")


class ChainExecutionItem(BaseModel):
    id: str = Field(..., title="Id")
    start: datetime = Field(..., title="Start")
    end: Optional[datetime] = Field(None, title="End")
    status: str = Field(..., title="Status")


class ChiftError(BaseModel):
    message: str = Field(..., title="Message")
    status: Optional[str] = Field("error", title="Status")
    detail: Optional[str] = Field("", title="Detail")


class ClosureStates(Enum):
    open = "open"
    closed = "closed"


class CommerceLocationItem(BaseModel):
    id: str = Field(
        ..., description="Technical id of the location in Chift", title="Id"
    )
    name: str = Field(..., title="Name")


class CommonAttributeItem(BaseModel):
    name: str = Field(..., title="Name")
    values: List[str] = Field(..., title="Values")


class ConsumerItem(BaseModel):
    consumerid: UUID = Field(..., title="Consumerid")
    name: constr(min_length=1) = Field(..., title="Name")
    email: Optional[str] = Field(None, title="Email")
    redirect_url: Optional[str] = Field(None, title="Redirect Url")


class ContactGender(Enum):
    H = "H"
    F = "F"
    N_A = "N/A"


class ContactType(Enum):
    prospect = "prospect"
    customer = "customer"
    supplier = "supplier"
    all = "all"


class CreateConsumerSyncItem(BaseModel):
    syncid: UUID = Field(..., title="Syncid")
    integrationids: Optional[List[str]] = Field(
        [],
        description="[OPTIONAL] Can be used to specify maximum one integrationid for each One API that you want to highlight. If specified, only this connector will be displayed to your clients.",
        title="Integrationids",
    )
    link_metadata: Optional[Dict[str, Any]] = Field(None, title="Link Metadata")


class DataItem(BaseModel):
    data: Dict[str, Any] = Field(..., title="Data")


class DataItemOut(BaseModel):
    data: Dict[str, Any] = Field(..., title="Data")
    id: str = Field(..., title="Id")
    created_on: datetime = Field(..., title="Created On")


class DatastoreColumn(BaseModel):
    name: str = Field(..., title="Name")
    title: str = Field(..., title="Title")
    type: str = Field(..., title="Type")
    optional: Optional[bool] = Field(False, title="Optional")


class DatastoreDef(BaseModel):
    columns: List[DatastoreColumn] = Field(..., title="Columns")
    search_column: Optional[str] = Field(
        None,
        description="Column name that will be indexed and used in search if any.",
        title="Search Column",
    )


class DocumentType(Enum):
    invoice = "invoice"
    entry = "entry"


class EmployeeItem(BaseModel):
    id: str = Field(..., title="Id")
    name: str = Field(..., title="Name")
    first_name: Optional[str] = Field(None, title="First Name")
    last_name: Optional[str] = Field(None, title="Last Name")
    function: Optional[str] = Field(None, title="Function")
    phone: Optional[str] = Field(None, title="Phone")
    mobile: Optional[str] = Field(None, title="Mobile")
    email: Optional[str] = Field(None, title="Email")
    active: Optional[bool] = Field(True, title="Active")
    reference: Optional[str] = Field(None, title="Reference")
    account_number: Optional[str] = Field(None, title="Account Number")


class EntryLineType(Enum):
    customer_account = "customer_account"
    supplier_account = "supplier_account"
    employee_account = "employee_account"
    general_account = "general_account"


class ExecutionType(Enum):
    code = "code"
    module = "module"


class FeesType(Enum):
    shipping = "shipping"
    other = "other"


class FieldRef(BaseModel):
    id: Optional[str] = Field(
        None, description="Technical id in the target software", title="Id"
    )
    model: Optional[str] = Field(
        None,
        description="Name of the model/entity in the target software",
        title="Model",
    )
    name: Optional[str] = Field(
        None, description="Value the field in the target software", title="Name"
    )


class FinancialEntryLineItem(BaseModel):
    type: EntryLineType
    account_number: str = Field(..., title="Account Number")
    partner_id: Optional[str] = Field(
        None,
        description="Must be filled in it is a 'customer_account', 'supplier_account' or 'employee_account' line type.",
        title="Partner Id",
    )
    amount: float = Field(
        ...,
        description="A positive amount represents funds transfered to the bank/cash account. In that case the bank/cash account is debited and the given account_number is credited.",
        title="Amount",
    )
    description: Optional[str] = Field(None, title="Description")


class FinancialEntryLineItemOut(BaseModel):
    type: EntryLineType
    account_number: str = Field(..., title="Account Number")
    partner_id: Optional[str] = Field(
        None,
        description="Must be filled in it is a 'customer_account', 'supplier_account' or 'employee_account' line type.",
        title="Partner Id",
    )
    amount: float = Field(
        ...,
        description="A positive amount represents funds transfered to the bank/cash account. In that case the bank/cash account is debited and the given account_number is credited.",
        title="Amount",
    )
    description: Optional[str] = Field(None, title="Description")
    counterpart_account: str = Field(..., title="Counterpart Account")


class FlowExecutionChain(BaseModel):
    name: str = Field(..., title="Name")


class FlowExecutionCode(BaseModel):
    code: str = Field(..., title="Code")


class FlowTriggerEvent(BaseModel):
    pass


class FlowTriggerTimer(BaseModel):
    cronschedule: str = Field(..., title="Cronschedule")


class FolderItem(BaseModel):
    id: str = Field(..., title="Id")
    name: str = Field(..., title="Name")


class ImageItem(BaseModel):
    id: str = Field(
        ..., description="Technical id of the image in the target software", title="Id"
    )
    main_image: bool = Field(..., title="Main Image")
    url: str = Field(..., title="Url")


class ImageType(Enum):
    icon = "icon"
    logo = "logo"


class InventoryDetailsItem(BaseModel):
    location: CommerceLocationItem
    available_quantity: float = Field(..., title="Available Quantity")


class InventoryDetailsUpdate(BaseModel):
    location_id: str = Field(
        ..., description="Technical id of the location in Chift", title="Location Id"
    )
    available_quantity: confloat(ge=0.0) = Field(..., title="Available Quantity")


class InvoiceCorrection(BaseModel):
    sale_invoice_correction_tax_code: Optional[str] = Field(
        None, title="Sale Invoice Correction Tax Code"
    )
    purchase_invoice_correction_tax_code: Optional[str] = Field(
        None, title="Purchase Invoice Correction Tax Code"
    )
    invoice_correction_credit_account_number: Optional[str] = Field(
        None, title="Invoice Correction Credit Account Number"
    )
    invoice_correction_debit_account_number: Optional[str] = Field(
        None, title="Invoice Correction Debit Account Number"
    )


class InvoiceLineItem(BaseModel):
    description: Optional[str] = Field(
        None, description="Line description", title="Description"
    )
    unit_price: float = Field(..., description="Unit price", title="Unit Price")
    quantity: float = Field(..., description="Quantity", title="Quantity")
    tax_amount: float = Field(
        ..., description="Line total taxes amount", title="Tax Amount"
    )
    total: float = Field(
        ..., description="Line total amount incl. taxes", title="Total"
    )
    untaxed_amount: float = Field(
        ..., description="Line total untaxed amount", title="Untaxed Amount"
    )
    tax_rate: Optional[float] = Field(
        None, description="Tax rate (e.g. 21.0)", title="Tax Rate"
    )
    account_number: Optional[str] = Field(
        None,
        description="Number of the accounting account used (e.g. 701000)",
        title="Account Number",
    )
    tax_id: Optional[str] = Field(
        None, description="Technical id of the tax in Chift", title="Tax Id"
    )
    unit_of_measure: Optional[str] = Field(
        None,
        description="Unit of measure matching target sofware name",
        title="Unit Of Measure",
    )
    product_id: Optional[str] = Field(
        None, description="Technical id of the product in Chift", title="Product Id"
    )
    product_code: Optional[str] = Field(
        None, description="Product reference", title="Product Code"
    )
    product_name: Optional[str] = Field(
        None, description="Product name", title="Product Name"
    )


class InvoiceLineItemInMonoAnalyticPlan(BaseModel):
    line_number: Optional[int] = Field(1, title="Line Number")
    description: str = Field(..., title="Description")
    unit_price: float = Field(..., title="Unit Price")
    unit_of_measure: Optional[str] = Field(
        None,
        description="A list of default units can be used for which an advanced mapping has been done (units: 'hour', 'day', 'cm', 'm2', 'm3', 'm', 'km', 'mile', 'g', 'kg', 'ton', 'box', 'pallet', 'roll', 'liter', 'unit'). Custom units of measure must have an identical name in the target software.",
        title="Unit Of Measure",
    )
    quantity: float = Field(..., title="Quantity")
    untaxed_amount: float = Field(..., title="Untaxed Amount")
    tax_rate: float = Field(
        ...,
        description="Indicates the tax rate used for the line (e.g. 21.0).",
        title="Tax Rate",
    )
    tax_amount: float = Field(..., title="Tax Amount")
    total: float = Field(..., title="Total")
    account_number: str = Field(
        ...,
        description="Indicates the number of the account used for the line (e.g. 701000).",
        title="Account Number",
    )
    tax_code: str = Field(
        ...,
        description="Indicates the tax code used for the line. This is the ID of the Tax Code in the accounting software.",
        title="Tax Code",
    )
    analytic_account: Optional[str] = Field(None, title="Analytic Account")


class InvoiceLineItemOutMonoAnalyticPlan(BaseModel):
    line_number: Optional[int] = Field(1, title="Line Number")
    description: str = Field(..., title="Description")
    unit_price: float = Field(..., title="Unit Price")
    unit_of_measure: Optional[str] = Field(
        None,
        description="A list of default units can be used for which an advanced mapping has been done (units: 'hour', 'day', 'cm', 'm2', 'm3', 'm', 'km', 'mile', 'g', 'kg', 'ton', 'box', 'pallet', 'roll', 'liter', 'unit'). Custom units of measure must have an identical name in the target software.",
        title="Unit Of Measure",
    )
    quantity: float = Field(..., title="Quantity")
    untaxed_amount: float = Field(..., title="Untaxed Amount")
    tax_rate: float = Field(
        ...,
        description="Indicates the tax rate used for the line (e.g. 21.0).",
        title="Tax Rate",
    )
    tax_amount: float = Field(..., title="Tax Amount")
    total: float = Field(..., title="Total")
    account_number: str = Field(
        ...,
        description="Indicates the number of the account used for the line (e.g. 701000).",
        title="Account Number",
    )
    tax_code: Optional[str] = Field(
        None,
        description="Indicates the tax code used for the line. This is the ID of the Tax Code in the accounting software.",
        title="Tax Code",
    )
    analytic_account: Optional[str] = Field(None, title="Analytic Account")


class InvoiceStatus(Enum):
    cancelled = "cancelled"
    draft = "draft"
    posted = "posted"
    paid = "paid"


class InvoiceStatusIn(Enum):
    draft = "draft"
    posted = "posted"


class InvoiceStatusOut(Enum):
    cancelled = "cancelled"
    draft = "draft"
    posted = "posted"
    paid = "paid"


class InvoiceTypeRequest(Enum):
    customer_invoice = "customer_invoice"
    customer_refund = "customer_refund"
    supplier_invoice = "supplier_invoice"
    supplier_refund = "supplier_refund"
    all = "all"


class JournalItemMonoAnalyticPlan(BaseModel):
    account_number: constr(min_length=1) = Field(..., title="Account Number")
    partner_id: Optional[str] = Field(None, title="Partner Id")
    description: Optional[str] = Field(None, title="Description")
    debit: float = Field(..., title="Debit")
    credit: float = Field(..., title="Credit")
    currency: constr(min_length=1) = Field(..., title="Currency")
    currency_exchange_rate: Optional[float] = Field(1, title="Currency Exchange Rate")
    id: str = Field(..., title="Id")
    partner_name: Optional[str] = Field(None, title="Partner Name")
    account_name: str = Field(..., title="Account Name")
    matching_numbers: Optional[List[str]] = Field([], title="Matching Numbers")
    analytic_account: Optional[str] = Field(None, title="Analytic Account")
    analytic_account_name: Optional[str] = Field(None, title="Analytic Account Name")


class JournalType(Enum):
    customer_invoice = "customer_invoice"
    customer_refund = "customer_refund"
    supplier_invoice = "supplier_invoice"
    supplier_refund = "supplier_refund"
    financial_operation = "financial_operation"
    miscellaneous_operation = "miscellaneous_operation"
    unknown = "unknown"


class LinkItem(BaseModel):
    url: str = Field(..., title="Url")


class LinkSyncItem(BaseModel):
    url: str = Field(..., title="Url")


class LogoImage(BaseModel):
    integrationid: str = Field(..., title="Integrationid")
    data: str = Field(..., title="Data")


class MappingItem(BaseModel):
    source_id: str = Field(..., title="Source Id")
    target_id: str = Field(..., title="Target Id")


class MatchingIn(BaseModel):
    entries: List[str] = Field(..., title="Entries")
    partner_id: str = Field(..., title="Partner Id")


class MatchingOut(BaseModel):
    matching_number: str = Field(..., title="Matching Number")
    balance: float = Field(..., title="Balance")


class MiscellaneousOperationLineType(Enum):
    customer_account = "customer_account"
    supplier_account = "supplier_account"
    general_account = "general_account"


class MiscellaneousOperationStatusIn(Enum):
    draft = "draft"
    posted = "posted"


class MiscellaneousOperationStatusOut(Enum):
    cancelled = "cancelled"
    draft = "draft"
    posted = "posted"
    matched = "matched"


class OpportunityStatus(Enum):
    open = "open"
    won = "won"
    lost = "lost"
    cancelled = "cancelled"
    closed = "closed"


class OrderCustomerItem(BaseModel):
    email: str = Field(..., title="Email")
    first_name: Optional[str] = Field(None, title="First Name")
    last_name: Optional[str] = Field(None, title="Last Name")
    phone: Optional[str] = Field(None, title="Phone")
    internal_notes: Optional[str] = Field(None, title="Internal Notes")


class OrderCustomerItemOut(BaseModel):
    email: str = Field(..., title="Email")
    first_name: Optional[str] = Field(None, title="First Name")
    last_name: Optional[str] = Field(None, title="Last Name")
    phone: Optional[str] = Field(None, title="Phone")
    internal_notes: Optional[str] = Field(None, title="Internal Notes")
    id: str = Field(
        ..., description="Technical id of the customer in Chift", title="Id"
    )


class OrderLineItemIn(BaseModel):
    variant_id: str = Field(
        ...,
        description="Technical id of the product variant in Chift",
        title="Variant Id",
    )
    quantity: int = Field(..., title="Quantity")
    tax_rate: float = Field(
        ...,
        description="Indicates the tax rate used for the line (e.g. 21.0).",
        title="Tax Rate",
    )
    unit_price: float = Field(
        ..., description="Unit price of the product without taxes.", title="Unit Price"
    )


class OrderLineProductVariantItem(BaseModel):
    id: str = Field(
        ..., description="Technical id of the product variant in Chift", title="Id"
    )
    sku: Optional[str] = Field(None, title="Sku")
    name: str = Field(..., title="Name")


class OrderStatus(Enum):
    cancelled = "cancelled"
    draft = "draft"
    confirmed = "confirmed"
    shipped = "shipped"
    refunded = "refunded"


class OutstandingItem(BaseModel):
    id: str = Field(..., title="Id")
    number: Optional[str] = Field(None, title="Number")
    journal_id: str = Field(..., title="Journal Id")
    journal_type: JournalType
    date: date = Field(..., title="Date")
    due_date: Optional[date] = Field(None, title="Due Date")
    currency: str = Field(..., title="Currency")
    currency_exchange_rate: float = Field(..., title="Currency Exchange Rate")
    amount: float = Field(..., title="Amount")
    open_amount: float = Field(..., title="Open Amount")
    partner_id: str = Field(..., title="Partner Id")
    account_number: str = Field(..., title="Account Number")
    reference: Optional[str] = Field(None, title="Reference")
    posted: bool = Field(..., title="Posted")


class OutstandingType(Enum):
    client = "client"
    supplier = "supplier"


class POSCustomerItem(BaseModel):
    id: str = Field(..., title="Id")
    first_name: Optional[str] = Field(None, title="First Name")
    last_name: Optional[str] = Field(None, title="Last Name")
    name: str = Field(..., title="Name")
    phone: Optional[str] = Field(None, title="Phone")
    email: Optional[str] = Field(None, title="Email")
    created_on: Optional[datetime] = Field(None, title="Created On")
    addresses: Optional[List[AddressItem]] = Field(None, title="Addresses")
    loyalty: Optional[int] = Field(None, title="Loyalty")


class POSLocationItem(BaseModel):
    id: str = Field(..., title="Id")
    name: str = Field(..., title="Name")
    timezone: Optional[str] = Field(
        None,
        description="Indicates the timezone of the location. TZ notation, e.g. Europe/Brussels .",
        title="Timezone",
    )
    address: Optional[AddressItem] = None


class PageAccountBalance(BaseModel):
    items: List[AccountBalance] = Field(..., title="Items")
    total: conint(ge=0) = Field(..., title="Total")
    page: conint(ge=1) = Field(..., title="Page")
    size: conint(ge=1) = Field(..., title="Size")


class PageAnalyticAccountItemOutMultiAnalyticPlans(BaseModel):
    items: List[AnalyticAccountItemOutMultiAnalyticPlans] = Field(..., title="Items")
    total: conint(ge=0) = Field(..., title="Total")
    page: conint(ge=1) = Field(..., title="Page")
    size: conint(ge=1) = Field(..., title="Size")


class PageAnalyticAccountItemOut(BaseModel):
    items: List[AnalyticAccountItemOut] = Field(..., title="Items")
    total: conint(ge=0) = Field(..., title="Total")
    page: conint(ge=1) = Field(..., title="Page")
    size: conint(ge=1) = Field(..., title="Size")


class PageAnalyticAccountLineItemOut(BaseModel):
    items: List[AnalyticAccountLineItemOut] = Field(..., title="Items")
    total: conint(ge=0) = Field(..., title="Total")
    page: conint(ge=1) = Field(..., title="Page")
    size: conint(ge=1) = Field(..., title="Size")


class PageAnalyticPlanItem(BaseModel):
    items: List[AnalyticPlanItem] = Field(..., title="Items")
    total: conint(ge=0) = Field(..., title="Total")
    page: conint(ge=1) = Field(..., title="Page")
    size: conint(ge=1) = Field(..., title="Size")


class PageAttachmentItemOut(BaseModel):
    items: List[AttachmentItemOut] = Field(..., title="Items")
    total: conint(ge=0) = Field(..., title="Total")
    page: conint(ge=1) = Field(..., title="Page")
    size: conint(ge=1) = Field(..., title="Size")


class PageBankingAccountItem(BaseModel):
    items: List[BankingAccountItem] = Field(..., title="Items")
    total: conint(ge=0) = Field(..., title="Total")
    page: conint(ge=1) = Field(..., title="Page")
    size: conint(ge=1) = Field(..., title="Size")


class PageBankingFinancialInstitutionItem(BaseModel):
    items: List[BankingFinancialInstitutionItem] = Field(..., title="Items")
    total: conint(ge=0) = Field(..., title="Total")
    page: conint(ge=1) = Field(..., title="Page")
    size: conint(ge=1) = Field(..., title="Size")


class PageBankingTransactionItem(BaseModel):
    items: List[BankingTransactionItem] = Field(..., title="Items")
    total: conint(ge=0) = Field(..., title="Total")
    page: conint(ge=1) = Field(..., title="Page")
    size: conint(ge=1) = Field(..., title="Size")


class PageEmployeeItem(BaseModel):
    items: List[EmployeeItem] = Field(..., title="Items")
    total: conint(ge=0) = Field(..., title="Total")
    page: conint(ge=1) = Field(..., title="Page")
    size: conint(ge=1) = Field(..., title="Size")


class PageFolderItem(BaseModel):
    items: List[FolderItem] = Field(..., title="Items")
    total: conint(ge=0) = Field(..., title="Total")
    page: conint(ge=1) = Field(..., title="Page")
    size: conint(ge=1) = Field(..., title="Size")


class PageOutstandingItem(BaseModel):
    items: List[OutstandingItem] = Field(..., title="Items")
    total: conint(ge=0) = Field(..., title="Total")
    page: conint(ge=1) = Field(..., title="Page")
    size: conint(ge=1) = Field(..., title="Size")


class PagePOSCustomerItem(BaseModel):
    items: List[POSCustomerItem] = Field(..., title="Items")
    total: conint(ge=0) = Field(..., title="Total")
    page: conint(ge=1) = Field(..., title="Page")
    size: conint(ge=1) = Field(..., title="Size")


class PagePOSLocationItem(BaseModel):
    items: List[POSLocationItem] = Field(..., title="Items")
    total: conint(ge=0) = Field(..., title="Total")
    page: conint(ge=1) = Field(..., title="Page")
    size: conint(ge=1) = Field(..., title="Size")


class Payment(BaseModel):
    id: str = Field(..., title="Id")
    name: str = Field(..., title="Name")
    currency: str = Field(..., title="Currency")
    amount: float = Field(
        ...,
        description="Total amount of the payment. A part of this amount could be reconciled with another invoice.",
        title="Amount",
    )
    dedicated_amount: Optional[float] = Field(
        0,
        description="Amount of the payment dedicated to the invoice. Zero the accounting software doesn't provide the information.",
        title="Dedicated Amount",
    )
    payment_date: date = Field(..., title="Payment Date")
    journal_type: JournalType
    journal_id: str = Field(..., title="Journal Id")
    journal_name: str = Field(..., title="Journal Name")
    reconciled: Optional[bool] = Field(False, title="Reconciled")
    communication: Optional[str] = Field(None, title="Communication")
    matching_number: Optional[str] = Field(None, title="Matching Number")


class PaymentMethods(BaseModel):
    id: str = Field(..., title="Id")
    name: str = Field(..., title="Name")
    extra: Optional[str] = Field(None, title="Extra")


class PostAddressItem(BaseModel):
    name: constr(min_length=1) = Field(..., title="Name")
    street: Optional[str] = Field(None, title="Street")
    number: Optional[str] = Field(None, title="Number")
    box: Optional[str] = Field(None, title="Box")
    city: constr(min_length=1) = Field(..., title="City")
    postal_code: constr(min_length=1) = Field(..., title="Postal Code")
    country: Optional[str] = Field(None, title="Country")


class PostConsumerItem(BaseModel):
    name: constr(min_length=1, max_length=255) = Field(..., title="Name")
    email: Optional[constr(max_length=80)] = Field(None, title="Email")
    redirect_url: Optional[constr(max_length=255)] = Field(None, title="Redirect Url")


class PostSyncFlowEvent(BaseModel):
    consumers: Optional[List[UUID]] = Field([], title="Consumers")
    data: Optional[Dict[str, Any]] = Field(None, title="Data")


class ProductPriceItem(BaseModel):
    currency: str = Field(..., title="Currency")
    price: Optional[float] = Field(0, title="Price")


class ProductStatus(Enum):
    unknown = "unknown"
    archived = "archived"
    unpublished = "unpublished"
    published = "published"


class Ref(BaseModel):
    id: Optional[str] = Field(
        None, description="Technical id in the target software", title="Id"
    )
    model: Optional[str] = Field(
        None,
        description="Name of the model/entity in the target software",
        title="Model",
    )


class RefundOrderLineItem(BaseModel):
    id: str = Field(
        ..., description="Technical id of the order line in Chift", title="Id"
    )
    variant: Optional[OrderLineProductVariantItem] = Field(
        None, description="Product variant", title="Variant"
    )
    quantity: int = Field(..., title="Quantity")
    untaxed_amount: float = Field(
        ...,
        description="Untaxed amount refunded (after discount).",
        title="Untaxed Amount",
    )
    tax_amount: float = Field(
        ..., description="Total taxes refunded (after discount).", title="Tax Amount"
    )
    total: float = Field(
        ..., description="Total refunded (after discount).", title="Total"
    )


class States(Enum):
    open = "open"
    closed = "closed"
    all = "all"


class SyncConsumerStatus(Enum):
    active = "active"
    inactive = "inactive"


class SyncMappingItem(BaseModel):
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    values: List[MappingItem] = Field(..., title="Values")


class Token(BaseModel):
    access_token: str = Field(..., title="Access Token")
    token_type: str = Field(..., title="Token Type")
    expires_in: int = Field(..., title="Expires In")
    expires_on: int = Field(..., title="Expires On")


class TotalTaxItem(BaseModel):
    tax_rate: float = Field(..., title="Tax Rate")
    tax_amount: float = Field(..., title="Tax Amount")
    total: float = Field(..., title="Total")


class TransactionAccountingCategory(Enum):
    all = "all"
    unknown = "unknown"
    payout = "payout"
    payout_cancel = "payout_cancel"
    payment = "payment"
    payment_cancel = "payment_cancel"
    fee = "fee"
    fee_cancel = "fee_cancel"


class TransactionFilterDateType(Enum):
    value_date = "value_date"
    execution_date = "execution_date"


class TransactionItemOut(BaseModel):
    id: str = Field(..., description="Technical id in Chift", title="Id")
    source_ref: Ref = Field(
        ..., description="Technical id in the target software", title="Source Ref"
    )
    total: float = Field(..., description="Total amount incl. fee", title="Total")
    fee: float = Field(..., description="Total fee", title="Fee")
    currency: str = Field(..., description="Currency", title="Currency")
    exchange_rate: float = Field(
        ..., description="Exchange rate", title="Exchange Rate"
    )
    create_date: datetime = Field(..., description="Create Date", title="Create Date")
    application_type: str = Field(
        ...,
        description="Type of the transaction as recorded in the target software",
        title="Application Type",
    )
    accounting_category: TransactionAccountingCategory = Field(
        ..., description="Accounting category"
    )


class TriggerResponse(BaseModel):
    status: str = Field(..., title="Status")
    message: str = Field(..., title="Message")
    data: Optional[Dict[str, Any]] = Field(None, title="Data")


class TriggerType(Enum):
    timer = "timer"
    event = "event"


class UpdateConsumerItem(BaseModel):
    name: Optional[constr(max_length=255)] = Field(None, title="Name")
    email: Optional[constr(max_length=80)] = Field(None, title="Email")
    redirect_url: Optional[constr(max_length=255)] = Field(None, title="Redirect Url")


class UpdateOrderItem(BaseModel):
    customer_id: Optional[str] = Field(None, title="Customer Id")


class ValidationError(BaseModel):
    loc: List[Union[str, int]] = Field(..., title="Location")
    msg: str = Field(..., title="Message")
    type: str = Field(..., title="Error Type")


class VariantAttributeItem(BaseModel):
    name: str = Field(..., title="Name")
    value: str = Field(..., title="Value")


class VariantAttributeOptionItem(BaseModel):
    name: str = Field(..., title="Name")
    values: List[str] = Field(..., title="Values")


class VariantItem(BaseModel):
    id: str = Field(..., description="Technical id in Chift", title="Id")
    source_ref: Ref = Field(
        ..., description="Technical id in the target software", title="Source Ref"
    )
    parent_id: str = Field(
        ...,
        description="Technical id of the parent product in Chift",
        title="Parent Id",
    )
    name: str = Field(..., title="Name")
    description: Optional[str] = Field(None, title="Description")
    description_html: Optional[str] = Field(None, title="Description Html")
    categories: Optional[List[CategoryItem]] = Field([], title="Categories")
    created_on: Optional[datetime] = Field(None, title="Created On")
    sku: Optional[str] = Field(None, title="Sku")
    barcode: Optional[str] = Field(None, title="Barcode")
    available_quantity: Optional[float] = Field(0, title="Available Quantity")
    prices: Optional[List[ProductPriceItem]] = Field([], title="Prices")
    unit_of_measure: Optional[str] = Field(None, title="Unit Of Measure")
    weight: Optional[float] = Field(0, title="Weight")
    weight_unit: Optional[str] = Field(None, title="Weight Unit")
    status: Optional[ProductStatus] = None
    inventory_details: Optional[List[InventoryDetailsItem]] = Field(
        [], title="Inventory Details"
    )
    common_attributes: Optional[List[CommonAttributeItem]] = Field(
        [],
        description="List of attributes that are shared by all variants of the product.",
        title="Common Attributes",
    )
    variant_attributes: Optional[List[VariantAttributeItem]] = Field(
        [],
        description="List of attributes that are specific to the variant of the product.",
        title="Variant Attributes",
    )
    common_images: Optional[List[ImageItem]] = Field(
        [],
        description="List of images that are shared by all variants of the product.",
        title="Common Images",
    )
    variant_images: Optional[List[ImageItem]] = Field(
        [],
        description="List of images that are specific to the variant of the product.",
        title="Variant Images",
    )


class WebhookInstancePostItem(BaseModel):
    event: constr(max_length=80) = Field(..., title="Event")
    url: constr(max_length=500) = Field(..., title="Url")
    signingsecret: Optional[constr(max_length=100)] = Field(None, title="Signingsecret")
    integrationid: Optional[int] = Field(
        None,
        description="Can be used to specify the integration code of a specific connector. This is mandatory in case you create a webhook related to a specific One API.",
        title="Integrationid",
    )


class WebhookItem(BaseModel):
    event: str = Field(..., title="Event")
    api: Optional[str] = Field(None, title="Api")


class WebhookLogItem(BaseModel):
    webhooklogid: UUID = Field(..., title="Webhooklogid")
    webhookid: UUID = Field(..., title="Webhookid")
    event: str = Field(..., title="Event")
    url: str = Field(..., title="Url")
    accountid: str = Field(..., title="Accountid")
    createdon: datetime = Field(..., title="Createdon")
    httpstatus: int = Field(..., title="Httpstatus")
    integrationid: Optional[int] = Field(None, title="Integrationid")


class AppRoutersAccountingInvoiceType(Enum):
    customer_invoice = "customer_invoice"
    customer_refund = "customer_refund"
    supplier_invoice = "supplier_invoice"
    supplier_refund = "supplier_refund"


class AppRoutersAccountingVatCodeScope(Enum):
    nat = "nat"
    eu = "eu"
    int = "int"
    unknown = "unknown"


class AppRoutersAccountingVatCodeType(Enum):
    sale = "sale"
    purchase = "purchase"
    both = "both"
    unknown = "unknown"


class AppRoutersCommerceAddressItemIn(BaseModel):
    first_name: str = Field(..., title="First Name")
    last_name: str = Field(..., title="Last Name")
    street: str = Field(..., title="Street")
    number: str = Field(..., title="Number")
    box: Optional[str] = Field(None, title="Box")
    city: str = Field(..., title="City")
    postal_code: Optional[str] = Field(None, title="Postal Code")
    country: str = Field(..., description="Format: ISO 3166-1 codes.", title="Country")
    phone: Optional[str] = Field(None, title="Phone")
    email: Optional[str] = Field(None, title="Email")


class AppRoutersCommerceAddressItemOut(BaseModel):
    address_type: AddressType
    first_name: Optional[str] = Field(None, title="First Name")
    last_name: Optional[str] = Field(None, title="Last Name")
    street: Optional[str] = Field(None, title="Street")
    number: Optional[str] = Field(None, title="Number")
    box: Optional[str] = Field(None, title="Box")
    city: Optional[str] = Field(None, title="City")
    postal_code: Optional[str] = Field(None, title="Postal Code")
    country: Optional[str] = Field(
        None, description="Format: ISO 3166-1 codes.", title="Country"
    )
    phone: Optional[str] = Field(None, title="Phone")
    email: Optional[str] = Field(None, title="Email")


class AppRoutersCommerceDiscountItem(BaseModel):
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    amount: float = Field(..., title="Amount")


class AppRoutersConnectionsCredentialItem(BaseModel):
    key: str = Field(..., title="Key")
    value: str = Field(..., title="Value")


class AppRoutersConnectionsStatus(Enum):
    active = "active"
    inactive = "inactive"


class AppRoutersDatastoresStatus(Enum):
    active = "active"
    inactive = "inactive"


class AppRoutersIntegrationsCredentialItem(BaseModel):
    name: str = Field(..., title="Name")
    optional: Optional[bool] = Field(False, title="Optional")


class AppRoutersIntegrationsStatus(Enum):
    active = "active"
    inactive = "inactive"


class AppRoutersPosDiscountItem(BaseModel):
    name: Optional[str] = Field(None, title="Name")
    total: float = Field(..., title="Total")


class AppRoutersPosPaymentStatus(Enum):
    Pending = "Pending"
    Completed = "Completed"
    Canceled = "Canceled"
    Failed = "Failed"
    Unknown = "Unknown"
    Authorised = "Authorised"


class AppRoutersWebhooksStatus(Enum):
    active = "active"
    inactive = "inactive"


class ModelsCommonAddressItemIn(BaseModel):
    address_type: AddressType
    name: Optional[str] = Field(None, title="Name")
    number: Optional[str] = Field(None, title="Number")
    box: Optional[str] = Field(None, title="Box")
    phone: Optional[str] = Field(None, title="Phone")
    mobile: Optional[str] = Field(None, title="Mobile")
    email: Optional[str] = Field(None, title="Email")
    street: str = Field(..., title="Street")
    city: str = Field(..., title="City")
    postal_code: str = Field(..., title="Postal Code")
    country: str = Field(..., description="Format: ISO 3166-1 codes.", title="Country")


class ModelsCommonAddressItemOut(BaseModel):
    address_type: AddressType
    name: Optional[str] = Field(None, title="Name")
    number: Optional[str] = Field(None, title="Number")
    box: Optional[str] = Field(None, title="Box")
    phone: Optional[str] = Field(None, title="Phone")
    mobile: Optional[str] = Field(None, title="Mobile")
    email: Optional[str] = Field(None, title="Email")
    street: Optional[str] = Field(None, title="Street")
    city: Optional[str] = Field(None, title="City")
    postal_code: Optional[str] = Field(None, title="Postal Code")
    country: Optional[str] = Field(
        None, description="Format: ISO 3166-1 codes.", title="Country"
    )


class ModelsCommonPaymentStatus(Enum):
    all = "all"
    unpaid = "unpaid"
    paid = "paid"


class ModelsInvoicingInvoiceType(Enum):
    customer_invoice = "customer_invoice"
    customer_refund = "customer_refund"
    supplier_invoice = "supplier_invoice"
    supplier_refund = "supplier_refund"


class ModelsInvoicingProductItem(BaseModel):
    name: str = Field(..., description="Name", title="Name")
    unit_price: Optional[float] = Field(
        None, description="Unit price", title="Unit Price"
    )
    tax_id: Optional[str] = Field(
        None, description="Technical id of the tax in Chift", title="Tax Id"
    )
    code: Optional[str] = Field(None, description="Reference/code", title="Code")
    unit: Optional[str] = Field(
        None, description="Unit of measure matching target sofware name", title="Unit"
    )
    category: Optional[str] = Field(
        None, description="Category matching target sofware name", title="Category"
    )
    currency: Optional[str] = Field(
        None, description="Currency matching target sofware name", title="Currency"
    )
    description: Optional[str] = Field(
        None, description="Description", title="Description"
    )


class ModelsInvoicingVatCodeScope(Enum):
    nat = "nat"
    eu = "eu"
    int = "int"
    unknown = "unknown"


class ModelsInvoicingVatCodeType(Enum):
    sale = "sale"
    purchase = "purchase"
    both = "both"
    unknown = "unknown"


class AccountItem(BaseModel):
    number: str = Field(..., title="Number")
    name: str = Field(..., title="Name")
    active: Optional[bool] = Field(True, title="Active")
    type: Optional[AccountItemType] = None


class AddressItemInInvoicing(BaseModel):
    address_type: AddressType
    name: Optional[str] = Field(None, title="Name")
    number: Optional[str] = Field(None, title="Number")
    box: Optional[str] = Field(None, title="Box")
    phone: Optional[str] = Field(None, title="Phone")
    mobile: Optional[str] = Field(None, title="Mobile")
    email: Optional[str] = Field(None, title="Email")
    street: str = Field(..., title="Street")
    city: str = Field(..., title="City")
    postal_code: str = Field(..., title="Postal Code")
    country: str = Field(..., description="Format: ISO 3166-1 codes.", title="Country")


class AddressItemOutInvoicing(BaseModel):
    address_type: AddressType
    name: Optional[str] = Field(None, title="Name")
    number: Optional[str] = Field(None, title="Number")
    box: Optional[str] = Field(None, title="Box")
    phone: Optional[str] = Field(None, title="Phone")
    mobile: Optional[str] = Field(None, title="Mobile")
    email: Optional[str] = Field(None, title="Email")
    street: Optional[str] = Field(None, title="Street")
    city: Optional[str] = Field(None, title="City")
    postal_code: Optional[str] = Field(None, title="Postal Code")
    country: Optional[str] = Field(
        None, description="Format: ISO 3166-1 codes.", title="Country"
    )


class AnalyticDistribution(BaseModel):
    analytic_plan: str = Field(..., title="Analytic Plan")
    analytic_accounts: List[AnalyticDistributionDetail] = Field(
        ..., title="Analytic Accounts"
    )


class BalanceItemOut(BaseModel):
    id: str = Field(..., description="Technical id in Chift", title="Id")
    source_ref: Ref = Field(
        ..., description="Technical id in the target software", title="Source Ref"
    )
    availale_amount: float = Field(
        ..., description="Total amount available", title="Availale Amount"
    )
    currency: str = Field(..., description="Currency", title="Currency")
    create_date: datetime = Field(..., description="Create Date", title="Create Date")


class ClientItemIn(BaseModel):
    external_reference: Optional[str] = Field(None, title="External Reference")
    first_name: Optional[str] = Field(
        None,
        description="Only used when the client is an individual (is_company=false). Indicates the first name of the client.",
        title="First Name",
    )
    last_name: Optional[str] = Field(
        None,
        description="Only used when the client is an individual (is_company=false). Indicates the last name of the client.",
        title="Last Name",
    )
    name: str = Field(..., title="Name")
    function: Optional[str] = Field(
        None,
        description="Only used when the client is an individual (is_company=false). Indicates the function of the client.",
        title="Function",
    )
    is_company: Optional[bool] = Field(
        True,
        description="Indicates if the client is an individual or a company.",
        title="Is Company",
    )
    company_id: Optional[str] = Field(
        None,
        description="Only used when the client is an individual (is_company=false). Indicates the id of the company linked to the client.",
        title="Company Id",
    )
    phone: Optional[str] = Field(None, title="Phone")
    mobile: Optional[str] = Field(None, title="Mobile")
    email: Optional[str] = Field(None, title="Email")
    language: Optional[str] = Field(
        None, description="Format: ISO 639-1 codes.", title="Language"
    )
    internal_notes: Optional[str] = Field(None, title="Internal Notes")
    website: Optional[str] = Field(None, title="Website")
    vat: Optional[str] = Field(None, title="Vat")
    iban: Optional[str] = Field(
        None, description="IBAN Account number of the client.", title="Iban"
    )
    bank_account: Optional[str] = Field(
        None, description="Bank account number of the client.", title="Bank Account"
    )
    currency: Optional[str] = Field(
        None,
        description="Indicates the currency of the client (e.g. EUR).",
        title="Currency",
    )
    active: Optional[bool] = Field(True, title="Active")
    addresses: List[ModelsCommonAddressItemIn] = Field(..., title="Addresses")
    account_number: Optional[str] = Field(None, title="Account Number")


class ClientItemOut(BaseModel):
    external_reference: Optional[str] = Field(None, title="External Reference")
    first_name: Optional[str] = Field(
        None,
        description="Only used when the client is an individual (is_company=false). Indicates the first name of the client.",
        title="First Name",
    )
    last_name: Optional[str] = Field(
        None,
        description="Only used when the client is an individual (is_company=false). Indicates the last name of the client.",
        title="Last Name",
    )
    name: Optional[str] = Field(None, title="Name")
    function: Optional[str] = Field(
        None,
        description="Only used when the client is an individual (is_company=false). Indicates the function of the client.",
        title="Function",
    )
    is_company: Optional[bool] = Field(
        True,
        description="Indicates if the client is an individual or a company.",
        title="Is Company",
    )
    company_id: Optional[str] = Field(
        None,
        description="Only used when the client is an individual (is_company=false). Indicates the id of the company linked to the client.",
        title="Company Id",
    )
    phone: Optional[str] = Field(None, title="Phone")
    mobile: Optional[str] = Field(None, title="Mobile")
    email: Optional[str] = Field(None, title="Email")
    language: Optional[str] = Field(
        None, description="Format: ISO 639-1 codes.", title="Language"
    )
    internal_notes: Optional[str] = Field(None, title="Internal Notes")
    website: Optional[str] = Field(None, title="Website")
    vat: Optional[str] = Field(None, title="Vat")
    iban: Optional[str] = Field(
        None, description="IBAN Account number of the client.", title="Iban"
    )
    bank_account: Optional[str] = Field(
        None, description="Bank account number of the client.", title="Bank Account"
    )
    currency: Optional[str] = Field(
        None,
        description="Indicates the currency of the client (e.g. EUR).",
        title="Currency",
    )
    active: Optional[bool] = Field(True, title="Active")
    addresses: Optional[List[ModelsCommonAddressItemOut]] = Field([], title="Addresses")
    account_number: Optional[str] = Field(None, title="Account Number")
    company_number: Optional[str] = Field(None, title="Company Number")
    id: Optional[str] = Field(None, title="Id")


class ClientItemUpdate(BaseModel):
    external_reference: Optional[str] = Field(None, title="External Reference")
    first_name: Optional[str] = Field(
        None,
        description="Only used when the client is an individual (is_company=false). Indicates the first name of the client.",
        title="First Name",
    )
    last_name: Optional[str] = Field(
        None,
        description="Only used when the client is an individual (is_company=false). Indicates the last name of the client.",
        title="Last Name",
    )
    name: Optional[str] = Field(None, title="Name")
    function: Optional[str] = Field(
        None,
        description="Only used when the client is an individual (is_company=false). Indicates the function of the client.",
        title="Function",
    )
    is_company: Optional[bool] = Field(
        True,
        description="Indicates if the client is an individual or a company.",
        title="Is Company",
    )
    company_id: Optional[str] = Field(
        None,
        description="Only used when the client is an individual (is_company=false). Indicates the id of the company linked to the client.",
        title="Company Id",
    )
    phone: Optional[str] = Field(None, title="Phone")
    mobile: Optional[str] = Field(None, title="Mobile")
    email: Optional[str] = Field(None, title="Email")
    language: Optional[str] = Field(
        None, description="Format: ISO 639-1 codes.", title="Language"
    )
    internal_notes: Optional[str] = Field(None, title="Internal Notes")
    website: Optional[str] = Field(None, title="Website")
    vat: Optional[str] = Field(None, title="Vat")
    iban: Optional[str] = Field(
        None, description="IBAN Account number of the client.", title="Iban"
    )
    bank_account: Optional[str] = Field(
        None, description="Bank account number of the client.", title="Bank Account"
    )
    currency: Optional[str] = Field(
        None,
        description="Indicates the currency of the client (e.g. EUR).",
        title="Currency",
    )
    active: Optional[bool] = Field(True, title="Active")
    addresses: Optional[List[ModelsCommonAddressItemOut]] = Field([], title="Addresses")


class ClosureItem(BaseModel):
    date: date = Field(..., title="Date")
    status: ClosureStates


class CommerceCustomerItem(BaseModel):
    id: str = Field(..., description="Technical id in Chift", title="Id")
    source_ref: Ref = Field(
        ..., description="Technical id in the target software", title="Source Ref"
    )
    first_name: Optional[str] = Field(None, title="First Name")
    last_name: Optional[str] = Field(None, title="Last Name")
    phone: Optional[str] = Field(None, title="Phone")
    email: Optional[str] = Field(None, title="Email")
    language: Optional[str] = Field(
        None, description="Format: ISO 639-1 codes.", title="Language"
    )
    internal_notes: Optional[str] = Field(None, title="Internal Notes")
    currency: Optional[str] = Field(
        None,
        description="Indicates the currency of the client (e.g. EUR).",
        title="Currency",
    )
    addresses: Optional[List[AppRoutersCommerceAddressItemOut]] = Field(
        [], title="Addresses"
    )
    created_on: Optional[datetime] = Field(None, title="Created On")


class CommerceLocationItemOut(BaseModel):
    id: str = Field(
        ..., description="Technical id of the location in Chift", title="Id"
    )
    name: str = Field(..., title="Name")
    source_ref: Optional[Ref] = Field(
        None,
        description="Technical id of the location in the target software",
        title="Source Ref",
    )


class ConnectionItem(BaseModel):
    connectionid: UUID = Field(..., title="Connectionid")
    name: str = Field(..., title="Name")
    integration: str = Field(..., title="Integration")
    integrationid: int = Field(..., title="Integrationid")
    api: str = Field(..., title="Api")
    data: Optional[Dict[str, Any]] = Field(None, title="Data")
    status: AppRoutersConnectionsStatus


class ContactItemIn(BaseModel):
    is_prospect: Optional[bool] = Field(
        None, description="Is a prospect?", title="Is Prospect"
    )
    is_customer: Optional[bool] = Field(
        None, description="Is a customer?", title="Is Customer"
    )
    is_supplier: Optional[bool] = Field(
        None, description="Is a supplier?", title="Is Supplier"
    )
    is_company: Optional[bool] = Field(
        None, description="Is a company?", title="Is Company"
    )
    company_name: Optional[str] = Field(
        None, description="Name of the company", title="Company Name"
    )
    first_name: Optional[str] = Field(None, description="Firstname", title="First Name")
    last_name: Optional[str] = Field(None, description="Lastname", title="Last Name")
    email: Optional[str] = Field(None, description="Email", title="Email")
    phone: Optional[str] = Field(None, description="Phone", title="Phone")
    mobile: Optional[str] = Field(None, description="Mobile", title="Mobile")
    company_id: Optional[str] = Field(
        None,
        description="Technical id of the contact' company in Chift",
        title="Company Id",
    )
    vat: Optional[str] = Field(None, description="VAT number", title="Vat")
    company_number: Optional[str] = Field(
        None,
        description="Company number (identification number different than the VAT (e.g. siret))",
        title="Company Number",
    )
    currency: Optional[str] = Field(
        None, description="Currency matching target sofware name", title="Currency"
    )
    language: Optional[str] = Field(
        None, description="Language matching target sofware name", title="Language"
    )
    comment: Optional[str] = Field(None, description="Comment", title="Comment")
    customer_account_number: Optional[str] = Field(
        None,
        description="Number of the accounting account used for sales (e.g. 701000)",
        title="Customer Account Number",
    )
    supplier_account_number: Optional[str] = Field(
        None,
        description="Number of the accounting account used for purchases (e.g. 601000)",
        title="Supplier Account Number",
    )
    birthdate: Optional[date] = Field(None, description="Birthdate", title="Birthdate")
    gender: Optional[ContactGender] = Field(None, description="Gender")
    addresses: Optional[List[AddressItemInInvoicing]] = Field(
        [], description="Addresses", title="Addresses"
    )


class ContactItemOut(BaseModel):
    id: str = Field(..., description="Technical id in Chift", title="Id")
    source_ref: Ref = Field(
        ..., description="Technical id in the target software", title="Source Ref"
    )
    is_prospect: Optional[bool] = Field(
        None, description="Is a prospect?", title="Is Prospect"
    )
    is_customer: Optional[bool] = Field(
        None, description="Is a customer?", title="Is Customer"
    )
    is_supplier: Optional[bool] = Field(
        None, description="Is a supplier?", title="Is Supplier"
    )
    is_company: Optional[bool] = Field(
        None, description="Is a company?", title="Is Company"
    )
    company_name: Optional[str] = Field(
        None, description="Name of the company", title="Company Name"
    )
    first_name: Optional[str] = Field(None, description="Firstname", title="First Name")
    last_name: Optional[str] = Field(None, description="Lastname", title="Last Name")
    email: Optional[str] = Field(None, description="Email", title="Email")
    phone: Optional[str] = Field(None, description="Phone", title="Phone")
    mobile: Optional[str] = Field(None, description="Mobile", title="Mobile")
    company_id: Optional[str] = Field(
        None,
        description="Technical id of the contact' company in Chift",
        title="Company Id",
    )
    vat: Optional[str] = Field(None, description="VAT number", title="Vat")
    company_number: Optional[str] = Field(
        None,
        description="Company number (identification number different than the VAT (e.g. siret))",
        title="Company Number",
    )
    currency: Optional[str] = Field(
        None, description="Currency matching target sofware name", title="Currency"
    )
    language: Optional[str] = Field(
        None, description="Language matching target sofware name", title="Language"
    )
    comment: Optional[str] = Field(None, description="Comment", title="Comment")
    customer_account_number: Optional[str] = Field(
        None,
        description="Number of the accounting account used for sales (e.g. 701000)",
        title="Customer Account Number",
    )
    supplier_account_number: Optional[str] = Field(
        None,
        description="Number of the accounting account used for purchases (e.g. 601000)",
        title="Supplier Account Number",
    )
    birthdate: Optional[date] = Field(None, description="Birthdate", title="Birthdate")
    gender: Optional[ContactGender] = Field(None, description="Gender")
    addresses: Optional[List[AddressItemOutInvoicing]] = Field(
        [], description="Addresses", title="Addresses"
    )


class DataStoreItem(BaseModel):
    id: str = Field(..., title="Id")
    name: str = Field(..., title="Name")
    status: Optional[AppRoutersDatastoresStatus] = "active"
    definition: DatastoreDef


class FeesItem(BaseModel):
    type: FeesType
    tax_rate: float = Field(..., title="Tax Rate")
    untaxed_amount: float = Field(..., title="Untaxed Amount")
    tax_amount: float = Field(..., title="Tax Amount")
    total: float = Field(..., title="Total")


class FinancialEntryItemIn(BaseModel):
    date: date = Field(..., title="Date")
    journal_id: str = Field(
        ...,
        description="Indicates the journal used in for the operation.",
        title="Journal Id",
    )
    currency: str = Field(
        ...,
        description="Indicates the currency of the operation (e.g. EUR).",
        title="Currency",
    )
    currency_exchange_rate: Optional[float] = Field(
        1,
        description="Indicates the exchange rate at the date of the operation. Must be filled in when creating the operation in another currency from the default currency of the accounting system.",
        title="Currency Exchange Rate",
    )
    reference: Optional[str] = Field(None, title="Reference")
    items: List[FinancialEntryLineItem] = Field(..., title="Items")
    number: Optional[str] = Field(None, title="Number")
    pdf: Optional[str] = Field(
        None,
        description="Base 64 string representing the PDF attached to the sale/purchase entry.",
        title="Pdf",
    )


class FinancialEntryItemOut(BaseModel):
    date: date = Field(..., title="Date")
    journal_id: str = Field(
        ...,
        description="Indicates the journal used in for the operation.",
        title="Journal Id",
    )
    currency: str = Field(
        ...,
        description="Indicates the currency of the operation (e.g. EUR).",
        title="Currency",
    )
    currency_exchange_rate: Optional[float] = Field(
        1,
        description="Indicates the exchange rate at the date of the operation. Must be filled in when creating the operation in another currency from the default currency of the accounting system.",
        title="Currency Exchange Rate",
    )
    reference: Optional[str] = Field(None, title="Reference")
    items: List[FinancialEntryLineItemOut] = Field(..., title="Items")
    id: str = Field(..., title="Id")
    number: str = Field(..., title="Number")


class FlowDataStoreItem(BaseModel):
    id: Optional[str] = Field(None, title="Id")
    name: str = Field(..., title="Name")
    status: Optional[AppRoutersDatastoresStatus] = "active"
    definition: DatastoreDef


class FlowExecution(BaseModel):
    type: ExecutionType
    data: Optional[Union[FlowExecutionChain, FlowExecutionCode]] = Field(
        None, title="Data"
    )


class FlowTrigger(BaseModel):
    type: TriggerType
    data: Optional[Union[FlowTriggerTimer, FlowTriggerEvent]] = Field(
        None, title="Data"
    )


class HTTPValidationError(BaseModel):
    message: str = Field(..., title="Message")
    status: Optional[str] = Field("error", title="Status")
    detail: Optional[List[ValidationError]] = Field(None, title="Detail")


class IntegrationItem(BaseModel):
    integrationid: int = Field(..., title="Integrationid")
    name: str = Field(..., title="Name")
    status: AppRoutersIntegrationsStatus
    api: Api
    logo_url: str = Field(..., title="Logo Url")
    icon_url: str = Field(..., title="Icon Url")
    credentials: Optional[List[AppRoutersIntegrationsCredentialItem]] = Field(
        [],
        description="List of credentials that must be specified to create a connection. Can be used if you want to pass credentials on connection creation. Not compatible with oAuth2 routes.",
        title="Credentials",
    )


class InvoiceItem(BaseModel):
    currency: str = Field(
        ..., description="Currency matching target sofware name", title="Currency"
    )
    invoice_type: ModelsInvoicingInvoiceType = Field(..., description="Invoice type")
    status: InvoiceStatus = Field(..., description="Status")
    invoice_date: date = Field(..., description="Invoicing date", title="Invoice Date")
    tax_amount: float = Field(..., description="Taxes amount", title="Tax Amount")
    untaxed_amount: float = Field(
        ..., description="Untaxed amount", title="Untaxed Amount"
    )
    total: float = Field(..., description="Total amount incl. taxes", title="Total")
    lines: Optional[List[InvoiceLineItem]] = Field(
        [], description="Invoice lines", title="Lines"
    )
    partner_id: Optional[str] = Field(
        None,
        description="Technical id of the vendor/customer in Chift",
        title="Partner Id",
    )
    invoice_number: Optional[str] = Field(
        None, description="Number/sequence", title="Invoice Number"
    )
    due_date: Optional[date] = Field(None, description="Due date", title="Due Date")
    reference: Optional[str] = Field(None, description="Reference", title="Reference")
    payment_communication: Optional[str] = Field(
        None, description="Payment communication", title="Payment Communication"
    )
    customer_memo: Optional[str] = Field(
        None, description="Customer note/memo", title="Customer Memo"
    )
    journal_ref: Optional[FieldRef] = Field(
        None, description="Journal", title="Journal Ref"
    )


class InvoiceItemInMonoAnalyticPlan(BaseModel):
    invoice_type: AppRoutersAccountingInvoiceType
    invoice_number: Optional[str] = Field(
        None,
        description="Number of the invoice. If left empty, will be automatically generated by the accounting system at creation.",
        title="Invoice Number",
    )
    invoice_date: date = Field(..., title="Invoice Date")
    due_date: date = Field(..., title="Due Date")
    currency: str = Field(
        ...,
        description="Indicates the currency of the invoice (e.g. EUR).",
        title="Currency",
    )
    untaxed_amount: float = Field(..., title="Untaxed Amount")
    tax_amount: float = Field(..., title="Tax Amount")
    total: float = Field(..., title="Total")
    reference: Optional[str] = Field(None, title="Reference")
    payment_communication: Optional[str] = Field(None, title="Payment Communication")
    customer_memo: Optional[str] = Field(None, title="Customer Memo")
    partner_id: constr(min_length=1) = Field(..., title="Partner Id")
    journal_id: Optional[str] = Field(
        None,
        description="Indicates the journal used in for the invoice. If the journal is not given, the journal will be automatically set if only one journal exists otherwise an error will be thrown.",
        title="Journal Id",
    )
    status: Optional[InvoiceStatusIn] = "posted"
    pdf: Optional[str] = Field(
        None,
        description="Base 64 string representing the PDF attached to the sale/purchase entry.",
        title="Pdf",
    )
    currency_exchange_rate: Optional[float] = Field(
        1,
        description="Indicates the exchange rate at the date of the invoice. Must be filled in when creating the invoice in another currency from the default currency of the accounting system.",
        title="Currency Exchange Rate",
    )
    invoice_correction: Optional[InvoiceCorrection] = Field(
        None,
        description="Information used to add a correction line when roundings have an impact on the total amount of the invoice.",
        title="Invoice Correction",
    )
    lines: List[InvoiceLineItemInMonoAnalyticPlan] = Field(..., title="Lines")


class InvoiceItemOut(BaseModel):
    id: str = Field(..., description="Technical id in Chift", title="Id")
    source_ref: Ref = Field(
        ..., description="Technical id in the target software", title="Source Ref"
    )
    currency: str = Field(
        ..., description="Currency matching target sofware name", title="Currency"
    )
    invoice_type: ModelsInvoicingInvoiceType = Field(..., description="Invoice type")
    status: InvoiceStatus = Field(..., description="Status")
    invoice_date: date = Field(..., description="Invoicing date", title="Invoice Date")
    tax_amount: float = Field(..., description="Taxes amount", title="Tax Amount")
    untaxed_amount: float = Field(
        ..., description="Untaxed amount", title="Untaxed Amount"
    )
    total: float = Field(..., description="Total amount incl. taxes", title="Total")
    lines: Optional[List[InvoiceLineItem]] = Field(
        [], description="Invoice lines", title="Lines"
    )
    partner_id: Optional[str] = Field(
        None,
        description="Technical id of the vendor/customer in Chift",
        title="Partner Id",
    )
    invoice_number: Optional[str] = Field(
        None, description="Number/sequence", title="Invoice Number"
    )
    due_date: Optional[date] = Field(None, description="Due date", title="Due Date")
    reference: Optional[str] = Field(None, description="Reference", title="Reference")
    payment_communication: Optional[str] = Field(
        None, description="Payment communication", title="Payment Communication"
    )
    customer_memo: Optional[str] = Field(
        None, description="Customer note/memo", title="Customer Memo"
    )
    journal_ref: Optional[FieldRef] = Field(
        None, description="Journal", title="Journal Ref"
    )


class InvoiceItemOutMonoAnalyticPlan(BaseModel):
    invoice_type: AppRoutersAccountingInvoiceType
    invoice_number: Optional[str] = Field(
        None,
        description="Number of the invoice. If left empty, will be automatically generated by the accounting system at creation.",
        title="Invoice Number",
    )
    invoice_date: date = Field(..., title="Invoice Date")
    due_date: date = Field(..., title="Due Date")
    currency: str = Field(
        ...,
        description="Indicates the currency of the invoice (e.g. EUR).",
        title="Currency",
    )
    untaxed_amount: float = Field(..., title="Untaxed Amount")
    tax_amount: float = Field(..., title="Tax Amount")
    total: float = Field(..., title="Total")
    reference: Optional[str] = Field(None, title="Reference")
    payment_communication: Optional[str] = Field(None, title="Payment Communication")
    customer_memo: Optional[str] = Field(None, title="Customer Memo")
    id: Optional[str] = Field(None, title="Id")
    partner_id: str = Field(..., title="Partner Id")
    journal_id: str = Field(
        ...,
        description="Indicates the journal used in for the invoice. If the journal is not given, the journal will be automatically set if only one journal exists otherwise an error will be thrown.",
        title="Journal Id",
    )
    payments: Optional[List[Payment]] = Field(None, title="Payments")
    status: Optional[InvoiceStatusOut] = "posted"
    lines: List[InvoiceLineItemOutMonoAnalyticPlan] = Field(..., title="Lines")


class InvoiceItemOutSingle(BaseModel):
    id: str = Field(..., description="Technical id in Chift", title="Id")
    source_ref: Ref = Field(
        ..., description="Technical id in the target software", title="Source Ref"
    )
    currency: str = Field(
        ..., description="Currency matching target sofware name", title="Currency"
    )
    invoice_type: ModelsInvoicingInvoiceType = Field(..., description="Invoice type")
    status: InvoiceStatus = Field(..., description="Status")
    invoice_date: date = Field(..., description="Invoicing date", title="Invoice Date")
    tax_amount: float = Field(..., description="Taxes amount", title="Tax Amount")
    untaxed_amount: float = Field(
        ..., description="Untaxed amount", title="Untaxed Amount"
    )
    total: float = Field(..., description="Total amount incl. taxes", title="Total")
    lines: Optional[List[InvoiceLineItem]] = Field(
        [], description="Invoice lines", title="Lines"
    )
    partner_id: Optional[str] = Field(
        None,
        description="Technical id of the vendor/customer in Chift",
        title="Partner Id",
    )
    invoice_number: Optional[str] = Field(
        None, description="Number/sequence", title="Invoice Number"
    )
    due_date: Optional[date] = Field(None, description="Due date", title="Due Date")
    reference: Optional[str] = Field(None, description="Reference", title="Reference")
    payment_communication: Optional[str] = Field(
        None, description="Payment communication", title="Payment Communication"
    )
    customer_memo: Optional[str] = Field(
        None, description="Customer note/memo", title="Customer Memo"
    )
    journal_ref: Optional[FieldRef] = Field(
        None, description="Journal", title="Journal Ref"
    )
    pdf: Optional[str] = Field(None, description="PDF document in base64", title="Pdf")


class InvoiceLineItemInMultiAnalyticPlans(BaseModel):
    line_number: Optional[int] = Field(1, title="Line Number")
    description: str = Field(..., title="Description")
    unit_price: float = Field(..., title="Unit Price")
    unit_of_measure: Optional[str] = Field(
        None,
        description="A list of default units can be used for which an advanced mapping has been done (units: 'hour', 'day', 'cm', 'm2', 'm3', 'm', 'km', 'mile', 'g', 'kg', 'ton', 'box', 'pallet', 'roll', 'liter', 'unit'). Custom units of measure must have an identical name in the target software.",
        title="Unit Of Measure",
    )
    quantity: float = Field(..., title="Quantity")
    untaxed_amount: float = Field(..., title="Untaxed Amount")
    tax_rate: float = Field(
        ...,
        description="Indicates the tax rate used for the line (e.g. 21.0).",
        title="Tax Rate",
    )
    tax_amount: float = Field(..., title="Tax Amount")
    total: float = Field(..., title="Total")
    account_number: str = Field(
        ...,
        description="Indicates the number of the account used for the line (e.g. 701000).",
        title="Account Number",
    )
    tax_code: str = Field(
        ...,
        description="Indicates the tax code used for the line. This is the ID of the Tax Code in the accounting software.",
        title="Tax Code",
    )
    analytic_distribution: Optional[List[AnalyticDistribution]] = Field(
        [], title="Analytic Distribution"
    )


class InvoiceLineItemOutMultiAnalyticPlans(BaseModel):
    line_number: Optional[int] = Field(1, title="Line Number")
    description: str = Field(..., title="Description")
    unit_price: float = Field(..., title="Unit Price")
    unit_of_measure: Optional[str] = Field(
        None,
        description="A list of default units can be used for which an advanced mapping has been done (units: 'hour', 'day', 'cm', 'm2', 'm3', 'm', 'km', 'mile', 'g', 'kg', 'ton', 'box', 'pallet', 'roll', 'liter', 'unit'). Custom units of measure must have an identical name in the target software.",
        title="Unit Of Measure",
    )
    quantity: float = Field(..., title="Quantity")
    untaxed_amount: float = Field(..., title="Untaxed Amount")
    tax_rate: float = Field(
        ...,
        description="Indicates the tax rate used for the line (e.g. 21.0).",
        title="Tax Rate",
    )
    tax_amount: float = Field(..., title="Tax Amount")
    total: float = Field(..., title="Total")
    account_number: str = Field(
        ...,
        description="Indicates the number of the account used for the line (e.g. 701000).",
        title="Account Number",
    )
    tax_code: Optional[str] = Field(
        None,
        description="Indicates the tax code used for the line. This is the ID of the Tax Code in the accounting software.",
        title="Tax Code",
    )
    analytic_distribution: Optional[List[AnalyticDistribution]] = Field(
        [], title="Analytic Distribution"
    )


class Item(BaseModel):
    id: str = Field(..., title="Id")
    quantity: float = Field(..., title="Quantity")
    unit_price: float = Field(..., title="Unit Price")
    total: float = Field(..., title="Total")
    tax_amount: float = Field(..., title="Tax Amount")
    tax_rate: Optional[float] = Field(None, title="Tax Rate")
    description: str = Field(..., title="Description")
    discounts: Optional[List[AppRoutersPosDiscountItem]] = Field([], title="Discounts")


class Journal(BaseModel):
    id: str = Field(..., title="Id")
    code: str = Field(..., title="Code")
    name: str = Field(..., title="Name")
    journal_type: JournalType


class JournalEntryMonoAnalyticPlan(BaseModel):
    reference: Optional[str] = Field(None, title="Reference")
    due_date: Optional[date] = Field(None, title="Due Date")
    journal_id: str = Field(..., title="Journal Id")
    name: Optional[str] = Field(None, title="Name")
    journal_name: str = Field(..., title="Journal Name")
    date: Optional[date] = Field(None, title="Date")
    posted: Optional[bool] = Field(False, title="Posted")
    id: str = Field(..., title="Id")
    items: Optional[List[JournalItemMonoAnalyticPlan]] = Field([], title="Items")


class JournalItemIn(BaseModel):
    account_number: constr(min_length=1) = Field(..., title="Account Number")
    partner_id: Optional[str] = Field(None, title="Partner Id")
    description: Optional[str] = Field(None, title="Description")
    debit: float = Field(..., title="Debit")
    credit: float = Field(..., title="Credit")
    currency: constr(min_length=1) = Field(..., title="Currency")
    currency_exchange_rate: Optional[float] = Field(1, title="Currency Exchange Rate")
    analytic_distribution: Optional[List[AnalyticDistribution]] = Field(
        [], title="Analytic Distribution"
    )
    pdf: Optional[str] = Field(
        None,
        description="Base 64 string representing the PDF attached to the item.",
        title="Pdf",
    )


class JournalItemMultiAnalyticPlan(BaseModel):
    account_number: constr(min_length=1) = Field(..., title="Account Number")
    partner_id: Optional[str] = Field(None, title="Partner Id")
    description: Optional[str] = Field(None, title="Description")
    debit: float = Field(..., title="Debit")
    credit: float = Field(..., title="Credit")
    currency: constr(min_length=1) = Field(..., title="Currency")
    currency_exchange_rate: Optional[float] = Field(1, title="Currency Exchange Rate")
    id: str = Field(..., title="Id")
    partner_name: Optional[str] = Field(None, title="Partner Name")
    account_name: str = Field(..., title="Account Name")
    matching_numbers: Optional[List[str]] = Field([], title="Matching Numbers")
    analytic_distribution: Optional[List[AnalyticDistribution]] = Field(
        [], title="Analytic Distribution"
    )


class MiscellaneousOperationLine(BaseModel):
    line_number: Optional[int] = Field(1, title="Line Number")
    description: Optional[str] = Field(None, title="Description")
    amount: float = Field(
        ..., description="Positive for Credit and negative for Debit.", title="Amount"
    )
    type: MiscellaneousOperationLineType
    account_number: str = Field(..., title="Account Number")
    partner_id: Optional[str] = Field(
        None,
        description="Must be filled in it is a 'customer_account' or 'supplier_account' line type.",
        title="Partner Id",
    )
    analytic_account: Optional[str] = Field(None, title="Analytic Account")


class MiscellaneousOperationOut(BaseModel):
    operation_number: Optional[str] = Field(None, title="Operation Number")
    operation_date: date = Field(..., title="Operation Date")
    currency: str = Field(
        ...,
        description="Indicates the currency of the operation (e.g. EUR).",
        title="Currency",
    )
    currency_exchange_rate: Optional[float] = Field(
        1,
        description="Indicates the exchange rate at the date of the operation. Must be filled in when creating the operation in another currency from the default currency of the accounting system.",
        title="Currency Exchange Rate",
    )
    lines: List[MiscellaneousOperationLine] = Field(..., title="Lines")
    journal_id: str = Field(
        ...,
        description="Indicates the journal used in for the operation.",
        title="Journal Id",
    )
    status: MiscellaneousOperationStatusOut
    id: str = Field(..., title="Id")


class OpportunityItem(BaseModel):
    id: str = Field(..., description="Technical id in Chift", title="Id")
    source_ref: Ref = Field(
        ..., description="Technical id in the target software", title="Source Ref"
    )
    name: str = Field(..., description="Name", title="Name")
    total: float = Field(..., description="Total", title="Total")
    probability: float = Field(
        ..., description="Probability of success", title="Probability"
    )
    status: OpportunityStatus = Field(..., description="Status")
    partner_id: Optional[str] = Field(
        None, description="Technical id of the customer in Chift", title="Partner Id"
    )
    comment: Optional[str] = Field(None, description="Comment", title="Comment")
    currency: Optional[str] = Field(
        None, description="Currency matching target sofware name", title="Currency"
    )
    description: Optional[str] = Field(
        None, description="Description", title="Description"
    )
    pipe_status: Optional[str] = Field(
        None, description="Current stage in pipeline", title="Pipe Status"
    )
    pipe_name: Optional[str] = Field(
        None, description="Pipeline name", title="Pipe Name"
    )
    created_date: Optional[date] = Field(
        None, description="Date creation", title="Created Date"
    )
    due_date: Optional[date] = Field(None, description="Due Date", title="Due Date")
    end_date: Optional[date] = Field(None, description="End Date", title="End Date")
    is_won: Optional[bool] = Field(None, description="Is won?", title="Is Won")
    owner_ref: Optional[FieldRef] = Field(
        None, description="Employee/User", title="Owner Ref"
    )


class OrderItemIn(BaseModel):
    customer: OrderCustomerItem
    billing_address: AppRoutersCommerceAddressItemIn
    shipping_address: AppRoutersCommerceAddressItemIn
    currency: str = Field(
        ...,
        description="Indicates the currency of the order (e.g. EUR).",
        title="Currency",
    )
    note: Optional[str] = Field(None, title="Note")
    lines: List[OrderLineItemIn] = Field(..., title="Lines")
    payment_method: Optional[str] = Field(
        None,
        description="If filled in the order will be marked as paid and processed by this payment method.",
        title="Payment Method",
    )


class OrderLineItemOut(BaseModel):
    id: str = Field(..., description="Technical id in Chift", title="Id")
    source_ref: Ref = Field(
        ..., description="Technical id in the target software", title="Source Ref"
    )
    variant: Optional[OrderLineProductVariantItem] = Field(
        None, description="Product variant", title="Variant"
    )
    quantity: int = Field(..., title="Quantity")
    unit_price: float = Field(
        ..., description="Unit price of the product without taxes.", title="Unit Price"
    )
    description: str = Field(..., title="Description")
    tax_rate: float = Field(
        ...,
        description="Indicates the tax rate used for the line (e.g. 21.0).",
        title="Tax Rate",
    )
    untaxed_amount: float = Field(
        ...,
        description="Untaxed amount of the order line with discount.",
        title="Untaxed Amount",
    )
    tax_amount: float = Field(
        ..., description="Total taxes applied to the order line.", title="Tax Amount"
    )
    total: float = Field(
        ..., description="Total of the order line with discount.", title="Total"
    )
    discounts: Optional[List[AppRoutersCommerceDiscountItem]] = Field(
        [], title="Discounts"
    )


class OrderRefundItem(BaseModel):
    created_on: Optional[datetime] = Field(None, title="Created On")
    total: float = Field(..., title="Total")
    reason: Optional[str] = Field(None, title="Reason")
    order_lines: Optional[List[RefundOrderLineItem]] = Field([], title="Order Lines")
    other: Optional[float] = Field(0, title="Other")


class POSCreateCustomerItem(BaseModel):
    first_name: constr(min_length=1) = Field(..., title="First Name")
    last_name: constr(min_length=1) = Field(..., title="Last Name")
    phone: Optional[str] = Field(None, title="Phone")
    email: Optional[str] = Field(None, title="Email")
    address: Optional[PostAddressItem] = None


class PageAccountItem(BaseModel):
    items: List[AccountItem] = Field(..., title="Items")
    total: conint(ge=0) = Field(..., title="Total")
    page: conint(ge=1) = Field(..., title="Page")
    size: conint(ge=1) = Field(..., title="Size")


class PageBalanceItemOut(BaseModel):
    items: List[BalanceItemOut] = Field(..., title="Items")
    total: conint(ge=0) = Field(..., title="Total")
    page: conint(ge=1) = Field(..., title="Page")
    size: conint(ge=1) = Field(..., title="Size")


class PageClientItemOut(BaseModel):
    items: List[ClientItemOut] = Field(..., title="Items")
    total: conint(ge=0) = Field(..., title="Total")
    page: conint(ge=1) = Field(..., title="Page")
    size: conint(ge=1) = Field(..., title="Size")


class PageCommerceCustomerItem(BaseModel):
    items: List[CommerceCustomerItem] = Field(..., title="Items")
    total: conint(ge=0) = Field(..., title="Total")
    page: conint(ge=1) = Field(..., title="Page")
    size: conint(ge=1) = Field(..., title="Size")


class PageCommerceLocationItemOut(BaseModel):
    items: List[CommerceLocationItemOut] = Field(..., title="Items")
    total: conint(ge=0) = Field(..., title="Total")
    page: conint(ge=1) = Field(..., title="Page")
    size: conint(ge=1) = Field(..., title="Size")


class PageContactItemOut(BaseModel):
    items: List[ContactItemOut] = Field(..., title="Items")
    total: conint(ge=0) = Field(..., title="Total")
    page: conint(ge=1) = Field(..., title="Page")
    size: conint(ge=1) = Field(..., title="Size")


class PageInvoiceItemOutMonoAnalyticPlan(BaseModel):
    items: List[InvoiceItemOutMonoAnalyticPlan] = Field(..., title="Items")
    total: conint(ge=0) = Field(..., title="Total")
    page: conint(ge=1) = Field(..., title="Page")
    size: conint(ge=1) = Field(..., title="Size")


class PageInvoiceItemOut(BaseModel):
    items: List[InvoiceItemOut] = Field(..., title="Items")
    total: conint(ge=0) = Field(..., title="Total")
    page: conint(ge=1) = Field(..., title="Page")
    size: conint(ge=1) = Field(..., title="Size")


class PageJournalEntryMonoAnalyticPlan(BaseModel):
    items: List[JournalEntryMonoAnalyticPlan] = Field(..., title="Items")
    total: conint(ge=0) = Field(..., title="Total")
    page: conint(ge=1) = Field(..., title="Page")
    size: conint(ge=1) = Field(..., title="Size")


class PageJournal(BaseModel):
    items: List[Journal] = Field(..., title="Items")
    total: conint(ge=0) = Field(..., title="Total")
    page: conint(ge=1) = Field(..., title="Page")
    size: conint(ge=1) = Field(..., title="Size")


class PageMiscellaneousOperationOut(BaseModel):
    items: List[MiscellaneousOperationOut] = Field(..., title="Items")
    total: conint(ge=0) = Field(..., title="Total")
    page: conint(ge=1) = Field(..., title="Page")
    size: conint(ge=1) = Field(..., title="Size")


class PageOpportunityItem(BaseModel):
    items: List[OpportunityItem] = Field(..., title="Items")
    total: conint(ge=0) = Field(..., title="Total")
    page: conint(ge=1) = Field(..., title="Page")
    size: conint(ge=1) = Field(..., title="Size")


class PagePaymentMethods(BaseModel):
    items: List[PaymentMethods] = Field(..., title="Items")
    total: conint(ge=0) = Field(..., title="Total")
    page: conint(ge=1) = Field(..., title="Page")
    size: conint(ge=1) = Field(..., title="Size")


class PagePayment(BaseModel):
    items: List[Payment] = Field(..., title="Items")
    total: conint(ge=0) = Field(..., title="Total")
    page: conint(ge=1) = Field(..., title="Page")
    size: conint(ge=1) = Field(..., title="Size")


class PageTransactionItemOut(BaseModel):
    items: List[TransactionItemOut] = Field(..., title="Items")
    total: conint(ge=0) = Field(..., title="Total")
    page: conint(ge=1) = Field(..., title="Page")
    size: conint(ge=1) = Field(..., title="Size")


class PatchConnectionItem(BaseModel):
    redirect: Optional[bool] = Field(
        False,
        description="Indicates whether you want to return to the consumer's redirectUrl after update (true) or whether you want to return on the connection page (false)",
        title="Redirect",
    )
    name: Optional[str] = Field(
        None,
        description="Can be used to update the name of an existing connection",
        title="Name",
    )
    credentials: Optional[List[AppRoutersConnectionsCredentialItem]] = Field(
        None,
        description="Can be used to update the credentials of an existing connection. Please use the getIntegrations route to see the available credentials for each integration",
        title="Credentials",
    )


class PaymentItem(BaseModel):
    id: Optional[str] = Field(None, title="Id")
    payment_method_id: Optional[str] = Field(None, title="Payment Method Id")
    payment_method_name: Optional[str] = Field(None, title="Payment Method Name")
    total: float = Field(..., title="Total")
    tip: Optional[float] = Field(0, title="Tip")
    status: Optional[AppRoutersPosPaymentStatus] = "Unknown"
    currency: Optional[str] = Field(None, title="Currency")
    date: Optional[datetime] = Field(None, title="Date")


class PostConnectionItem(BaseModel):
    integrationid: Optional[int] = Field(
        None,
        description="Can be used to specify the integration code of a specific connector. If specified, the url will will point directly to the connection page of the connector and will redirect on save to the redirect url of the consumer if specified.",
        title="Integrationid",
    )
    name: Optional[str] = Field(
        None,
        description="Can be used to specify the name of the connection. Must be used in combination with an integrationid.",
        title="Name",
    )
    credentials: Optional[List[AppRoutersConnectionsCredentialItem]] = Field(
        None,
        description="Can be used to specify the credentials of your connection. Must be used in combination with an integrationid and a name. Please use the getIntegrations route to see the available credentials for each integration",
        title="Credentials",
    )


class ProductItemOut(BaseModel):
    id: str = Field(..., description="Technical id in Chift", title="Id")
    source_ref: Ref = Field(
        ..., description="Technical id in the target software", title="Source Ref"
    )
    name: str = Field(..., description="Name", title="Name")
    unit_price: Optional[float] = Field(
        None, description="Unit price", title="Unit Price"
    )
    tax_id: Optional[str] = Field(
        None, description="Technical id of the tax in Chift", title="Tax Id"
    )
    code: Optional[str] = Field(None, description="Reference/code", title="Code")
    unit: Optional[str] = Field(
        None, description="Unit of measure matching target sofware name", title="Unit"
    )
    category: Optional[str] = Field(
        None, description="Category matching target sofware name", title="Category"
    )
    currency: Optional[str] = Field(
        None, description="Currency matching target sofware name", title="Currency"
    )
    description: Optional[str] = Field(
        None, description="Description", title="Description"
    )


class ProductVariantItem(BaseModel):
    id: str = Field(..., description="Technical id in Chift", title="Id")
    source_ref: Ref = Field(
        ..., description="Technical id in the target software", title="Source Ref"
    )
    parent_id: str = Field(
        ...,
        description="Technical id of the parent product in Chift",
        title="Parent Id",
    )
    name: str = Field(..., title="Name")
    description: Optional[str] = Field(None, title="Description")
    description_html: Optional[str] = Field(None, title="Description Html")
    categories: Optional[List[CategoryItem]] = Field([], title="Categories")
    created_on: Optional[datetime] = Field(None, title="Created On")
    sku: Optional[str] = Field(None, title="Sku")
    barcode: Optional[str] = Field(None, title="Barcode")
    available_quantity: Optional[float] = Field(0, title="Available Quantity")
    prices: Optional[List[ProductPriceItem]] = Field([], title="Prices")
    unit_of_measure: Optional[str] = Field(None, title="Unit Of Measure")
    weight: Optional[float] = Field(0, title="Weight")
    weight_unit: Optional[str] = Field(None, title="Weight Unit")
    status: Optional[ProductStatus] = None
    variant_attributes: Optional[List[VariantAttributeItem]] = Field(
        [],
        description="List of attributes that are specific to the variant of the product.",
        title="Variant Attributes",
    )
    variant_images: Optional[List[ImageItem]] = Field(
        [],
        description="List of images that are specific to the variant of the product.",
        title="Variant Images",
    )


class SalesItem(BaseModel):
    total: float = Field(..., title="Total")
    tax_amount: float = Field(..., title="Tax Amount")
    taxes: Optional[List[TotalTaxItem]] = Field(None, title="Taxes")


class SupplierItemIn(BaseModel):
    external_reference: Optional[str] = Field(None, title="External Reference")
    first_name: Optional[str] = Field(
        None,
        description="Only used when the supplier is an individual (is_company=false). Indicates the first name of the supplier.",
        title="First Name",
    )
    last_name: Optional[str] = Field(
        None,
        description="Only used when the supplier is an individual (is_company=false). Indicates the last name of the supplier.",
        title="Last Name",
    )
    name: str = Field(..., title="Name")
    function: Optional[str] = Field(
        None,
        description="Only used when the supplier is an individual (is_company=false). Indicates the function of the supplier.",
        title="Function",
    )
    is_company: Optional[bool] = Field(
        True,
        description="Indicates if the supplier is an individual or a company.",
        title="Is Company",
    )
    company_id: Optional[str] = Field(
        None,
        description="Only used when the supplier is an individual (is_company=false). Indicates the id of the company linked to the supplier.",
        title="Company Id",
    )
    phone: Optional[str] = Field(None, title="Phone")
    mobile: Optional[str] = Field(None, title="Mobile")
    email: Optional[str] = Field(None, title="Email")
    language: Optional[str] = Field(
        None, description="Format: ISO 639-1 codes.", title="Language"
    )
    internal_notes: Optional[str] = Field(None, title="Internal Notes")
    website: Optional[str] = Field(None, title="Website")
    vat: Optional[str] = Field(None, title="Vat")
    iban: Optional[str] = Field(
        None, description="IBAN Account number of the supplier.", title="Iban"
    )
    bank_account: Optional[str] = Field(
        None, description="Bank account number of the supplier.", title="Bank Account"
    )
    currency: Optional[str] = Field(
        None,
        description="Indicates the currency of the supplier (e.g. EUR).",
        title="Currency",
    )
    active: Optional[bool] = Field(True, title="Active")
    addresses: List[ModelsCommonAddressItemIn] = Field(..., title="Addresses")
    account_number: Optional[str] = Field(None, title="Account Number")


class SupplierItemOut(BaseModel):
    external_reference: Optional[str] = Field(None, title="External Reference")
    first_name: Optional[str] = Field(
        None,
        description="Only used when the supplier is an individual (is_company=false). Indicates the first name of the supplier.",
        title="First Name",
    )
    last_name: Optional[str] = Field(
        None,
        description="Only used when the supplier is an individual (is_company=false). Indicates the last name of the supplier.",
        title="Last Name",
    )
    name: Optional[str] = Field(None, title="Name")
    function: Optional[str] = Field(
        None,
        description="Only used when the supplier is an individual (is_company=false). Indicates the function of the supplier.",
        title="Function",
    )
    is_company: Optional[bool] = Field(
        True,
        description="Indicates if the supplier is an individual or a company.",
        title="Is Company",
    )
    company_id: Optional[str] = Field(
        None,
        description="Only used when the supplier is an individual (is_company=false). Indicates the id of the company linked to the supplier.",
        title="Company Id",
    )
    phone: Optional[str] = Field(None, title="Phone")
    mobile: Optional[str] = Field(None, title="Mobile")
    email: Optional[str] = Field(None, title="Email")
    language: Optional[str] = Field(
        None, description="Format: ISO 639-1 codes.", title="Language"
    )
    internal_notes: Optional[str] = Field(None, title="Internal Notes")
    website: Optional[str] = Field(None, title="Website")
    vat: Optional[str] = Field(None, title="Vat")
    iban: Optional[str] = Field(
        None, description="IBAN Account number of the supplier.", title="Iban"
    )
    bank_account: Optional[str] = Field(
        None, description="Bank account number of the supplier.", title="Bank Account"
    )
    currency: Optional[str] = Field(
        None,
        description="Indicates the currency of the supplier (e.g. EUR).",
        title="Currency",
    )
    active: Optional[bool] = Field(True, title="Active")
    addresses: Optional[List[ModelsCommonAddressItemOut]] = Field([], title="Addresses")
    account_number: Optional[str] = Field(None, title="Account Number")
    company_number: Optional[str] = Field(None, title="Company Number")
    id: Optional[str] = Field(None, title="Id")


class SupplierItemUpdate(BaseModel):
    external_reference: Optional[str] = Field(None, title="External Reference")
    first_name: Optional[str] = Field(
        None,
        description="Only used when the supplier is an individual (is_company=false). Indicates the first name of the supplier.",
        title="First Name",
    )
    last_name: Optional[str] = Field(
        None,
        description="Only used when the supplier is an individual (is_company=false). Indicates the last name of the supplier.",
        title="Last Name",
    )
    name: Optional[str] = Field(None, title="Name")
    function: Optional[str] = Field(
        None,
        description="Only used when the supplier is an individual (is_company=false). Indicates the function of the supplier.",
        title="Function",
    )
    is_company: Optional[bool] = Field(
        True,
        description="Indicates if the supplier is an individual or a company.",
        title="Is Company",
    )
    company_id: Optional[str] = Field(
        None,
        description="Only used when the supplier is an individual (is_company=false). Indicates the id of the company linked to the supplier.",
        title="Company Id",
    )
    phone: Optional[str] = Field(None, title="Phone")
    mobile: Optional[str] = Field(None, title="Mobile")
    email: Optional[str] = Field(None, title="Email")
    language: Optional[str] = Field(
        None, description="Format: ISO 639-1 codes.", title="Language"
    )
    internal_notes: Optional[str] = Field(None, title="Internal Notes")
    website: Optional[str] = Field(None, title="Website")
    vat: Optional[str] = Field(None, title="Vat")
    iban: Optional[str] = Field(
        None, description="IBAN Account number of the supplier.", title="Iban"
    )
    bank_account: Optional[str] = Field(
        None, description="Bank account number of the supplier.", title="Bank Account"
    )
    currency: Optional[str] = Field(
        None,
        description="Indicates the currency of the supplier (e.g. EUR).",
        title="Currency",
    )
    active: Optional[bool] = Field(True, title="Active")
    addresses: Optional[List[ModelsCommonAddressItemOut]] = Field([], title="Addresses")


class WebhookInstanceGetItem(BaseModel):
    webhookid: UUID = Field(..., title="Webhookid")
    accountid: UUID = Field(..., title="Accountid")
    createdby: Optional[UUID] = Field(None, title="Createdby")
    createdon: datetime = Field(..., title="Createdon")
    event: str = Field(..., title="Event")
    url: str = Field(..., title="Url")
    status: AppRoutersWebhooksStatus
    integrationid: Optional[int] = Field(None, title="Integrationid")


class WebhookInstancePatchItem(BaseModel):
    status: Optional[AppRoutersWebhooksStatus] = None
    url: Optional[constr(max_length=500)] = Field(None, title="Url")
    signingsecret: Optional[constr(max_length=100)] = Field(None, title="Signingsecret")


class AppRoutersAccountingVatCode(BaseModel):
    id: str = Field(..., title="Id")
    code: Optional[str] = Field(None, title="Code")
    label: str = Field(..., title="Label")
    scope: Optional[AppRoutersAccountingVatCodeScope] = "unknown"
    rate: float = Field(..., title="Rate")
    type: AppRoutersAccountingVatCodeType


class AppRoutersCommerceProductItem(BaseModel):
    id: str = Field(..., description="Technical id in Chift", title="Id")
    source_ref: Ref = Field(
        ..., description="Technical id in the target software", title="Source Ref"
    )
    name: str = Field(..., title="Name")
    description: Optional[str] = Field(None, title="Description")
    description_html: Optional[str] = Field(None, title="Description Html")
    categories: Optional[List[CategoryItem]] = Field([], title="Categories")
    created_on: Optional[datetime] = Field(None, title="Created On")
    variants: Optional[List[ProductVariantItem]] = Field([], title="Variants")
    status: Optional[ProductStatus] = None
    common_attributes: Optional[List[CommonAttributeItem]] = Field(
        [],
        description="List of attributes that are shared by all variants of the product.",
        title="Common Attributes",
    )
    variant_attributes_options: Optional[List[VariantAttributeOptionItem]] = Field(
        [], title="Variant Attributes Options"
    )
    common_images: Optional[List[ImageItem]] = Field(
        [],
        description="List of images that are shared by all variants of the product.",
        title="Common Images",
    )


class ModelsInvoicingVatCode(BaseModel):
    id: str = Field(..., description="Technical id in Chift", title="Id")
    source_ref: Ref = Field(
        ..., description="Technical id in the target software", title="Source Ref"
    )
    label: str = Field(..., description="Label", title="Label")
    rate: float = Field(..., description="Tax rate (e.g. 21.0)", title="Rate")
    type: ModelsInvoicingVatCodeType = Field(..., description="Type")
    code: Optional[str] = Field(None, description="Code", title="Code")
    scope: Optional[ModelsInvoicingVatCodeScope] = Field("unknown", description="Scope")


class FlowConfig(BaseModel):
    definitionFields: Optional[List[Dict[str, Any]]] = Field(
        None, title="Definitionfields"
    )
    doorkeyFields: Optional[List[Dict[str, Any]]] = Field(None, title="Doorkeyfields")
    customFields: Optional[List[Dict[str, Any]]] = Field(None, title="Customfields")
    datastores: Optional[List[FlowDataStoreItem]] = Field([], title="Datastores")


class InvoiceItemInMultiAnalyticPlans(BaseModel):
    invoice_type: AppRoutersAccountingInvoiceType
    invoice_number: Optional[str] = Field(
        None,
        description="Number of the invoice. If left empty, will be automatically generated by the accounting system at creation.",
        title="Invoice Number",
    )
    invoice_date: date = Field(..., title="Invoice Date")
    due_date: date = Field(..., title="Due Date")
    currency: str = Field(
        ...,
        description="Indicates the currency of the invoice (e.g. EUR).",
        title="Currency",
    )
    untaxed_amount: float = Field(..., title="Untaxed Amount")
    tax_amount: float = Field(..., title="Tax Amount")
    total: float = Field(..., title="Total")
    reference: Optional[str] = Field(None, title="Reference")
    payment_communication: Optional[str] = Field(None, title="Payment Communication")
    customer_memo: Optional[str] = Field(None, title="Customer Memo")
    partner_id: constr(min_length=1) = Field(..., title="Partner Id")
    journal_id: Optional[str] = Field(
        None,
        description="Indicates the journal used in for the invoice. If the journal is not given, the journal will be automatically set if only one journal exists otherwise an error will be thrown.",
        title="Journal Id",
    )
    status: Optional[InvoiceStatusIn] = "posted"
    pdf: Optional[str] = Field(
        None,
        description="Base 64 string representing the PDF attached to the sale/purchase entry.",
        title="Pdf",
    )
    currency_exchange_rate: Optional[float] = Field(
        1,
        description="Indicates the exchange rate at the date of the invoice. Must be filled in when creating the invoice in another currency from the default currency of the accounting system.",
        title="Currency Exchange Rate",
    )
    invoice_correction: Optional[InvoiceCorrection] = Field(
        None,
        description="Information used to add a correction line when roundings have an impact on the total amount of the invoice.",
        title="Invoice Correction",
    )
    lines: List[InvoiceLineItemInMultiAnalyticPlans] = Field(..., title="Lines")


class InvoiceItemOutMultiAnalyticPlans(BaseModel):
    invoice_type: AppRoutersAccountingInvoiceType
    invoice_number: Optional[str] = Field(
        None,
        description="Number of the invoice. If left empty, will be automatically generated by the accounting system at creation.",
        title="Invoice Number",
    )
    invoice_date: date = Field(..., title="Invoice Date")
    due_date: date = Field(..., title="Due Date")
    currency: str = Field(
        ...,
        description="Indicates the currency of the invoice (e.g. EUR).",
        title="Currency",
    )
    untaxed_amount: float = Field(..., title="Untaxed Amount")
    tax_amount: float = Field(..., title="Tax Amount")
    total: float = Field(..., title="Total")
    reference: Optional[str] = Field(None, title="Reference")
    payment_communication: Optional[str] = Field(None, title="Payment Communication")
    customer_memo: Optional[str] = Field(None, title="Customer Memo")
    id: Optional[str] = Field(None, title="Id")
    partner_id: str = Field(..., title="Partner Id")
    journal_id: str = Field(
        ...,
        description="Indicates the journal used in for the invoice. If the journal is not given, the journal will be automatically set if only one journal exists otherwise an error will be thrown.",
        title="Journal Id",
    )
    payments: Optional[List[Payment]] = Field(None, title="Payments")
    status: Optional[InvoiceStatusOut] = "posted"
    lines: List[InvoiceLineItemOutMultiAnalyticPlans] = Field(..., title="Lines")


class JournalEntryIn(BaseModel):
    reference: Optional[str] = Field(None, title="Reference")
    due_date: Optional[date] = Field(None, title="Due Date")
    journal_id: str = Field(..., title="Journal Id")
    name: str = Field(..., title="Name")
    date: date = Field(..., title="Date")
    items: List[JournalItemIn] = Field(..., title="Items")


class JournalEntryMultiAnalyticPlan(BaseModel):
    reference: Optional[str] = Field(None, title="Reference")
    due_date: Optional[date] = Field(None, title="Due Date")
    journal_id: str = Field(..., title="Journal Id")
    name: Optional[str] = Field(None, title="Name")
    journal_name: str = Field(..., title="Journal Name")
    date: Optional[date] = Field(None, title="Date")
    posted: Optional[bool] = Field(False, title="Posted")
    id: str = Field(..., title="Id")
    items: Optional[List[JournalItemMultiAnalyticPlan]] = Field([], title="Items")


class MiscellaneousOperationIn(BaseModel):
    operation_number: Optional[str] = Field(None, title="Operation Number")
    operation_date: date = Field(..., title="Operation Date")
    currency: str = Field(
        ...,
        description="Indicates the currency of the operation (e.g. EUR).",
        title="Currency",
    )
    currency_exchange_rate: Optional[float] = Field(
        1,
        description="Indicates the exchange rate at the date of the operation. Must be filled in when creating the operation in another currency from the default currency of the accounting system.",
        title="Currency Exchange Rate",
    )
    lines: List[MiscellaneousOperationLine] = Field(..., title="Lines")
    journal_id: Optional[str] = Field(
        None,
        description="Indicates the journal used in for the operation. If the journal is not given, the journal will be automatically set if only one journal exists otherwise an error will be thrown.",
        title="Journal Id",
    )
    status: Optional[MiscellaneousOperationStatusIn] = "posted"


class OrderItem(BaseModel):
    id: str = Field(..., title="Id")
    order_number: Optional[str] = Field(None, title="Order Number")
    creation_date: datetime = Field(..., title="Creation Date")
    closing_date: Optional[datetime] = Field(None, title="Closing Date")
    service_date: Optional[datetime] = Field(
        None,
        description="Indicates the date of the service to which the order belongs (can be used to group orders by closure date)",
        title="Service Date",
    )
    device_id: Optional[str] = Field(
        None, description="ID of device that created the order", title="Device Id"
    )
    total: float = Field(..., title="Total")
    tax_amount: float = Field(..., title="Tax Amount")
    total_discount: Optional[float] = Field(None, title="Total Discount")
    total_refund: Optional[float] = Field(None, title="Total Refund")
    total_tip: Optional[float] = Field(0, title="Total Tip")
    items: List[Item] = Field(..., title="Items")
    payments: List[PaymentItem] = Field(..., title="Payments")
    currency: Optional[str] = Field(None, title="Currency")
    country: Optional[str] = Field(None, title="Country")
    loyalty: Optional[int] = Field(None, title="Loyalty")
    customer_id: Optional[str] = Field(None, title="Customer Id")
    location_id: Optional[str] = Field(None, title="Location Id")
    taxes: Optional[List[TotalTaxItem]] = Field(None, title="Taxes")


class OrderItemOut(BaseModel):
    id: str = Field(..., description="Technical id in Chift", title="Id")
    source_ref: Ref = Field(
        ..., description="Technical id in the target software", title="Source Ref"
    )
    order_number: Optional[str] = Field(None, title="Order Number")
    customer: Optional[OrderCustomerItemOut] = None
    billing_address: Optional[AppRoutersCommerceAddressItemOut] = None
    shipping_address: Optional[AppRoutersCommerceAddressItemOut] = None
    created_on: Optional[datetime] = Field(None, title="Created On")
    last_updated_on: Optional[datetime] = Field(None, title="Last Updated On")
    confirmed_on: Optional[datetime] = Field(None, title="Confirmed On")
    cancelled_on: Optional[datetime] = Field(None, title="Cancelled On")
    status: OrderStatus
    discount_amount: float = Field(..., title="Discount Amount")
    untaxed_amount_without_fees: float = Field(
        ...,
        description="Untaxed amount without fees (e.g. shipping) but with discout. Refunds are not included.",
        title="Untaxed Amount Without Fees",
    )
    tax_amount_without_fees: float = Field(
        ...,
        description="Total taxes applied to the order without taxes linked to fees (e.g. shipping).",
        title="Tax Amount Without Fees",
    )
    total_without_fees: float = Field(
        ...,
        description="Total of the order without fees (e.g. shipping) but with discount. Refunds are not included.",
        title="Total Without Fees",
    )
    untaxed_amount: float = Field(
        ...,
        description="Untaxed amount with discout and any kind of fee (e.g. shipping). Refunds are not included.",
        title="Untaxed Amount",
    )
    tax_amount: float = Field(
        ..., description="Total taxes applied to the order.", title="Tax Amount"
    )
    total: float = Field(
        ...,
        description="Total of the order with discount. Refunds are not included.",
        title="Total",
    )
    refunded_amount: Optional[float] = Field(0, title="Refunded Amount")
    detailed_refunds: Optional[List[OrderRefundItem]] = Field(
        None, title="Detailed Refunds"
    )
    currency: str = Field(
        ...,
        description="Indicates the currency of the order (e.g. EUR).",
        title="Currency",
    )
    note: Optional[str] = Field(None, title="Note")
    lines: List[OrderLineItemOut] = Field(..., title="Lines")
    other_fees: Optional[List[FeesItem]] = Field([], title="Other Fees")


class PageInvoiceItemOutMultiAnalyticPlans(BaseModel):
    items: List[InvoiceItemOutMultiAnalyticPlans] = Field(..., title="Items")
    total: conint(ge=0) = Field(..., title="Total")
    page: conint(ge=1) = Field(..., title="Page")
    size: conint(ge=1) = Field(..., title="Size")


class PageJournalEntryMultiAnalyticPlan(BaseModel):
    items: List[JournalEntryMultiAnalyticPlan] = Field(..., title="Items")
    total: conint(ge=0) = Field(..., title="Total")
    page: conint(ge=1) = Field(..., title="Page")
    size: conint(ge=1) = Field(..., title="Size")


class PageOrderItemOut(BaseModel):
    items: List[OrderItemOut] = Field(..., title="Items")
    total: conint(ge=0) = Field(..., title="Total")
    page: conint(ge=1) = Field(..., title="Page")
    size: conint(ge=1) = Field(..., title="Size")


class PageOrderItem(BaseModel):
    items: List[OrderItem] = Field(..., title="Items")
    total: conint(ge=0) = Field(..., title="Total")
    page: conint(ge=1) = Field(..., title="Page")
    size: conint(ge=1) = Field(..., title="Size")


class PagePaymentItem(BaseModel):
    items: List[PaymentItem] = Field(..., title="Items")
    total: conint(ge=0) = Field(..., title="Total")
    page: conint(ge=1) = Field(..., title="Page")
    size: conint(ge=1) = Field(..., title="Size")


class PageProductItemOut(BaseModel):
    items: List[ProductItemOut] = Field(..., title="Items")
    total: conint(ge=0) = Field(..., title="Total")
    page: conint(ge=1) = Field(..., title="Page")
    size: conint(ge=1) = Field(..., title="Size")


class PageProductItem(BaseModel):
    items: List[AppRoutersCommerceProductItem] = Field(..., title="Items")
    total: conint(ge=0) = Field(..., title="Total")
    page: conint(ge=1) = Field(..., title="Page")
    size: conint(ge=1) = Field(..., title="Size")


class PageSupplierItemOut(BaseModel):
    items: List[SupplierItemOut] = Field(..., title="Items")
    total: conint(ge=0) = Field(..., title="Total")
    page: conint(ge=1) = Field(..., title="Page")
    size: conint(ge=1) = Field(..., title="Size")


class ReadFlowConsumerItem(BaseModel):
    name: str = Field(..., title="Name")
    description: Optional[str] = Field(None, title="Description")
    id: str = Field(..., title="Id")
    config: Optional[FlowConfig] = None
    values: Dict[str, Any] = Field(..., title="Values")


class ReadFlowItem(BaseModel):
    name: str = Field(..., title="Name")
    description: Optional[str] = Field(None, title="Description")
    id: str = Field(..., title="Id")
    execution: Optional[FlowExecution] = None
    config: Optional[FlowConfig] = Field(
        default_factory=lambda: FlowConfig.parse_obj({"datastores": []}), title="Config"
    )
    trigger: Optional[FlowTrigger] = None


class SyncConsumerItem(BaseModel):
    syncid: UUID = Field(..., title="Syncid")
    sync_name: str = Field(..., description="Name of the sync", title="Sync Name")
    status: Optional[SyncConsumerStatus] = Field(
        "inactive",
        description="Indicates whether the consumer has setup the sync. If the setup is complete, it will return 'active'. Otherwise 'inactive'.",
    )
    status_details: Optional[str] = Field(
        None,
        description="Gives additional information if the status is inactive",
        title="Status Details",
    )
    link_createdon: datetime = Field(
        ...,
        description="Date on which the consumer first navigated to the link to setup the sync",
        title="Link Createdon",
    )
    link_mappings: Optional[List[SyncMappingItem]] = Field(
        None,
        description="Values of the mappings requested for the sync for the specific consumer",
        title="Link Mappings",
    )
    link_metadata: Optional[Dict[str, Any]] = Field(
        None, description="Metadata passed during creation", title="Link Metadata"
    )
    enabled_flows: Optional[List[ReadFlowConsumerItem]] = Field(
        None,
        description="List of flows that the consumer has enabled",
        title="Enabled Flows",
    )


class SyncItem(BaseModel):
    syncid: UUID = Field(..., title="Syncid")
    name: constr(min_length=1) = Field(..., title="Name")
    consumers: List[str] = Field(..., title="Consumers")
    flows: List[ReadFlowItem] = Field(..., title="Flows")


class AppRoutersAccountingPageVatCode(BaseModel):
    items: List[AppRoutersAccountingVatCode] = Field(..., title="Items")
    total: conint(ge=0) = Field(..., title="Total")
    page: conint(ge=1) = Field(..., title="Page")
    size: conint(ge=1) = Field(..., title="Size")


class AppRoutersInvoicingPageVatCode(BaseModel):
    items: List[ModelsInvoicingVatCode] = Field(..., title="Items")
    total: conint(ge=0) = Field(..., title="Total")
    page: conint(ge=1) = Field(..., title="Page")
    size: conint(ge=1) = Field(..., title="Size")
