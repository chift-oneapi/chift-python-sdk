{
  "openapi": "3.0.2",
  "info": {
    "title": "Chift API",
    "description": "The Chift API is a universal API giving you access to financial data from the software of your clients. It helps software companies to offer native integrations to their clients without the effort needed to maintain those native integrations. By using the APIs (Accounting, POS, eCommerce) of Chift, you connect once and allow your clients to use their software packages.",
    "version": "1.0.0"
  },
  "servers": [{ "url": "https://api.chift.eu", "description": "Chift" }],
  "paths": {
    "/token": {
      "post": {
        "tags": ["General"],
        "summary": "Get access token",
        "description": "This endpoint allows you to get an access token that can be used as a BEARER token to access the protected endpoints of this APIs. The token is valid for 30 minutes. You can refresh the token by requesting a new token.",
        "operationId": "generate_access_token_token_post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AuthItem" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Token" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": []
      }
    },
    "/consumers": {
      "get": {
        "tags": ["Consumers"],
        "summary": "Get consumers",
        "description": "Returns the list of consumers linked to your account.",
        "operationId": "consumers_get_consumers",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": { "title": "Search", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Consumers Get Consumers",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ConsumerItem" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Consumers"],
        "summary": "Create new consumer",
        "description": "Create a new consumer that will have the possibility to use the enabled integrations",
        "operationId": "consumers_create_consumer",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PostConsumerItem" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConsumerItem" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The specified name is not valid",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The specified redirect url is not valid",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/consumers/{consumerid}": {
      "get": {
        "tags": ["Consumers"],
        "summary": "Get one consumer",
        "description": "Returns the specified consumer",
        "operationId": "consumers_get_consumer",
        "parameters": [
          {
            "name": "consumerid",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumerid",
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConsumerItem" }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The consumer does not exist",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Consumers"],
        "summary": "Update one consumer",
        "description": "Update one consumer in Chift",
        "operationId": "consumers_update_consumer",
        "parameters": [
          {
            "name": "consumerid",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumerid",
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateConsumerItem" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConsumerItem" }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The consumer does not exist",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The specified redirect url is not valid",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Unprocessable Entity"
          }
        }
      },
      "delete": {
        "tags": ["Consumers"],
        "summary": "Delete one consumer",
        "description": "Endpoint that deletes one consumer in Chift",
        "operationId": "consumers_delete_consumer",
        "parameters": [
          {
            "name": "consumerid",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumerid",
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The consumer does not exist",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumerid}/connections": {
      "get": {
        "tags": ["Connections"],
        "summary": "Get connections",
        "description": "Returns a list of the connections (active or inactive) linked to your consumer",
        "operationId": "connections_get_connections",
        "parameters": [
          {
            "name": "consumerid",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumerid",
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Connections Get Connections",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/backbone_api__app__routers__connections__ConnectionItem"
                  }
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The consumer does not exist",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Connections"],
        "summary": "Add new connection",
        "description": "Returns the url that can be used by your client to enable his integrations.",
        "operationId": "connections_create_connection",
        "parameters": [
          {
            "name": "consumerid",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumerid",
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/backbone_api__app__routers__connections__PostConnectionItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LinkItem" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "There is already an active connection for the integrationid {integrationid}. Only one can be created for each consumer for each integrationid.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The consumer does not exist",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumerid}/connections/{connectionid}": {
      "patch": {
        "tags": ["Connections"],
        "summary": "Update an existing connection",
        "description": "Returns the url that can be used by your client to update the connection",
        "operationId": "connections_update_connection",
        "parameters": [
          {
            "name": "consumerid",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumerid",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionid",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Connectionid",
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PatchConnectionItem" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LinkItem" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The specified connectionid is not valid",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The connection does not exist",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Connections"],
        "summary": "Delete one connection",
        "description": "Endpoint that deletes one connection of a consumer in Chift",
        "operationId": "connections_delete_connection",
        "parameters": [
          {
            "name": "consumerid",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumerid",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionid",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Connectionid",
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The specified connectionid is not valid",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The connection does not exist",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/integrations": {
      "get": {
        "tags": ["Integrations"],
        "summary": "Get list of integrations",
        "description": "Returns a list of integrations (active and inactive) available for your account",
        "operationId": "integrations_get_integrations",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/backbone_api__app__routers__integrations__Status"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Integrations Get Integrations",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/IntegrationItem" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/integrations/{integrationid}/{image_type}.json": {
      "get": {
        "tags": ["Integrations"],
        "summary": "Returns a logo/icon of an integration (as base64)",
        "operationId": "integrations_get_integration_logo_json",
        "parameters": [
          {
            "name": "integrationid",
            "in": "path",
            "required": true,
            "schema": { "title": "Integrationid", "type": "integer" }
          },
          {
            "name": "image_type",
            "in": "path",
            "required": true,
            "schema": { "$ref": "#/components/schemas/ImageType" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LogoImage" }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The {image_type} doesn't exist.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/webhooks/list": {
      "get": {
        "tags": ["Webhooks"],
        "summary": "Get list of possible webhooks",
        "description": "Returns a list of webhook that are available for your account",
        "operationId": "webhooks_get_webhook_types",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Webhooks Get Webhook Types",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/WebhookItem" }
                }
              }
            }
          }
        }
      }
    },
    "/webhooks": {
      "post": {
        "tags": ["Webhooks"],
        "summary": "Add new webhook instance",
        "description": "Returns the created webhook instance",
        "operationId": "webhooks_create_webhook",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookInstancePostItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookInstanceGetItem"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "There is already an existing webhook with the same url and type",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Webhooks"],
        "summary": "Get list of webhook instances",
        "description": "Returns a list of webhook instances (active/inactive) for your account",
        "operationId": "webhooks_get_webhooks",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/backbone_api__app__routers__webhooks__Status"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Webhooks Get Webhooks",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebhookInstanceGetItem"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/webhooks/{webhookid}": {
      "delete": {
        "tags": ["Webhooks"],
        "summary": "Delete one webhook",
        "description": "Endpoint that deletes one existing webhook",
        "operationId": "webhooks_delete_webhook",
        "parameters": [
          {
            "name": "webhookid",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Webhookid",
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The specified webhook could not be found for this account",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Webhooks"],
        "summary": "Get one webhook instance",
        "description": "Returns one webhook instance",
        "operationId": "webhooks_get_webhook",
        "parameters": [
          {
            "name": "webhookid",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Webhookid",
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookInstanceGetItem"
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The specified webhook could not be found for this account",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Webhooks"],
        "summary": "Update one webhook",
        "description": "Update one webhook in Chift",
        "operationId": "webhooks_update_webhook",
        "parameters": [
          {
            "name": "webhookid",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Webhookid",
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookInstancePatchItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookInstanceGetItem"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The specified url is not valid",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The specified webhook could not be found for this account",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/webhooks/{webhookid}/logs": {
      "get": {
        "tags": ["Webhooks"],
        "summary": "Get list of webhook logs for one webhook",
        "description": "Returns a list of webhook logs for one webhook for your account",
        "operationId": "webhooks_get_webhook_logs",
        "parameters": [
          {
            "name": "webhookid",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Webhookid",
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Webhooks Get Webhook Logs",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/WebhookLogItem" }
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The specified webhook could not be found for this account",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/syncs": {
      "get": {
        "tags": ["Syncs"],
        "summary": "Get syncs",
        "description": "Returns the syncs",
        "operationId": "syncs_get_syncs",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Syncs Get Syncs",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ReadSyncItem" }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Syncs"],
        "summary": "Create sync",
        "description": "Returns the created sync",
        "operationId": "syncs_post_sync",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateSyncItem" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ReadSyncItem" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Syncs"],
        "summary": "Update existing sync",
        "description": "Update existing sync & related flows and mappings",
        "operationId": "syncs_update_sync",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateSyncItem" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ReadSyncItem" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/syncs/{syncid}": {
      "get": {
        "tags": ["Syncs"],
        "summary": "Get sync",
        "description": "Returns a sync by id",
        "operationId": "syncs_get_sync",
        "parameters": [
          {
            "name": "syncid",
            "in": "path",
            "required": true,
            "schema": { "title": "Syncid", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ReadSyncItem" }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The sync does not exist",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/syncs/{syncid}/flows/{flowid}/event": {
      "post": {
        "tags": ["Syncs"],
        "summary": "Send a custom event for a specific flow",
        "description": "Route that can be used to send a specific event for a flow",
        "operationId": "syncs_send_custom_event",
        "parameters": [
          {
            "name": "syncid",
            "in": "path",
            "required": true,
            "schema": { "title": "Syncid", "type": "string" }
          },
          {
            "name": "flowid",
            "in": "path",
            "required": true,
            "schema": { "title": "Flowid", "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PostSyncFlowEvent" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TriggerResponse" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "You cannot force the execution for all consumers",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The chain does not exist",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while validating context data; the field {field.get('name')} does not seem to be of type {fieldtype}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/consumers/{consumerid}/syncs/{syncid}/flows/{flowid}/executions": {
      "get": {
        "tags": ["Consumers"],
        "summary": "Get executions information for one consumer/flow/sync",
        "description": "Returns executions information for one consumer/flow/sync",
        "operationId": "syncs_get_consumer_executions",
        "parameters": [
          {
            "name": "consumerid",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumerid",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "syncid",
            "in": "path",
            "required": true,
            "schema": { "title": "Syncid", "type": "string", "format": "uuid" }
          },
          {
            "name": "flowid",
            "in": "path",
            "required": true,
            "schema": { "title": "Flowid", "type": "string", "format": "uuid" }
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Date To",
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Date From",
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Syncs Get Consumer Executions",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ChainExecutionItem" }
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The flow does not exist",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/syncs/{syncid}/flows/{flowid}/executions/{executionid}": {
      "get": {
        "tags": ["Syncs"],
        "summary": "Get execution start/end timestamp",
        "description": "Get execution start/end timestamp",
        "operationId": "syncs_get_execution",
        "parameters": [
          {
            "name": "syncid",
            "in": "path",
            "required": true,
            "schema": { "title": "Syncid", "type": "string" }
          },
          {
            "name": "flowid",
            "in": "path",
            "required": true,
            "schema": { "title": "Flowid", "type": "string" }
          },
          {
            "name": "executionid",
            "in": "path",
            "required": true,
            "schema": { "title": "Executionid", "type": "string" }
          },
          {
            "name": "consumerid",
            "in": "query",
            "required": false,
            "schema": { "title": "Consumerid", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ChainExecutionItem" }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The execution does not exist",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumerid}/syncs": {
      "post": {
        "tags": ["Consumers"],
        "summary": "Retrieve the url of a sync for a specific consumer",
        "description": "This route can be used to retrieve the url that can be shared with your clients to allow them to connect as specified in a sync",
        "operationId": "syncs_create_synctoconsumer",
        "parameters": [
          {
            "name": "consumerid",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumerid",
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConsumerSyncItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LinkSyncItem" }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The flow does not exist",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "{integrationid} is not part of the selected integrations of the sync",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumerid}/syncs/{syncid}": {
      "get": {
        "tags": ["Consumers"],
        "summary": "Get sync information for one consumer",
        "description": "Returns sync information (creation date, mapping) related to a specific consumer",
        "operationId": "syncs_get_syncconsumer",
        "parameters": [
          {
            "name": "consumerid",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumerid",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "syncid",
            "in": "path",
            "required": true,
            "schema": { "title": "Syncid", "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SyncConsumerItem" }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The consumer is not configured for this sync",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Syncs"],
        "summary": "Update flow mappings for a specific consumer",
        "description": "Route that can be used to update the flow mappings for a specific consumer. It will replace the existing configuration with the provided one.",
        "operationId": "syncs_update_synctoconsumer",
        "parameters": [
          {
            "name": "syncid",
            "in": "path",
            "required": true,
            "schema": { "title": "Syncid", "type": "string", "format": "uuid" }
          },
          {
            "name": "consumerid",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumerid",
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "Body",
                "type": "array",
                "items": { "$ref": "#/components/schemas/ReadSyncMappingItem" }
              }
            }
          }
        },
        "responses": {
          "204": { "description": "Successful Response" },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The flow is not yet activated for this consumer",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The body should be a list",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/consumers/{consumerid}/syncs/{syncid}/flows/{flowid}/enable": {
      "post": {
        "tags": ["Syncs"],
        "summary": "Enable a flow for a specific consumer",
        "description": "Route that can be used to enable a flow for a specific consumer",
        "operationId": "syncs_enable_syncconsumer",
        "parameters": [
          {
            "name": "syncid",
            "in": "path",
            "required": true,
            "schema": { "title": "Syncid", "type": "string", "format": "uuid" }
          },
          {
            "name": "flowid",
            "in": "path",
            "required": true,
            "schema": { "title": "Flowid", "type": "string", "format": "uuid" }
          },
          {
            "name": "consumerid",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumerid",
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/EnableFlowConsumer" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The consumer does not exist",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Impossible to enable the flow as the flow requires configuration fields",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while validating context data; the field {field_name} does not seem to be of type {field_type}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/consumers/{consumerid}/syncs/{syncid}/flows/{flowid}": {
      "patch": {
        "tags": ["Syncs"],
        "summary": "Update flow settings for a specific consumer",
        "description": "Route that can be used to update the flow configuration for a specific consumer. It will merge the new configuration with the existing one.",
        "operationId": "syncs_update_flowtoconsumer",
        "parameters": [
          {
            "name": "syncid",
            "in": "path",
            "required": true,
            "schema": { "title": "Syncid", "type": "string", "format": "uuid" }
          },
          {
            "name": "flowid",
            "in": "path",
            "required": true,
            "schema": { "title": "Flowid", "type": "string", "format": "uuid" }
          },
          {
            "name": "consumerid",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumerid",
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateFlowConsumer" }
            }
          }
        },
        "responses": {
          "204": { "description": "Successful Response" },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The flow is not yet activated for this consumer",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while validating context data; the field {field_name} does not seem to be of type {field_type}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/datastores": {
      "get": {
        "tags": ["Datastores"],
        "summary": "Get list of datastores",
        "description": "Returns a list of datastores (active and inactive) available for your account",
        "operationId": "datastores_get_datastores",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/backbone_api__app__routers__datastores__Status"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Datastores Get Datastores",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/DataStoreItem" }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumerid}/datastore/{datastoreid}/data": {
      "get": {
        "tags": ["Consumers"],
        "summary": "Get execution data for a specific consumer and a specific datastore",
        "description": "Returns execution data related to a consumer and a datastore. Queryparams can be used to filter the restuls by datastore column or by executionid",
        "operationId": "datastores_get_consumer_and_datastoredata",
        "parameters": [
          {
            "name": "consumerid",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumerid",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "datastoreid",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Datastoreid",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Date To",
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Date From",
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "executionid",
            "in": "query",
            "required": false,
            "schema": { "title": "Executionid", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Datastores Get Consumer And Datastoredata",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/DataItemOut" }
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The datastore does not exist",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Consumers"],
        "summary": "Add data into a datastore for a consumer",
        "description": "Endpoint that can be used to add data into a datastore for a specific consumer",
        "operationId": "datastores_create_consumer_datastoredata",
        "parameters": [
          {
            "name": "consumerid",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumerid",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "datastoreid",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Datastoreid",
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "Datas",
                "type": "array",
                "items": { "$ref": "#/components/schemas/DataItem" }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Datastores Create Consumer Datastoredata",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/DataItemOut" }
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The datastore does not exist",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The input does not match the definition of the datastore",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/consumers/{consumerid}/datastore/{datastoreid}/data/{datastoredataid}": {
      "patch": {
        "tags": ["Consumers"],
        "summary": "Update execution data for a specific consumer and a specific datastore",
        "description": "Update and returns execution data related to a consumer and a datastore",
        "operationId": "datastores_update_consumer_datastoredata",
        "parameters": [
          {
            "name": "consumerid",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumerid",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "datastoreid",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Datastoreid",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "datastoredataid",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Datastoredataid",
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/DataItem" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DataItemOut" }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The datastoredata does not exist",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The input does not match the definition of the datastore",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Unprocessable Entity"
          }
        }
      },
      "delete": {
        "tags": ["Consumers"],
        "summary": "Delete execution data for a specific consumer and a specific datastore",
        "description": "Delete execution data related to a consumer and a datastore",
        "operationId": "datastores_delete_consumer_datastoredata",
        "parameters": [
          {
            "name": "consumerid",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumerid",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "datastoreid",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Datastoreid",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "datastoredataid",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Datastoredataid",
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The datastoredata does not exist",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/accounting/folders": {
      "get": {
        "tags": ["Accounting"],
        "summary": "Get Folders",
        "operationId": "accounting_get_folders",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Accounting Get Folders",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/FolderItem" }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/accounting/bookyears": {
      "get": {
        "tags": ["Accounting"],
        "summary": "Get Bookyears",
        "operationId": "accounting_get_bookyears",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ChiftPage_BookYear_" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/accounting/analytic-plans": {
      "get": {
        "tags": ["Accounting"],
        "summary": "Get Analytic Plans",
        "operationId": "accounting_get_analytic_plans",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_AnalyticPlanItem_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/accounting/clients": {
      "post": {
        "tags": ["Accounting"],
        "summary": "Create client",
        "description": "Create a new client",
        "operationId": "accounting_create_client",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          },
          {
            "name": "force_merge",
            "in": "query",
            "required": false,
            "schema": { "title": "Force Merge", "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ClientItemIn" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ClientItemOut" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "A client/supplier already exist with the same code/id in the accounting system.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Accounting"],
        "summary": "Get clients",
        "description": "Returns a list of accounting clients",
        "operationId": "accounting_get_clients",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": { "title": "Search", "type": "string" }
          },
          {
            "name": "updated_after",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Updated After",
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_ClientItemOut_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/accounting/clients/{client_id}": {
      "patch": {
        "tags": ["Accounting"],
        "summary": "Update client",
        "description": "Endpoint that gives the possibility to update an accounting client",
        "operationId": "accounting_update_client",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": { "title": "Client Id", "type": "string" }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ClientItemUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ClientItemOut" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The VAT number doesn't seem to be correct. Please remove dots and whitespaces. The expected format is the following: BE0784930037",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The client/supplier doesn't exist in the accounting system.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Accounting"],
        "summary": "Get one client",
        "description": "Returns a specific accounting client",
        "operationId": "accounting_get_client",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": { "title": "Client Id", "type": "string" }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ClientItemOut" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The client/supplier doesn't exist in the accounting system.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/accounting/suppliers": {
      "post": {
        "tags": ["Accounting"],
        "summary": "Create supplier",
        "description": "Create a new supplier",
        "operationId": "accounting_create_supplier",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          },
          {
            "name": "force_merge",
            "in": "query",
            "required": false,
            "schema": { "title": "Force Merge", "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SupplierItemIn" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SupplierItemOut" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "A client/supplier already exist with the same code/id in the accounting system.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Accounting"],
        "summary": "Get suppliers",
        "description": "Returns a list of accounting suppliers",
        "operationId": "accounting_get_suppliers",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": { "title": "Search", "type": "string" }
          },
          {
            "name": "updated_after",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Updated After",
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_SupplierItemOut_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/accounting/suppliers/{supplier_id}": {
      "get": {
        "tags": ["Accounting"],
        "summary": "Get one supplier",
        "description": "Returns one accounting supplier",
        "operationId": "accounting_get_supplier",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "supplier_id",
            "in": "path",
            "required": true,
            "schema": { "title": "Supplier Id", "type": "string" }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SupplierItemOut" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The client/supplier doesn't exist in the accounting system.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Accounting"],
        "summary": "Update one supplier",
        "description": "Update an accounting supplier",
        "operationId": "accounting_update_supplier",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "supplier_id",
            "in": "path",
            "required": true,
            "schema": { "title": "Supplier Id", "type": "string" }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SupplierItemUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SupplierItemOut" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The VAT number doesn't seem to be correct. Please remove dots and whitespaces. The expected format is the following: BE0784930037",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The client/supplier doesn't exist in the accounting system.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/accounting/invoices": {
      "post": {
        "tags": ["Accounting"],
        "summary": "Create sale/purchase entry",
        "description": "Create a new sale/purchase accounting entry",
        "operationId": "accounting_create_invoice",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          },
          {
            "name": "force_financial_period",
            "in": "query",
            "required": false,
            "schema": { "title": "Force Financial Period", "type": "string" }
          },
          {
            "name": "regroup_lines",
            "in": "query",
            "required": false,
            "schema": {
              "default": "true",
              "allOf": [{ "$ref": "#/components/schemas/BoolParam" }]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceItemInMonoAnalyticPlan"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceItemOutMonoAnalyticPlan"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The document is not a valid base64 string representing a PDF.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The currency 'x' doesn't exist in the accounting system.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/accounting/invoices/multi-analytic-plans": {
      "post": {
        "tags": ["Accounting"],
        "summary": "Create sale/purchase entry (Multiple plans)",
        "description": "Create a new sale/purchase entry with multiple analytic plans in the accounting",
        "operationId": "accounting_create_invoice_multiple_plans",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          },
          {
            "name": "force_financial_period",
            "in": "query",
            "required": false,
            "schema": { "title": "Force Financial Period", "type": "string" }
          },
          {
            "name": "regroup_lines",
            "in": "query",
            "required": false,
            "schema": {
              "default": "true",
              "allOf": [{ "$ref": "#/components/schemas/BoolParam" }]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceItemInMultiAnalyticPlans"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceItemOutMultiAnalyticPlans"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The document is not a valid base64 string representing a PDF.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The currency 'x' doesn't exist in the accounting system.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/accounting/invoices/type/{invoice_type}": {
      "get": {
        "tags": ["Accounting"],
        "summary": "Get invoices by type (sale/purchase entries)",
        "description": "Returns a list of invoices by a specific type (=sale/purchase entries). Each line of the invoice will include the analytic account linked to default analytic plan. Optionally dates can be defined to retrieve invoice from a certain date to another date",
        "operationId": "accounting_get_invoices_by_type",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "invoice_type",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/backbone_common__models__accounting__common__InvoiceType"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          },
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Date From",
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": { "title": "Date To", "type": "string", "format": "date" }
          },
          {
            "name": "journal_ids",
            "in": "query",
            "required": false,
            "schema": { "title": "Journal Ids", "type": "string" }
          },
          {
            "name": "include_payments",
            "in": "query",
            "required": false,
            "schema": {
              "default": "false",
              "allOf": [{ "$ref": "#/components/schemas/BoolParam" }]
            }
          },
          {
            "name": "payment_status",
            "in": "query",
            "required": false,
            "schema": {
              "default": "all",
              "allOf": [
                {
                  "$ref": "#/components/schemas/backbone_common__models__common__PaymentStatus"
                }
              ]
            }
          },
          {
            "name": "updated_after",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Updated After",
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_InvoiceItemOutMonoAnalyticPlan_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "You must provide an invoice type.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/accounting/invoices/multi-analytic-plans/type/{invoice_type}": {
      "get": {
        "tags": ["Accounting"],
        "summary": "Get invoices by type (sale/purchase entries - Multiple Analytic Plans)",
        "description": "Returns a list of invoices by a specific type (=sale/purchase entries) with invoice lines including multiple analytic plans. Optionally dates can be defined to retrieve invoice from a certain date to another date",
        "operationId": "accounting_get_invoices_by_type_multi_analytic_plans",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "invoice_type",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/backbone_common__models__accounting__common__InvoiceType"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          },
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Date From",
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": { "title": "Date To", "type": "string", "format": "date" }
          },
          {
            "name": "journal_ids",
            "in": "query",
            "required": false,
            "schema": { "title": "Journal Ids", "type": "string" }
          },
          {
            "name": "include_payments",
            "in": "query",
            "required": false,
            "schema": {
              "default": "false",
              "allOf": [{ "$ref": "#/components/schemas/BoolParam" }]
            }
          },
          {
            "name": "payment_status",
            "in": "query",
            "required": false,
            "schema": {
              "default": "all",
              "allOf": [
                {
                  "$ref": "#/components/schemas/backbone_common__models__common__PaymentStatus"
                }
              ]
            }
          },
          {
            "name": "updated_after",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Updated After",
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_InvoiceItemOutMultiAnalyticPlans_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "You must provide an invoice type.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/accounting/invoices/{invoice_id}": {
      "get": {
        "tags": ["Accounting"],
        "summary": "Get one invoice (sale/purchase entry)",
        "description": "Returns a specific invoice (sale/purchase entry). Each line will include the analytic account linked to default analytic plan",
        "operationId": "accounting_get_invoice",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "invoice_id",
            "in": "path",
            "required": true,
            "schema": { "title": "Invoice Id", "type": "string" }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          },
          {
            "name": "include_payments",
            "in": "query",
            "required": false,
            "schema": {
              "default": "false",
              "allOf": [{ "$ref": "#/components/schemas/BoolParam" }]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceItemOutMonoAnalyticPlan"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The ID of the invoice doesn't have the correct format.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The invoice doesn't exist in the accounting system.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/accounting/invoices/multi-analytic-plans/{invoice_id}": {
      "get": {
        "tags": ["Accounting"],
        "summary": "Get one invoice (sale/purchase entry - Multiple Analytic Plans)",
        "description": "Returns a specific invoice (=sale/purchase entry) with invoice lines /oincluding multiple analytic plans",
        "operationId": "accounting_get_invoice_multi_analytic_plans",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "invoice_id",
            "in": "path",
            "required": true,
            "schema": { "title": "Invoice Id", "type": "string" }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          },
          {
            "name": "include_payments",
            "in": "query",
            "required": false,
            "schema": {
              "default": "false",
              "allOf": [{ "$ref": "#/components/schemas/BoolParam" }]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceItemOutMultiAnalyticPlans"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The ID of the invoice doesn't have the correct format.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The invoice doesn't exist in the accounting system.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/accounting/analytic-accounts": {
      "post": {
        "tags": ["Accounting"],
        "summary": "Create analytic account",
        "description": "Create a new analytic account in the default analytic plan",
        "operationId": "accounting_create_analytic_account",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AnalyticAccountItemIn" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticAccountItemOut"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "An analytic account already exists with the same code in the accounting system.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Accounting"],
        "summary": "Get analytic accounts",
        "description": "Returns all analytic accounts of the default analytic plan",
        "operationId": "accounting_get_analytic_accounts",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_AnalyticAccountItemOut_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/accounting/analytic-accounts/multi-analytic-plans/{analytic_plan}": {
      "post": {
        "tags": ["Accounting"],
        "summary": "Create analytic account (Multiple Analytic Plans)",
        "description": "Create a new analytic account in a specific analytic plan",
        "operationId": "accounting_create_analytic_account_multi_plans",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "analytic_plan",
            "in": "path",
            "required": true,
            "schema": { "title": "Analytic Plan", "type": "string" }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AnalyticAccountItemIn" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticAccountItemOutMultiAnalyticPlans"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "An analytic account already exists with the same code in the accounting system.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/accounting/analytic-accounts/{analytic_account_id}": {
      "patch": {
        "tags": ["Accounting"],
        "summary": "Update analytic account",
        "description": "Update one specific analytic account in the default analytic plan",
        "operationId": "accounting_update_analytic_account",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "analytic_account_id",
            "in": "path",
            "required": true,
            "schema": { "title": "Analytic Account Id", "type": "string" }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnalyticAccountItemUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticAccountItemOut"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The analytic account doesn't exist in the accounting system.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Accounting"],
        "summary": "Get analytic account",
        "description": "Returns one specific analytic account of the default analytic plan",
        "operationId": "accounting_get_analytic_account",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "analytic_account_id",
            "in": "path",
            "required": true,
            "schema": { "title": "Analytic Account Id", "type": "string" }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticAccountItemOut"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The analytic account doesn't exist in the accounting system.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/accounting/analytic-accounts/{analytic_account_id}/multi-analytic-plans/{analytic_plan}": {
      "patch": {
        "tags": ["Accounting"],
        "summary": "Update analytic account (Multiple Analytic Plans)",
        "description": "Update one specific analytic account in a specific analytic plan",
        "operationId": "accounting_update_analytic_account_multi_plans",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "analytic_account_id",
            "in": "path",
            "required": true,
            "schema": { "title": "Analytic Account Id", "type": "string" }
          },
          {
            "name": "analytic_plan",
            "in": "path",
            "required": true,
            "schema": { "title": "Analytic Plan", "type": "string" }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnalyticAccountItemUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticAccountItemOutMultiAnalyticPlans"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The analytic account doesn't exist in the accounting system.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Accounting"],
        "summary": "Get analytic account (Multiple Analytic Plans)",
        "description": "Returns one specific analytic account of a specific analytic plan",
        "operationId": "accounting_get_analytic_account_multi_plans",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "analytic_account_id",
            "in": "path",
            "required": true,
            "schema": { "title": "Analytic Account Id", "type": "string" }
          },
          {
            "name": "analytic_plan",
            "in": "path",
            "required": true,
            "schema": { "title": "Analytic Plan", "type": "string" }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyticAccountItemOutMultiAnalyticPlans"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The analytic account doesn't exist in the accounting system.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/accounting/analytic-accounts/multi-analytic-plans": {
      "get": {
        "tags": ["Accounting"],
        "summary": "Get analytic accounts (Multiple Analytic Plans)",
        "description": "Returns all analytic accounts of all analytic plans",
        "operationId": "accounting_get_analytic_accounts_multi_plans",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_AnalyticAccountItemOutMultiAnalyticPlans_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/accounting/journal/entries": {
      "get": {
        "tags": ["Accounting"],
        "summary": "Get journal entries",
        "description": "Returns a list of journal entries. Each item will include the analytic account linked to default analytic plan. Optionally, you can retrieve journal entries linked to a specific client/supplier using the partner_id parameter. When retrieving entries linked to a specific client/supplier, some journal items of an entry (e.g. a miscellaneous operation) could be excluding resulting in an unbalanced journal entry.",
        "operationId": "accounting_get_journal_entries",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          },
          {
            "name": "unposted_allowed",
            "in": "query",
            "required": true,
            "schema": { "$ref": "#/components/schemas/BoolParam" }
          },
          {
            "name": "journal_id",
            "in": "query",
            "required": true,
            "schema": { "title": "Journal Id", "type": "string" }
          },
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Date From",
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": { "title": "Date To", "type": "string", "format": "date" }
          },
          {
            "name": "updated_after",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Updated After",
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "partner_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Partner Id", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_JournalEntryMonoAnalyticPlan_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "You can retrieve maximum 3 months of data at once. The difference between 'date_from' and 'date_to' is at maximum 3 months when 'updated_after' parameter is not provided.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Accounting"],
        "summary": "Create Journal Entry [Deprecated]",
        "description": "Create a new Journal Entry in the accounting system",
        "operationId": "accounting_create_journal_entry",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/JournalEntryIn" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JournalEntryMultiAnalyticPlan"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "A sale/purchase entry cannot be linked to multiple partner accounts.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Debit and credit cannot be both positive.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The currency doesn't exist or is not active in the accounting system.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          }
        }
      }
    },
    "/consumers/{consumer_id}/accounting/journal/entries/multi-analytic-plans": {
      "get": {
        "tags": ["Accounting"],
        "summary": "Get journal entries (Multiple Analytic Plans)",
        "description": "Returns a list of journal entries with invoice items including multiple analytic plan.Optionally, you can retrieve journal entries linked to a specific client/supplier using the partner_id parameter. When retrieving entries linked to a specific client/supplier, some journal items of an entry (e.g. a miscellaneous operation) could be excluding resulting in an unbalanced journal entry.",
        "operationId": "accounting_get_journal_entries_multi_plan",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          },
          {
            "name": "unposted_allowed",
            "in": "query",
            "required": true,
            "schema": { "$ref": "#/components/schemas/BoolParam" }
          },
          {
            "name": "journal_id",
            "in": "query",
            "required": true,
            "schema": { "title": "Journal Id", "type": "string" }
          },
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Date From",
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": { "title": "Date To", "type": "string", "format": "date" }
          },
          {
            "name": "updated_after",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Updated After",
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "partner_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Partner Id", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_JournalEntryMultiAnalyticPlan_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "You can retrieve maximum 3 months of data at once. The difference between 'date_from' and 'date_to' is at maximum 3 months when 'updated_after' parameter is not provided.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/accounting/journal/entries/{journal_entry_id}": {
      "get": {
        "tags": ["Accounting"],
        "summary": "Get one journal entry",
        "description": "Returns a single journal entry by ID.",
        "operationId": "accounting_get_journal_entry",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "journal_entry_id",
            "in": "path",
            "required": true,
            "schema": { "title": "Journal Entry Id", "type": "string" }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JournalEntryMultiAnalyticPlan"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The entry doesn't exist in the accounting system.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/accounting/journal-entries": {
      "post": {
        "tags": ["Accounting"],
        "summary": "Create Journal Entry",
        "description": "Create a new Journal Entry in the accounting system",
        "operationId": "accounting_create_generic_journal_entry",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          },
          {
            "name": "force_currency_exchange",
            "in": "query",
            "required": false,
            "schema": {
              "default": "false",
              "allOf": [{ "$ref": "#/components/schemas/BoolParam" }]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/GenericJournalEntry" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JournalEntryMultiAnalyticPlan"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The entry is not balanced.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The currency doesn't exist or is not active in the accounting system.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Debit and credit cannot be both positive.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/consumers/{consumer_id}/accounting/invoices/id/{invoice_id}/payments": {
      "get": {
        "tags": ["Accounting"],
        "summary": "Get payments by invoice ID",
        "description": "Get payments of a specific invoice based on its ID",
        "operationId": "accounting_get_payments_by_invoice",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "invoice_id",
            "in": "path",
            "required": true,
            "schema": { "title": "Invoice Id", "type": "string" }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ChiftPage_Payment_" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The ID of the invoice doesn't have the correct format.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The given invoice doesn't exist in the accounting system.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/accounting/journals": {
      "get": {
        "tags": ["Accounting"],
        "summary": "Get journals",
        "description": "Get journals existing in the accounting system",
        "operationId": "accounting_get_journals",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ChiftPage_Journal_" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/accounting/vat-codes": {
      "get": {
        "tags": ["Accounting"],
        "summary": "Get vat codes",
        "description": "Get vat codes existing in the accounting system",
        "operationId": "accounting_get_vat_codes",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_AccountingVatCode_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/accounting/miscellaneous-operation": {
      "post": {
        "tags": ["Accounting"],
        "summary": "Create miscellaneous operation",
        "description": "Create a new miscellaneous operation",
        "operationId": "accounting_create_miscellaneous_operation",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MiscellaneousOperationIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MiscellaneousOperationOut"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The account 'x' cannot be used for this type of line.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The currency 'x' doesn't exist in the accounting system.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Accounting"],
        "summary": "Get miscellaneous operations",
        "description": "Get miscellaneous operations from the the accounting system",
        "operationId": "accounting_get_miscellaneous_operations",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          },
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Date From",
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": { "title": "Date To", "type": "string", "format": "date" }
          },
          {
            "name": "journal_ids",
            "in": "query",
            "required": false,
            "schema": { "title": "Journal Ids", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_MiscellaneousOperationOut_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/accounting/miscellaneous-operation/{operation_id}": {
      "get": {
        "tags": ["Accounting"],
        "summary": "Get one miscellaneous operation",
        "description": "Get a specific miscellaneous operation from the the accounting system",
        "operationId": "accounting_get_miscellaneous_operation",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "operation_id",
            "in": "path",
            "required": true,
            "schema": { "title": "Operation Id", "type": "string" }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MiscellaneousOperationOut"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/accounting/matching": {
      "post": {
        "tags": ["Accounting"],
        "summary": "Match entries",
        "description": "Match existing entries in the accounting system",
        "operationId": "accounting_match_entries",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/MatchingIn" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MatchingOut" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Entry 'x' doesn't have the correct status.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Entry 'x' doesn't exist in the accounting system.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/accounting/matching-multiple": {
      "post": {
        "tags": ["Accounting"],
        "summary": "Match multiple entries",
        "description": "Match existing entries in the accounting system",
        "operationId": "accounting_match_entries_multiple",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/MultipleMatchingIn" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Accounting Match Entries Multiple",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MultipleMatchingOut"
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Entry 'x' doesn't have the correct status.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Entry 'x' doesn't exist in the accounting system.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/accounting/invoices/pdf/{invoice_id}": {
      "post": {
        "tags": ["Accounting"],
        "summary": "Attach a document (PDF)",
        "description": "Attach a document (PDF) to the invoice entry",
        "operationId": "accounting_add_attachment",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "invoice_id",
            "in": "path",
            "required": true,
            "schema": { "title": "Invoice Id", "type": "string" }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          },
          {
            "name": "overwrite_existing",
            "in": "query",
            "required": false,
            "schema": {
              "default": "false",
              "allOf": [{ "$ref": "#/components/schemas/BoolParam" }]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AttachmentItem" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "An attachment already exists for this invoice.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The invoice doesn't exist in the accounting system.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/accounting/attachments": {
      "get": {
        "tags": ["Accounting"],
        "summary": "Get attachments",
        "description": "Returns a list of all attachments linked to an accounting entry",
        "operationId": "accounting_get_attachments",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          },
          {
            "name": "type",
            "in": "query",
            "required": true,
            "schema": { "$ref": "#/components/schemas/DocumentType" }
          },
          {
            "name": "document_id",
            "in": "query",
            "required": true,
            "schema": { "title": "Document Id", "type": "string" }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_AttachmentItemOut_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/accounting/chart-of-accounts": {
      "get": {
        "tags": ["Accounting"],
        "summary": "Get chart of accounts",
        "description": "Get all accounts in the chart of accounts",
        "operationId": "accounting_get_chart_of_accounts",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          },
          {
            "name": "classes",
            "in": "query",
            "required": false,
            "schema": { "title": "Classes", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_AccountItem_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/accounting/chart-of-accounts/balance": {
      "post": {
        "tags": ["Accounting"],
        "summary": "Get the balance of accounts",
        "description": "Get the balance of accounts in the accounting plan (chart of accounts) between specific months",
        "operationId": "accounting_get_accounts_balances",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AccountBalanceFilter" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_AccountBalance_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/accounting/employees": {
      "get": {
        "tags": ["Accounting"],
        "summary": "Get employees",
        "description": "Returns a list of the employees linked to the company",
        "operationId": "accounting_get_employees",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_EmployeeItem_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/accounting/financial-entry": {
      "post": {
        "tags": ["Accounting"],
        "summary": "Create a financial entry [Deprecated]",
        "description": "Create a new financial entry (Bank or Cash operation)",
        "operationId": "accounting_create_financial_entry",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          },
          {
            "name": "financial_counterpart_account",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Financial Counterpart Account",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FinancialEntryItemInOld"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FinancialEntryItemOutOld"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The account 'x' cannot be used for this type of line.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The currency 'x' doesn't exist in the accounting system.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/accounting/financial-entries": {
      "post": {
        "tags": ["Accounting"],
        "summary": "Create a financial entry",
        "description": "Create a new financial entry (Bank or Cash operation)",
        "operationId": "accounting_create_financial_entries",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          },
          {
            "name": "financial_counterpart_account",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Financial Counterpart Account",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/FinancialEntryItemIn" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FinancialEntryItemOut"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The account 'x' cannot be used for this type of line.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The currency 'x' doesn't exist in the accounting system.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/accounting/outstandings": {
      "get": {
        "tags": ["Accounting"],
        "summary": "Get clients/suppliers outstanding items",
        "description": "Returns a list of all clients/suppliers outstanding items",
        "operationId": "accounting_get_outstandings",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "folder_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Folder Id", "type": "string" }
          },
          {
            "name": "type",
            "in": "query",
            "required": true,
            "schema": { "$ref": "#/components/schemas/OutstandingType" }
          },
          {
            "name": "unposted_allowed",
            "in": "query",
            "required": true,
            "schema": { "$ref": "#/components/schemas/BoolParam" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_OutstandingItem_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/pos/orders": {
      "get": {
        "tags": ["Point of Sale"],
        "summary": "Get orders",
        "description": "Returns a list of the orders",
        "operationId": "pos_get_orders",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "date_from",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Date From",
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "required": true,
            "schema": { "title": "Date To", "type": "string", "format": "date" }
          },
          {
            "name": "location_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Location Id", "type": "string" }
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "schema": {
              "default": "all",
              "allOf": [{ "$ref": "#/components/schemas/States" }]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_POSOrderItem_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "502": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to authenticate to {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Gateway"
          },
          "405": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Method Not Allowed"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/pos/orders/{order_id}": {
      "get": {
        "tags": ["Point of Sale"],
        "summary": "Get one order",
        "description": "Returns a single order",
        "operationId": "pos_get_order",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": { "title": "Order Id", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/POSOrderItem" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "502": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to authenticate to {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Gateway"
          },
          "405": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Method Not Allowed"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The order with id {OrderId} could not be found",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Point of Sale"],
        "summary": "Update order",
        "description": "Update one order",
        "operationId": "pos_update_pos_customer",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": { "title": "Order Id", "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateOrderItem" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/POSOrderItem" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "502": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to authenticate to {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Gateway"
          },
          "405": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Method Not Allowed"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/pos/locations": {
      "get": {
        "tags": ["Point of Sale"],
        "summary": "Get locations",
        "description": "Returns a list of the locations",
        "operationId": "pos_get_locations",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_POSLocationItem_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "502": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to authenticate to {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Gateway"
          },
          "405": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Method Not Allowed"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/pos/payments": {
      "get": {
        "tags": ["Point of Sale"],
        "summary": "Get payments",
        "description": "Returns a list of payments",
        "operationId": "pos_get_payments",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "date_from",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Date From",
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "required": true,
            "schema": { "title": "Date To", "type": "string", "format": "date" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_POSPaymentItem_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "502": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to authenticate to {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Gateway"
          },
          "405": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Method Not Allowed"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/pos/sales": {
      "get": {
        "tags": ["Point of Sale"],
        "summary": "Get sales",
        "description": "Returns the summary of the sales",
        "operationId": "pos_get_sales",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "date_from",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Date From",
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "required": true,
            "schema": { "title": "Date To", "type": "string", "format": "date" }
          },
          {
            "name": "location_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Location Id", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SalesItem" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "502": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to authenticate to {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Gateway"
          },
          "405": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Method Not Allowed"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/pos/payment-methods": {
      "get": {
        "tags": ["Point of Sale"],
        "summary": "Get payment methods",
        "description": "Returns the list of payment methods",
        "operationId": "pos_get_payments_methods",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "location_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Location Id", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_PaymentMethods_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "502": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to authenticate to {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Gateway"
          },
          "405": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Method Not Allowed"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/pos/customers": {
      "get": {
        "tags": ["Point of Sale", "customers"],
        "summary": "Get customers",
        "description": "Returns the list of customers",
        "operationId": "pos_get_customers",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": { "title": "Search", "type": "string" }
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "schema": { "title": "Email", "type": "string" }
          },
          {
            "name": "phone",
            "in": "query",
            "required": false,
            "schema": { "title": "Phone", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_POSCustomerItem_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "502": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to authenticate to {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Gateway"
          },
          "405": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Method Not Allowed"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Point of Sale"],
        "summary": "Create one customer",
        "description": "Create a customer",
        "operationId": "pos_create_pos_customer",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/POSCreateCustomerItem" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/POSCustomerItem" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "502": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to authenticate to {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Gateway"
          },
          "405": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Method Not Allowed"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/pos/customers/{customer_id}": {
      "get": {
        "tags": ["Point of Sale", "customers"],
        "summary": "Get one customer",
        "description": "Returns a specific customer",
        "operationId": "pos_get_customer",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": { "title": "Customer Id", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/POSCustomerItem" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "502": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to authenticate to {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Gateway"
          },
          "405": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Method Not Allowed"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The customer with id {CustomerId} could not be found",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/pos/product-categories": {
      "get": {
        "tags": ["Point of Sale"],
        "summary": "Get product categories",
        "description": "Returns a list of product categories",
        "operationId": "pos_get_product_categories",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "location_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Location Id", "type": "string" }
          },
          {
            "name": "only_parents",
            "in": "query",
            "required": false,
            "schema": {
              "default": "false",
              "allOf": [{ "$ref": "#/components/schemas/BoolParam" }]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_ProductCategoryItem_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "502": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to authenticate to {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Gateway"
          },
          "405": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Method Not Allowed"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/pos/products": {
      "get": {
        "tags": ["Point of Sale"],
        "summary": "Get products",
        "description": "Returns a list of products",
        "operationId": "pos_get_products",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "location_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Location Id", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_POSProductItem_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "502": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to authenticate to {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Gateway"
          },
          "405": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Method Not Allowed"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/pos/accounting-categories": {
      "get": {
        "tags": ["Point of Sale"],
        "summary": "Get accounting categories",
        "description": "Returns a list of accounting categories. When not available for a specific POS, it will return the same values as the product categories.",
        "operationId": "pos_get_accounting_categories",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "location_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Location Id", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_AccountingCategoryItem_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "502": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to authenticate to {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Gateway"
          },
          "405": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Method Not Allowed"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/pos/closures/{date}": {
      "get": {
        "tags": ["Point of Sale"],
        "summary": "Get closure info for a specific day",
        "description": "Returns whether the closure was already done for a specific day or not",
        "operationId": "pos_get_closure",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "date",
            "in": "path",
            "required": true,
            "schema": { "title": "Date", "type": "string", "format": "date" }
          },
          {
            "name": "location_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Location Id", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ClosureItem" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "502": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to authenticate to {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Gateway"
          },
          "405": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Method Not Allowed"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/commerce/customers": {
      "get": {
        "tags": ["eCommerce"],
        "summary": "Get all customers",
        "description": "Returns a list of all the customers",
        "operationId": "ecommerce_get_customers",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_CommerceCustomerItem_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/commerce/customers/{customer_id}": {
      "get": {
        "tags": ["eCommerce"],
        "summary": "Get one specific customer",
        "description": "Returns a specific customer",
        "operationId": "ecommerce_get_customer",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": { "title": "Customer Id", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceCustomerItem"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The customer doesn't exist.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/commerce/products": {
      "get": {
        "tags": ["eCommerce"],
        "summary": "Get all products",
        "description": "Returns a list of all the products",
        "operationId": "ecommerce_get_products",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_ProductItem_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/commerce/products/{product_id}": {
      "get": {
        "tags": ["eCommerce"],
        "summary": "Get one specific product",
        "description": "Returns a specific product",
        "operationId": "ecommerce_get_product",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "schema": { "title": "Product Id", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/backbone_common__models__commerce__common__ProductItem"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The product doesn't exist.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/commerce/variants/{variant_id}": {
      "get": {
        "tags": ["eCommerce"],
        "summary": "Get one specific product variant",
        "description": "Returns a specific product variant",
        "operationId": "ecommerce_get_variant",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "variant_id",
            "in": "path",
            "required": true,
            "schema": { "title": "Variant Id", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VariantItem" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The variant doesn't exist.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/commerce/variants/set_quantity/{variant_id}": {
      "post": {
        "tags": ["eCommerce"],
        "summary": "Update available quantity",
        "description": "Update available quantity of a product variant in a specific location",
        "operationId": "ecommerce_update_variant_quantity",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "variant_id",
            "in": "path",
            "required": true,
            "schema": { "title": "Variant Id", "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventoryDetailsUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryDetailsItem"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The location doesn't exist.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/commerce/locations": {
      "get": {
        "tags": ["eCommerce"],
        "summary": "Get all locations",
        "description": "Returns a list of all locations",
        "operationId": "ecommerce_get_locations",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_CommerceLocationItemOut_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/commerce/orders": {
      "get": {
        "tags": ["eCommerce"],
        "summary": "Get all orders",
        "description": "Returns a list of all the orders",
        "operationId": "ecommerce_get_orders",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Date From",
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": { "title": "Date To", "type": "string", "format": "date" }
          },
          {
            "name": "updated_after",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Updated After",
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "include_detailed_refunds",
            "in": "query",
            "required": false,
            "schema": {
              "default": "false",
              "allOf": [{ "$ref": "#/components/schemas/BoolParam" }]
            }
          },
          {
            "name": "include_product_categories",
            "in": "query",
            "required": false,
            "schema": {
              "default": "false",
              "allOf": [{ "$ref": "#/components/schemas/BoolParam" }]
            }
          },
          {
            "name": "include_customer_details",
            "in": "query",
            "required": false,
            "schema": {
              "default": "true",
              "allOf": [{ "$ref": "#/components/schemas/BoolParam" }]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_OrderItemOut_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The date format of the field 'Date To' is not valid. The expected format is the following: YYYY-MM-DD.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["eCommerce"],
        "summary": "Create an order",
        "description": "Create a new order",
        "operationId": "ecommerce_create_order",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/OrderItemIn" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/OrderItemOut" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The country format is not correct. Please use the ISO 3166-1 codes.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The phone number is already used by another client.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/consumers/{consumer_id}/commerce/orders/{order_id}": {
      "get": {
        "tags": ["eCommerce"],
        "summary": "Get one specific order",
        "description": "Returns a specific order",
        "operationId": "ecommerce_get_order",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": { "title": "Order Id", "type": "string" }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "include_product_categories",
            "in": "query",
            "required": false,
            "schema": {
              "default": "false",
              "allOf": [{ "$ref": "#/components/schemas/BoolParam" }]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/OrderItemOut" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The order doesn't exist.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/commerce/payment-methods": {
      "get": {
        "tags": ["eCommerce"],
        "summary": "Get all payment methods",
        "description": "Returns the list of the payment methods",
        "operationId": "ecommerce_get_payments_methods",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_PaymentMethodItem_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/commerce/product-categories": {
      "get": {
        "tags": ["eCommerce"],
        "summary": "Get all product categories",
        "description": "Returns the list of the product categories",
        "operationId": "ecommerce_get_product_categories",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "only_parents",
            "in": "query",
            "required": false,
            "schema": {
              "default": "false",
              "allOf": [{ "$ref": "#/components/schemas/BoolParam" }]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_CategoryItem_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/commerce/taxes": {
      "get": {
        "tags": ["eCommerce"],
        "summary": "Get all tax rates",
        "description": "Returns the list of all tax rates",
        "operationId": "ecommerce_get_taxes",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_TaxRateItem_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/commerce/countries": {
      "get": {
        "tags": ["eCommerce"],
        "summary": "Get all countries",
        "description": "Returns the list of all activated countries",
        "operationId": "ecommerce_get_countries",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_CountryItem_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/invoicing/invoices": {
      "get": {
        "tags": ["Invoicing"],
        "summary": "Retrieve all invoices",
        "description": "Returns a list of invoices. Optionally invoice type and dates can be defined to retrieve invoices of a certain type from a certain date to another date",
        "operationId": "invoicing_get_invoices",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Date From",
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": { "title": "Date To", "type": "string", "format": "date" }
          },
          {
            "name": "invoice_type",
            "in": "query",
            "required": false,
            "schema": {
              "default": "all",
              "allOf": [
                {
                  "$ref": "#/components/schemas/backbone_common__models__invoicing__common__InvoiceType"
                }
              ]
            }
          },
          {
            "name": "payment_status",
            "in": "query",
            "required": false,
            "schema": {
              "default": "all",
              "allOf": [
                {
                  "$ref": "#/components/schemas/backbone_common__models__common__PaymentStatus"
                }
              ]
            }
          },
          {
            "name": "updated_after",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Updated After",
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "include_invoice_lines",
            "in": "query",
            "required": false,
            "schema": {
              "default": "false",
              "allOf": [{ "$ref": "#/components/schemas/BoolParam" }]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_InvoiceItemOut_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "You must provide an invoice type.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Invoicing"],
        "summary": "Create an invoice",
        "description": "Create a new invoice.",
        "operationId": "invoicing_post_invoices",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/backbone_common__models__invoicing__common__InvoiceItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvoiceItemOut" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/invoicing/invoices/{invoice_id}": {
      "get": {
        "tags": ["Invoicing"],
        "summary": "Retrieve one invoice",
        "description": "Returns a invoice",
        "operationId": "invoicing_get_invoice",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "invoice_id",
            "in": "path",
            "required": true,
            "schema": { "title": "Invoice Id", "type": "string" }
          },
          {
            "name": "include_pdf",
            "in": "query",
            "required": false,
            "schema": {
              "default": "false",
              "allOf": [{ "$ref": "#/components/schemas/BoolParam" }]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceItemOutSingle"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The ID of the invoice doesn't have the correct format.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The invoice doesn't exist in the invoicing system.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/invoicing/taxes": {
      "get": {
        "tags": ["Invoicing"],
        "summary": "Retrieve all taxes",
        "description": "Returns a list of all the taxes",
        "operationId": "invoicing_get_taxes",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_InvoicingVatCode_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/invoicing/taxes/{tax_id}": {
      "get": {
        "tags": ["Invoicing"],
        "summary": "Retrieve one tax",
        "description": "Returns a tax",
        "operationId": "invoicing_get_tax",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "tax_id",
            "in": "path",
            "required": true,
            "schema": { "title": "Tax Id", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InvoicingVatCode" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The tax doesn't exist.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/invoicing/products": {
      "get": {
        "tags": ["Invoicing"],
        "summary": "Retrieve all products",
        "description": "Returns a list of all the products",
        "operationId": "invoicing_get_products",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_ProductItemOut_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Invoicing"],
        "summary": "Create a product",
        "description": "Create a new product.",
        "operationId": "invoicing_post_products",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/backbone_common__models__invoicing__common__ProductItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProductItemOut" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/invoicing/products/{product_id}": {
      "get": {
        "tags": ["Invoicing"],
        "summary": "Retrieve one product",
        "description": "Returns a product",
        "operationId": "invoicing_get_product",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "schema": { "title": "Product Id", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProductItemOut" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The product doesn't exist.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/invoicing/opportunities": {
      "get": {
        "tags": ["Invoicing"],
        "summary": "Retrieve all opportunities",
        "description": "Returns a list of all the opportunities",
        "operationId": "invoicing_get_opportunities",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_OpportunityItem_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/invoicing/opportunities/{opportunity_id}": {
      "get": {
        "tags": ["Invoicing"],
        "summary": "Retrieve one opportunity",
        "description": "Returns an opportunity",
        "operationId": "invoicing_get_opportunity",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "opportunity_id",
            "in": "path",
            "required": true,
            "schema": { "title": "Opportunity Id", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/OpportunityItem" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The opportunity doesn't exist.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/invoicing/contacts": {
      "get": {
        "tags": ["Invoicing"],
        "summary": "Retrieve all contacts",
        "description": "Returns a list of all the contacts. Optionally contact type can be defined to retrieve contact from a certain type.",
        "operationId": "invoicing_get_contacts",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "contact_type",
            "in": "query",
            "required": false,
            "schema": {
              "default": "all",
              "allOf": [{ "$ref": "#/components/schemas/ContactType" }]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_ContactItemOut_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Invoicing"],
        "summary": "Create a contact",
        "description": "Create a new contact.",
        "operationId": "invoicing_post_contacts",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ContactItemIn" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ContactItemOut" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/invoicing/contacts/{contact_id}": {
      "get": {
        "tags": ["Invoicing"],
        "summary": "Retrieve one contact",
        "description": "Returns a contact",
        "operationId": "invoicing_get_contact",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "contact_id",
            "in": "path",
            "required": true,
            "schema": { "title": "Contact Id", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ContactItemOut" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The contact doesn't exist.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/invoicing/payments": {
      "get": {
        "tags": ["Invoicing"],
        "summary": "Retrieve all payments",
        "description": "Returns a list of payments",
        "operationId": "invoicing_get_payments",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Date From",
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": { "title": "Date To", "type": "string", "format": "date" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_InvoicingPaymentItem_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/invoicing/payment-methods": {
      "get": {
        "tags": ["Invoicing"],
        "summary": "Retrieve all payment methods",
        "description": "Returns the list of payment methods",
        "operationId": "invoicing_get_payments_methods",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_InvoicingPaymentMethodItem_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/banking/financial-institutions": {
      "get": {
        "tags": ["Banking"],
        "summary": "Get list of financial institutions",
        "description": "Returns the list of financial institutions the user consent access to",
        "operationId": "banking_get_financial_institutions",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_BankingFinancialInstitutionItem_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/banking/accounts": {
      "get": {
        "tags": ["Banking"],
        "summary": "Get list of banking accounts",
        "description": "Returns the list of banking accounts",
        "operationId": "banking_get_accounts",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_BankingAccountItem_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/banking/{account_id}/transactions": {
      "get": {
        "tags": ["Banking"],
        "summary": "Get list of financial transactions",
        "description": "Returns the list of transactions of an account",
        "operationId": "banking_get_account_transactions",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": { "title": "Account Id", "type": "string" }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Date From",
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": { "title": "Date To", "type": "string", "format": "date" }
          },
          {
            "name": "date_type",
            "in": "query",
            "required": false,
            "schema": {
              "default": "value_date",
              "allOf": [
                { "$ref": "#/components/schemas/TransactionFilterDateType" }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_BankingTransactionItem_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/banking/counterparts": {
      "get": {
        "tags": ["Banking"],
        "summary": "Get aggregated list of account counterparts found in transactions",
        "description": "Returns the aggregated list of account counterpats found in transactions. Useful for categorisation.",
        "operationId": "banking_get_account_counterparts",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Account Id", "type": "string" }
          },
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Date From",
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": { "title": "Date To", "type": "string", "format": "date" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_BankingCounterPartItem_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/payment/balances": {
      "get": {
        "tags": ["Payment"],
        "summary": "Retrieve all Balances",
        "description": "Returns a list of balances.",
        "operationId": "payment_get_balances",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_BalanceItemOut_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/payment/transactions": {
      "get": {
        "tags": ["Payment"],
        "summary": "Retrieve all Transactions",
        "description": "Returns a list of transactions. Optionally transaction type and dates can be defined to retrieve transactions of a certain type from a certain date to another date",
        "operationId": "payment_get_transaction",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "accounting_category",
            "in": "query",
            "required": false,
            "schema": {
              "default": "all",
              "allOf": [
                { "$ref": "#/components/schemas/TransactionAccountingCategory" }
              ]
            }
          },
          {
            "name": "starting_from",
            "in": "query",
            "required": false,
            "schema": { "title": "Starting From", "type": "string" }
          },
          {
            "name": "balance_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Balance Id", "type": "string" }
          },
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Date From",
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": { "title": "Date To", "type": "string", "format": "date" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_TransactionItemOut_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "You must provide an transaction type.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/payment/payments": {
      "get": {
        "tags": ["Payment"],
        "summary": "Retrieve all Payments",
        "description": "Returns a list of payments.",
        "operationId": "payment_get_payments",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Date From",
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": { "title": "Date To", "type": "string", "format": "date" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_PaymentItemOut_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/payment/payments/{payment_id}": {
      "get": {
        "tags": ["Payment"],
        "summary": "Get a Payment",
        "description": "Returns a specific payment.",
        "operationId": "payment_get_payment",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payment_id",
            "in": "path",
            "required": true,
            "schema": { "title": "Payment Id", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PaymentItemOut" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The payment doesn't exist in the system.",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/payment/refunds": {
      "get": {
        "tags": ["Payment"],
        "summary": "Retrieve all Refunds",
        "description": "Returns a list of refunds.",
        "operationId": "payment_get_refunds",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "payment_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Payment Id", "type": "string" }
          },
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Date From",
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": { "title": "Date To", "type": "string", "format": "date" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_RefundItemOut_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/pms/orders": {
      "get": {
        "tags": ["Property Management System"],
        "summary": "Get orders (PMS)",
        "description": "Returns a list of the orders",
        "operationId": "pms_get_orders",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "date_from",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Date From",
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "required": true,
            "schema": { "title": "Date To", "type": "string", "format": "date" }
          },
          {
            "name": "location_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Location Id", "type": "string" }
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "schema": {
              "default": "consumed",
              "allOf": [{ "$ref": "#/components/schemas/PMSStates" }]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_PMSOrderItem_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "502": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to authenticate to {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Gateway"
          },
          "405": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Method Not Allowed"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/pms/invoices": {
      "get": {
        "tags": ["Property Management System"],
        "summary": "Get invoices (PMS)",
        "description": "Returns a list of the invoices",
        "operationId": "pms_get_invoices",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "date_from",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Date From",
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "required": true,
            "schema": { "title": "Date To", "type": "string", "format": "date" }
          },
          {
            "name": "location_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Location Id", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_PMSInvoiceFullItem_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "502": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to authenticate to {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Gateway"
          },
          "405": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Method Not Allowed"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/pms/customers": {
      "get": {
        "tags": ["Property Management System"],
        "summary": "Get customers (PMS)",
        "description": "Returns a list of all the customers",
        "operationId": "pms_get_customers",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_PMSCustomerItem_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "502": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to authenticate to {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Gateway"
          },
          "405": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Method Not Allowed"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/pms/customers/{customer_id}": {
      "get": {
        "tags": ["Property Management System", "customers"],
        "summary": "Get one customer (PMS)",
        "description": "Returns a specific customer",
        "operationId": "pms_get_customer",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": { "title": "Customer Id", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PMSCustomerItem" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "502": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to authenticate to {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Gateway"
          },
          "405": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Method Not Allowed"
          },
          "404": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The customer with id {CustomerId} could not be found",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/pms/locations": {
      "get": {
        "tags": ["Property Management System"],
        "summary": "Get locations (PMS)",
        "description": "Returns a list of the locations",
        "operationId": "pms_get_locations",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_PMSLocationItem_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "502": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to authenticate to {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Gateway"
          },
          "405": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Method Not Allowed"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/pms/payments": {
      "get": {
        "tags": ["Property Management System"],
        "summary": "Get payments (PMS)",
        "description": "Returns a list of payments",
        "operationId": "pms_get_payments",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "date_from",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Date From",
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "required": true,
            "schema": { "title": "Date To", "type": "string", "format": "date" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_PMSPaymentItem_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "502": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to authenticate to {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Gateway"
          },
          "405": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Method Not Allowed"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/pms/payment-methods": {
      "get": {
        "tags": ["Property Management System"],
        "summary": "Get payment methods (PMS)",
        "description": "Returns the list of payment methods",
        "operationId": "pms_get_payments_methods",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          },
          {
            "name": "location_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Location Id", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_PMSPaymentMethods_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "502": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to authenticate to {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Gateway"
          },
          "405": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Method Not Allowed"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/pms/accounting-categories": {
      "get": {
        "tags": ["Property Management System"],
        "summary": "Get accounting categories (PMS)",
        "description": "Returns a list of accounting categories. When not available for a specific PMS,it will return the same values as the product categories.",
        "operationId": "pms_get_accounting_categories",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Page",
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Size",
              "default": 50,
              "minimum": 1,
              "maximum": 100,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChiftPage_PMSAccountingCategoryItem_"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "502": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to authenticate to {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Gateway"
          },
          "405": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Method Not Allowed"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/consumers/{consumer_id}/pms/closures/{date}": {
      "get": {
        "tags": ["Property Management System"],
        "summary": "Get closure info for a specific day (PMS)",
        "description": "Returns whether the closure was already done for a specific day or not",
        "operationId": "pms_get_closure",
        "parameters": [
          {
            "name": "consumer_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Consumer Id",
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "date",
            "in": "path",
            "required": true,
            "schema": { "title": "Date", "type": "string", "format": "date" }
          },
          {
            "name": "location_id",
            "in": "query",
            "required": false,
            "schema": { "title": "Location Id", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PMSClosureItem" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to perform your request",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Request"
          },
          "502": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Error while trying to authenticate to {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Bad Gateway"
          },
          "405": {
            "content": {
              "application/json": {
                "example": {
                  "message": "The resource {Method} - {Resource} is not supported by {ConnectorName}",
                  "status": "error"
                },
                "schema": { "$ref": "#/components/schemas/ChiftError" }
              }
            },
            "description": "Method Not Allowed"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccountBalance": {
        "title": "AccountBalance",
        "required": [
          "account_number",
          "debit",
          "credit",
          "balance",
          "period_debit",
          "period_credit",
          "period_balance"
        ],
        "type": "object",
        "properties": {
          "account_number": {
            "title": "Account Number",
            "type": "string",
            "description": "Number of the account"
          },
          "account_name": {
            "title": "Account Name",
            "type": "string",
            "description": "Display name of the account"
          },
          "debit": {
            "title": "Debit",
            "type": "number",
            "description": "Debit at end date. When debit and credit are equal to 0 and balance is different from 0 then the debit and credit cannot be determined, only the balance can be calculated in those cases."
          },
          "credit": {
            "title": "Credit",
            "type": "number",
            "description": "Credit at end date. When debit and credit are equal to 0 and balance is different from 0 then the debit and credit cannot be determined, only the balance can be calculated in those cases."
          },
          "balance": { "title": "Balance", "type": "number" },
          "period_debit": {
            "title": "Period Debit",
            "type": "number",
            "description": "Debit at end date beginning from the given start date. When debit and credit are equal to 0 and balance is different from 0 then the debit and credit cannot be determined, only the balance can be calculated in those cases."
          },
          "period_credit": {
            "title": "Period Credit",
            "type": "number",
            "description": "Credit at end date beginning from the given start date. When debit and credit are equal to 0 and balance is different from 0 then the debit and credit cannot be determined, only the balance can be calculated in those cases."
          },
          "period_balance": { "title": "Period Balance", "type": "number" }
        }
      },
      "AccountBalanceFilter": {
        "title": "AccountBalanceFilter",
        "required": ["accounts", "end"],
        "type": "object",
        "properties": {
          "accounts": {
            "title": "Accounts",
            "type": "array",
            "items": { "type": "string" },
            "description": "Array/list containing the account numbers/classes to include in the response. E.g. [\"601\", \"7\"] to retrieve all account in the class 7 and accounts with an account number beginning with 601"
          },
          "start": {
            "title": "Start",
            "type": "string",
            "description": "Start month (included, e.g. 202302 for february 2023)"
          },
          "end": {
            "title": "End",
            "maxLength": 6,
            "minLength": 6,
            "type": "string",
            "description": "End month (included, e.g. 202312 for december 2023)"
          }
        }
      },
      "AccountItem": {
        "title": "AccountItem",
        "required": ["number", "name"],
        "type": "object",
        "properties": {
          "number": { "title": "Number", "type": "string" },
          "name": { "title": "Name", "type": "string" },
          "active": { "title": "Active", "type": "boolean", "default": true },
          "type": { "$ref": "#/components/schemas/AccountItemType" }
        }
      },
      "AccountItemType": {
        "title": "AccountItemType",
        "enum": [
          "bank",
          "cash",
          "other_financial",
          "receivable",
          "payable",
          "income",
          "expense",
          "vat",
          "other"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "AccountToCreate": {
        "title": "AccountToCreate",
        "required": ["account_number", "account_name"],
        "type": "object",
        "properties": {
          "account_number": {
            "title": "Account Number",
            "minLength": 1,
            "type": "string"
          },
          "account_name": {
            "title": "Account Name",
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "AccountingCategoryItem": {
        "title": "AccountingCategoryItem",
        "required": ["id", "name"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "string" },
          "name": { "title": "Name", "type": "string" },
          "code": {
            "title": "Code",
            "type": "string",
            "description": "Code assigned to the category"
          },
          "ledger_account_code": {
            "title": "Ledger Account Code",
            "type": "string",
            "description": "Ledger account code assigned to the category"
          },
          "posting_account_code": {
            "title": "Posting Account Code",
            "type": "string",
            "description": "Posting account code assigned to the category"
          }
        }
      },
      "AccountingVatCode": {
        "title": "AccountingVatCode",
        "required": ["id", "label", "rate", "type"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "string" },
          "code": { "title": "Code", "type": "string" },
          "label": { "title": "Label", "type": "string" },
          "scope": {
            "allOf": [
              {
                "$ref": "#/components/schemas/backbone_common__models__accounting__common__VatCodeScope"
              }
            ],
            "default": "unknown"
          },
          "rate": { "title": "Rate", "type": "number" },
          "type": {
            "$ref": "#/components/schemas/backbone_common__models__accounting__common__VatCodeType"
          },
          "deductible_account": {
            "title": "Deductible Account",
            "type": "string"
          },
          "payable_account": { "title": "Payable Account", "type": "string" }
        }
      },
      "AddressItem": {
        "title": "AddressItem",
        "type": "object",
        "properties": {
          "address_type": { "title": "Address Type", "type": "string" },
          "name": { "title": "Name", "type": "string" },
          "street": { "title": "Street", "type": "string" },
          "number": { "title": "Number", "type": "string" },
          "box": { "title": "Box", "type": "string" },
          "city": { "title": "City", "type": "string" },
          "postal_code": { "title": "Postal Code", "type": "string" },
          "country": { "title": "Country", "type": "string" }
        }
      },
      "AddressItemInInvoicing": {
        "title": "AddressItemInInvoicing",
        "required": [
          "address_type",
          "street",
          "city",
          "postal_code",
          "country"
        ],
        "type": "object",
        "properties": {
          "address_type": {
            "$ref": "#/components/schemas/AddressTypeInvoicing"
          },
          "name": { "title": "Name", "type": "string" },
          "number": { "title": "Number", "type": "string" },
          "box": { "title": "Box", "type": "string" },
          "phone": { "title": "Phone", "type": "string" },
          "mobile": { "title": "Mobile", "type": "string" },
          "email": { "title": "Email", "type": "string" },
          "street": { "title": "Street", "type": "string" },
          "city": { "title": "City", "type": "string" },
          "postal_code": { "title": "Postal Code", "type": "string" },
          "country": {
            "title": "Country",
            "type": "string",
            "description": "Format: ISO 3166-1 codes."
          }
        }
      },
      "AddressItemOutInvoicing": {
        "title": "AddressItemOutInvoicing",
        "required": ["address_type"],
        "type": "object",
        "properties": {
          "address_type": {
            "$ref": "#/components/schemas/AddressTypeInvoicing"
          },
          "name": { "title": "Name", "type": "string" },
          "number": { "title": "Number", "type": "string" },
          "box": { "title": "Box", "type": "string" },
          "phone": { "title": "Phone", "type": "string" },
          "mobile": { "title": "Mobile", "type": "string" },
          "email": { "title": "Email", "type": "string" },
          "street": { "title": "Street", "type": "string" },
          "city": { "title": "City", "type": "string" },
          "postal_code": { "title": "Postal Code", "type": "string" },
          "country": {
            "title": "Country",
            "type": "string",
            "description": "Format: ISO 3166-1 codes."
          }
        }
      },
      "AddressType": {
        "title": "AddressType",
        "enum": ["main", "delivery", "invoice"],
        "type": "string",
        "description": "An enumeration."
      },
      "AddressTypeInvoicing": {
        "title": "AddressTypeInvoicing",
        "enum": ["main", "delivery", "invoice", "other"],
        "type": "string",
        "description": "An enumeration."
      },
      "AnalyticAccountItemIn": {
        "title": "AnalyticAccountItemIn",
        "required": ["code", "name", "currency"],
        "type": "object",
        "properties": {
          "active": { "title": "Active", "type": "boolean", "default": true },
          "code": { "title": "Code", "type": "string" },
          "name": { "title": "Name", "type": "string" },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "Indicates the currency of the analytic account (e.g. EUR)."
          }
        }
      },
      "AnalyticAccountItemOut": {
        "title": "AnalyticAccountItemOut",
        "required": ["id", "active", "name"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "string" },
          "active": { "title": "Active", "type": "boolean" },
          "code": { "title": "Code", "type": "string" },
          "name": { "title": "Name", "type": "string" },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "Indicates the currency of the analytic account (e.g. EUR)."
          },
          "balance": { "title": "Balance", "type": "number", "default": 0 },
          "credit": { "title": "Credit", "type": "number", "default": 0 },
          "debit": { "title": "Debit", "type": "number", "default": 0 }
        }
      },
      "AnalyticAccountItemOutMultiAnalyticPlans": {
        "title": "AnalyticAccountItemOutMultiAnalyticPlans",
        "required": ["id", "active", "name", "analytic_plan"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "string" },
          "active": { "title": "Active", "type": "boolean" },
          "code": { "title": "Code", "type": "string" },
          "name": { "title": "Name", "type": "string" },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "Indicates the currency of the analytic account (e.g. EUR)."
          },
          "balance": { "title": "Balance", "type": "number", "default": 0 },
          "credit": { "title": "Credit", "type": "number", "default": 0 },
          "debit": { "title": "Debit", "type": "number", "default": 0 },
          "analytic_plan": { "title": "Analytic Plan", "type": "string" }
        }
      },
      "AnalyticAccountItemUpdate": {
        "title": "AnalyticAccountItemUpdate",
        "type": "object",
        "properties": {
          "active": { "title": "Active", "type": "boolean", "default": true },
          "code": { "title": "Code", "type": "string" },
          "name": { "title": "Name", "type": "string" },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "Indicates the currency of the analytic account (e.g. EUR)."
          }
        }
      },
      "AnalyticDistribution": {
        "title": "AnalyticDistribution",
        "required": ["analytic_plan", "analytic_accounts"],
        "type": "object",
        "properties": {
          "analytic_plan": { "title": "Analytic Plan", "type": "string" },
          "analytic_accounts": {
            "title": "Analytic Accounts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnalyticDistributionDetail"
            }
          }
        }
      },
      "AnalyticDistributionDetail": {
        "title": "AnalyticDistributionDetail",
        "required": ["analytic_account", "percentage"],
        "type": "object",
        "properties": {
          "analytic_account": { "title": "Analytic Account", "type": "string" },
          "percentage": {
            "title": "Percentage",
            "type": "number",
            "description": "Indicates the percentage of the untaxed amount to attribute to the given analytic account (Only percentages without decimals are allowed)."
          }
        }
      },
      "AnalyticPlanItem": {
        "title": "AnalyticPlanItem",
        "required": ["id", "name"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "string" },
          "name": { "title": "Name", "type": "string" },
          "active": { "title": "Active", "type": "boolean", "default": true }
        }
      },
      "Api": {
        "title": "Api",
        "enum": [
          "Point of Sale",
          "eCommerce",
          "Accounting",
          "Invoicing",
          "Communication",
          "Banking",
          "Custom",
          "Payment",
          "Property Management System"
        ],
        "description": "An enumeration."
      },
      "AttachmentItem": {
        "title": "AttachmentItem",
        "required": ["base64_string"],
        "type": "object",
        "properties": {
          "base64_string": { "title": "Base64 String", "type": "string" }
        }
      },
      "AttachmentItemOut": {
        "title": "AttachmentItemOut",
        "required": ["id", "base64_string"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "string" },
          "base64_string": { "title": "Base64 String", "type": "string" }
        }
      },
      "AuthItem": {
        "title": "AuthItem",
        "required": ["clientId", "clientSecret", "accountId"],
        "type": "object",
        "properties": {
          "clientId": { "title": "Clientid", "type": "string" },
          "clientSecret": { "title": "Clientsecret", "type": "string" },
          "accountId": {
            "title": "Accountid",
            "type": "string",
            "format": "uuid"
          },
          "marketplaceId": {
            "title": "Marketplaceid",
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "BalanceItemOut": {
        "title": "BalanceItemOut",
        "required": [
          "id",
          "source_ref",
          "available_amount",
          "currency",
          "create_date"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id in Chift"
          },
          "source_ref": {
            "title": "Source Ref",
            "allOf": [{ "$ref": "#/components/schemas/Ref" }],
            "description": "Technical id in the target software"
          },
          "available_amount": {
            "title": "Available Amount",
            "type": "number",
            "description": "Total amount available"
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "Currency"
          },
          "create_date": {
            "title": "Create Date",
            "type": "string",
            "description": "Create Date",
            "format": "date-time"
          }
        }
      },
      "BankingAccountItem": {
        "title": "BankingAccountItem",
        "required": [
          "id",
          "currency",
          "current_balance",
          "available_balance",
          "description",
          "reference",
          "reference_type"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "string" },
          "currency": { "title": "Currency", "type": "string" },
          "current_balance": { "title": "Current Balance", "type": "number" },
          "current_balance_last_update_date": {
            "title": "Current Balance Last Update Date",
            "type": "string",
            "format": "date-time"
          },
          "available_balance": {
            "title": "Available Balance",
            "type": "number"
          },
          "available_balance_last_update_date": {
            "title": "Available Balance Last Update Date",
            "type": "string",
            "format": "date-time"
          },
          "description": { "title": "Description", "type": "string" },
          "reference": { "title": "Reference", "type": "string" },
          "reference_type": { "title": "Reference Type", "type": "string" },
          "holder_name": { "title": "Holder Name", "type": "string" }
        }
      },
      "BankingCounterPartItem": {
        "title": "BankingCounterPartItem",
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "reference": { "title": "Reference", "type": "string" },
          "details": { "title": "Details", "type": "string" }
        }
      },
      "BankingFinancialInstitutionItem": {
        "title": "BankingFinancialInstitutionItem",
        "required": ["id", "name"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "string" },
          "bic": { "title": "Bic", "type": "string" },
          "country": { "title": "Country", "type": "string" },
          "name": { "title": "Name", "type": "string" }
        }
      },
      "BankingTransactionItem": {
        "title": "BankingTransactionItem",
        "required": [
          "id",
          "amount",
          "currency",
          "creation_date",
          "value_date",
          "execution_date"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "string" },
          "amount": { "title": "Amount", "type": "number" },
          "currency": { "title": "Currency", "type": "string" },
          "description": { "title": "Description", "type": "string" },
          "additional_information": {
            "title": "Additional Information",
            "type": "string"
          },
          "counterpart_name": { "title": "Counterpart Name", "type": "string" },
          "counterpart_reference": {
            "title": "Counterpart Reference",
            "type": "string"
          },
          "remittance_information": {
            "title": "Remittance Information",
            "type": "string"
          },
          "creation_date": {
            "title": "Creation Date",
            "type": "string",
            "format": "date-time"
          },
          "value_date": {
            "title": "Value Date",
            "type": "string",
            "format": "date-time"
          },
          "execution_date": {
            "title": "Execution Date",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "BookYear": {
        "title": "BookYear",
        "required": ["name", "start", "end", "closed"],
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "start": { "title": "Start", "type": "string", "format": "date" },
          "end": { "title": "End", "type": "string", "format": "date" },
          "closed": { "title": "Closed", "type": "boolean" }
        }
      },
      "BoolParam": {
        "title": "BoolParam",
        "enum": ["true", "false"],
        "type": "string",
        "description": "An enumeration."
      },
      "CategoryItem": {
        "title": "CategoryItem",
        "required": ["id", "source_ref", "name"],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id in Chift"
          },
          "source_ref": {
            "title": "Source Ref",
            "allOf": [{ "$ref": "#/components/schemas/Ref" }],
            "description": "Technical id in the target software"
          },
          "name": { "title": "Name", "type": "string" },
          "parent_id": {
            "title": "Parent Id",
            "type": "string",
            "description": "Technical id of the parent category in the target software"
          }
        }
      },
      "ChainExecutionItem": {
        "title": "ChainExecutionItem",
        "required": ["id", "start", "status"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "string" },
          "start": {
            "title": "Start",
            "type": "string",
            "format": "date-time"
          },
          "end": { "title": "End", "type": "string", "format": "date-time" },
          "status": { "title": "Status", "type": "string" }
        }
      },
      "ChiftError": {
        "title": "ChiftError",
        "required": ["message"],
        "type": "object",
        "properties": {
          "message": { "title": "Message", "type": "string" },
          "status": { "title": "Status", "type": "string", "default": "error" },
          "detail": { "title": "Detail", "type": "string", "default": "" }
        }
      },
      "ChiftId": {
        "title": "ChiftId",
        "required": ["id", "source_ref"],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id in Chift"
          },
          "source_ref": {
            "title": "Source Ref",
            "allOf": [{ "$ref": "#/components/schemas/Ref" }],
            "description": "Technical id in the target software"
          }
        }
      },
      "ChiftPage_AccountBalance_": {
        "title": "ChiftPage[AccountBalance]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/AccountBalance" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_AccountItem_": {
        "title": "ChiftPage[AccountItem]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/AccountItem" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_AccountingCategoryItem_": {
        "title": "ChiftPage[AccountingCategoryItem]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/AccountingCategoryItem" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_AccountingVatCode_": {
        "title": "ChiftPage[AccountingVatCode]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/AccountingVatCode" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_AnalyticAccountItemOutMultiAnalyticPlans_": {
        "title": "ChiftPage[AnalyticAccountItemOutMultiAnalyticPlans]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnalyticAccountItemOutMultiAnalyticPlans"
            }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_AnalyticAccountItemOut_": {
        "title": "ChiftPage[AnalyticAccountItemOut]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/AnalyticAccountItemOut" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_AnalyticPlanItem_": {
        "title": "ChiftPage[AnalyticPlanItem]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/AnalyticPlanItem" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_AttachmentItemOut_": {
        "title": "ChiftPage[AttachmentItemOut]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/AttachmentItemOut" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_BalanceItemOut_": {
        "title": "ChiftPage[BalanceItemOut]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/BalanceItemOut" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_BankingAccountItem_": {
        "title": "ChiftPage[BankingAccountItem]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/BankingAccountItem" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_BankingCounterPartItem_": {
        "title": "ChiftPage[BankingCounterPartItem]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/BankingCounterPartItem" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_BankingFinancialInstitutionItem_": {
        "title": "ChiftPage[BankingFinancialInstitutionItem]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BankingFinancialInstitutionItem"
            }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_BankingTransactionItem_": {
        "title": "ChiftPage[BankingTransactionItem]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/BankingTransactionItem" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_BookYear_": {
        "title": "ChiftPage[BookYear]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/BookYear" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_CategoryItem_": {
        "title": "ChiftPage[CategoryItem]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/CategoryItem" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_ClientItemOut_": {
        "title": "ChiftPage[ClientItemOut]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/ClientItemOut" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_CommerceCustomerItem_": {
        "title": "ChiftPage[CommerceCustomerItem]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/CommerceCustomerItem" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_CommerceLocationItemOut_": {
        "title": "ChiftPage[CommerceLocationItemOut]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/CommerceLocationItemOut" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_ContactItemOut_": {
        "title": "ChiftPage[ContactItemOut]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/ContactItemOut" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_CountryItem_": {
        "title": "ChiftPage[CountryItem]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/CountryItem" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_EmployeeItem_": {
        "title": "ChiftPage[EmployeeItem]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/EmployeeItem" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_InvoiceItemOutMonoAnalyticPlan_": {
        "title": "ChiftPage[InvoiceItemOutMonoAnalyticPlan]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceItemOutMonoAnalyticPlan"
            }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_InvoiceItemOutMultiAnalyticPlans_": {
        "title": "ChiftPage[InvoiceItemOutMultiAnalyticPlans]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceItemOutMultiAnalyticPlans"
            }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_InvoiceItemOut_": {
        "title": "ChiftPage[InvoiceItemOut]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/InvoiceItemOut" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_InvoicingPaymentItem_": {
        "title": "ChiftPage[InvoicingPaymentItem]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/InvoicingPaymentItem" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_InvoicingPaymentMethodItem_": {
        "title": "ChiftPage[InvoicingPaymentMethodItem]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoicingPaymentMethodItem"
            }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_InvoicingVatCode_": {
        "title": "ChiftPage[InvoicingVatCode]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/InvoicingVatCode" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_JournalEntryMonoAnalyticPlan_": {
        "title": "ChiftPage[JournalEntryMonoAnalyticPlan]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JournalEntryMonoAnalyticPlan"
            }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_JournalEntryMultiAnalyticPlan_": {
        "title": "ChiftPage[JournalEntryMultiAnalyticPlan]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JournalEntryMultiAnalyticPlan"
            }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_Journal_": {
        "title": "ChiftPage[Journal]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/Journal" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_MiscellaneousOperationOut_": {
        "title": "ChiftPage[MiscellaneousOperationOut]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MiscellaneousOperationOut"
            }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_OpportunityItem_": {
        "title": "ChiftPage[OpportunityItem]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/OpportunityItem" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_OrderItemOut_": {
        "title": "ChiftPage[OrderItemOut]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/OrderItemOut" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_OutstandingItem_": {
        "title": "ChiftPage[OutstandingItem]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/OutstandingItem" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_PMSAccountingCategoryItem_": {
        "title": "ChiftPage[PMSAccountingCategoryItem]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PMSAccountingCategoryItem"
            }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_PMSCustomerItem_": {
        "title": "ChiftPage[PMSCustomerItem]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/PMSCustomerItem" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_PMSInvoiceFullItem_": {
        "title": "ChiftPage[PMSInvoiceFullItem]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/PMSInvoiceFullItem" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_PMSLocationItem_": {
        "title": "ChiftPage[PMSLocationItem]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/PMSLocationItem" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_PMSOrderItem_": {
        "title": "ChiftPage[PMSOrderItem]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/PMSOrderItem" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_PMSPaymentItem_": {
        "title": "ChiftPage[PMSPaymentItem]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/PMSPaymentItem" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_PMSPaymentMethods_": {
        "title": "ChiftPage[PMSPaymentMethods]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/PMSPaymentMethods" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_POSCustomerItem_": {
        "title": "ChiftPage[POSCustomerItem]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/POSCustomerItem" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_POSLocationItem_": {
        "title": "ChiftPage[POSLocationItem]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/POSLocationItem" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_POSOrderItem_": {
        "title": "ChiftPage[POSOrderItem]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/POSOrderItem" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_POSPaymentItem_": {
        "title": "ChiftPage[POSPaymentItem]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/POSPaymentItem" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_POSProductItem_": {
        "title": "ChiftPage[POSProductItem]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/POSProductItem" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_PaymentItemOut_": {
        "title": "ChiftPage[PaymentItemOut]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/PaymentItemOut" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_PaymentMethodItem_": {
        "title": "ChiftPage[PaymentMethodItem]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/PaymentMethodItem" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_PaymentMethods_": {
        "title": "ChiftPage[PaymentMethods]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/PaymentMethods" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_Payment_": {
        "title": "ChiftPage[Payment]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/Payment" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_ProductCategoryItem_": {
        "title": "ChiftPage[ProductCategoryItem]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/backbone_common__models__pos__common__ProductCategoryItem"
            }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_ProductItemOut_": {
        "title": "ChiftPage[ProductItemOut]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/ProductItemOut" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_ProductItem_": {
        "title": "ChiftPage[ProductItem]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/backbone_common__models__commerce__common__ProductItem"
            }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_RefundItemOut_": {
        "title": "ChiftPage[RefundItemOut]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/RefundItemOut" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_SupplierItemOut_": {
        "title": "ChiftPage[SupplierItemOut]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/SupplierItemOut" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_TaxRateItem_": {
        "title": "ChiftPage[TaxRateItem]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/TaxRateItem" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ChiftPage_TransactionItemOut_": {
        "title": "ChiftPage[TransactionItemOut]",
        "required": ["items", "total", "page", "size"],
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/TransactionItemOut" }
          },
          "total": { "title": "Total", "minimum": 0.0, "type": "integer" },
          "page": { "title": "Page", "minimum": 1.0, "type": "integer" },
          "size": { "title": "Size", "minimum": 1.0, "type": "integer" }
        }
      },
      "ClientItemIn": {
        "title": "ClientItemIn",
        "required": ["name", "addresses"],
        "type": "object",
        "properties": {
          "external_reference": {
            "title": "External Reference",
            "type": "string"
          },
          "first_name": {
            "title": "First Name",
            "type": "string",
            "description": "Only used when the client is an individual (is_company=false). Indicates the first name of the client."
          },
          "last_name": {
            "title": "Last Name",
            "type": "string",
            "description": "Only used when the client is an individual (is_company=false). Indicates the last name of the client."
          },
          "name": { "title": "Name", "minLength": 1, "type": "string" },
          "function": {
            "title": "Function",
            "type": "string",
            "description": "Only used when the client is an individual (is_company=false). Indicates the function of the client."
          },
          "is_company": {
            "title": "Is Company",
            "type": "boolean",
            "description": "Indicates if the client is an individual or a company.",
            "default": true
          },
          "company_id": {
            "title": "Company Id",
            "type": "string",
            "description": "Only used when the client is an individual (is_company=false). Indicates the id of the company linked to the client."
          },
          "phone": { "title": "Phone", "type": "string" },
          "mobile": { "title": "Mobile", "type": "string" },
          "email": { "title": "Email", "type": "string" },
          "language": {
            "title": "Language",
            "type": "string",
            "description": "Format: ISO 639-1 codes."
          },
          "internal_notes": { "title": "Internal Notes", "type": "string" },
          "website": { "title": "Website", "type": "string" },
          "vat": { "title": "Vat", "type": "string" },
          "iban": {
            "title": "Iban",
            "type": "string",
            "description": "IBAN Account number of the client."
          },
          "bank_account": {
            "title": "Bank Account",
            "type": "string",
            "description": "Bank account number of the client."
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "Indicates the currency of the client (e.g. EUR)."
          },
          "active": { "title": "Active", "type": "boolean", "default": true },
          "addresses": {
            "title": "Addresses",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/backbone_common__models__common__AddressItemIn"
            }
          },
          "account_number": { "title": "Account Number", "type": "string" }
        }
      },
      "ClientItemOut": {
        "title": "ClientItemOut",
        "type": "object",
        "properties": {
          "external_reference": {
            "title": "External Reference",
            "type": "string"
          },
          "first_name": {
            "title": "First Name",
            "type": "string",
            "description": "Only used when the client is an individual (is_company=false). Indicates the first name of the client."
          },
          "last_name": {
            "title": "Last Name",
            "type": "string",
            "description": "Only used when the client is an individual (is_company=false). Indicates the last name of the client."
          },
          "name": { "title": "Name", "type": "string" },
          "function": {
            "title": "Function",
            "type": "string",
            "description": "Only used when the client is an individual (is_company=false). Indicates the function of the client."
          },
          "is_company": {
            "title": "Is Company",
            "type": "boolean",
            "description": "Indicates if the client is an individual or a company.",
            "default": true
          },
          "company_id": {
            "title": "Company Id",
            "type": "string",
            "description": "Only used when the client is an individual (is_company=false). Indicates the id of the company linked to the client."
          },
          "phone": { "title": "Phone", "type": "string" },
          "mobile": { "title": "Mobile", "type": "string" },
          "email": { "title": "Email", "type": "string" },
          "language": {
            "title": "Language",
            "type": "string",
            "description": "Format: ISO 639-1 codes."
          },
          "internal_notes": { "title": "Internal Notes", "type": "string" },
          "website": { "title": "Website", "type": "string" },
          "vat": { "title": "Vat", "type": "string" },
          "iban": {
            "title": "Iban",
            "type": "string",
            "description": "IBAN Account number of the client."
          },
          "bank_account": {
            "title": "Bank Account",
            "type": "string",
            "description": "Bank account number of the client."
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "Indicates the currency of the client (e.g. EUR)."
          },
          "active": { "title": "Active", "type": "boolean", "default": true },
          "addresses": {
            "title": "Addresses",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/backbone_common__models__common__AddressItemOut"
            },
            "default": []
          },
          "account_number": { "title": "Account Number", "type": "string" },
          "company_number": { "title": "Company Number", "type": "string" },
          "id": { "title": "Id", "type": "string" }
        }
      },
      "ClientItemUpdate": {
        "title": "ClientItemUpdate",
        "type": "object",
        "properties": {
          "external_reference": {
            "title": "External Reference",
            "type": "string"
          },
          "first_name": {
            "title": "First Name",
            "type": "string",
            "description": "Only used when the client is an individual (is_company=false). Indicates the first name of the client."
          },
          "last_name": {
            "title": "Last Name",
            "type": "string",
            "description": "Only used when the client is an individual (is_company=false). Indicates the last name of the client."
          },
          "name": { "title": "Name", "type": "string" },
          "function": {
            "title": "Function",
            "type": "string",
            "description": "Only used when the client is an individual (is_company=false). Indicates the function of the client."
          },
          "is_company": {
            "title": "Is Company",
            "type": "boolean",
            "description": "Indicates if the client is an individual or a company.",
            "default": true
          },
          "company_id": {
            "title": "Company Id",
            "type": "string",
            "description": "Only used when the client is an individual (is_company=false). Indicates the id of the company linked to the client."
          },
          "phone": { "title": "Phone", "type": "string" },
          "mobile": { "title": "Mobile", "type": "string" },
          "email": { "title": "Email", "type": "string" },
          "language": {
            "title": "Language",
            "type": "string",
            "description": "Format: ISO 639-1 codes."
          },
          "internal_notes": { "title": "Internal Notes", "type": "string" },
          "website": { "title": "Website", "type": "string" },
          "vat": { "title": "Vat", "type": "string" },
          "iban": {
            "title": "Iban",
            "type": "string",
            "description": "IBAN Account number of the client."
          },
          "bank_account": {
            "title": "Bank Account",
            "type": "string",
            "description": "Bank account number of the client."
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "Indicates the currency of the client (e.g. EUR)."
          },
          "active": { "title": "Active", "type": "boolean", "default": true },
          "addresses": {
            "title": "Addresses",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/backbone_common__models__common__AddressItemOut"
            },
            "default": []
          }
        }
      },
      "ClosureItem": {
        "title": "ClosureItem",
        "required": ["date", "status"],
        "type": "object",
        "properties": {
          "date": { "title": "Date", "type": "string", "format": "date" },
          "status": { "$ref": "#/components/schemas/ClosureStates" }
        }
      },
      "ClosureStates": {
        "title": "ClosureStates",
        "enum": ["open", "closed"],
        "description": "An enumeration."
      },
      "CommerceCustomerItem": {
        "title": "CommerceCustomerItem",
        "required": ["id", "source_ref"],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id in Chift"
          },
          "source_ref": {
            "title": "Source Ref",
            "allOf": [{ "$ref": "#/components/schemas/Ref" }],
            "description": "Technical id in the target software"
          },
          "first_name": { "title": "First Name", "type": "string" },
          "last_name": { "title": "Last Name", "type": "string" },
          "phone": { "title": "Phone", "type": "string" },
          "email": { "title": "Email", "type": "string" },
          "language": {
            "title": "Language",
            "type": "string",
            "description": "Format: ISO 639-1 codes."
          },
          "internal_notes": { "title": "Internal Notes", "type": "string" },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "Indicates the currency of the client (e.g. EUR)."
          },
          "addresses": {
            "title": "Addresses",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/backbone_common__models__commerce__common__AddressItemOut"
            },
            "default": []
          },
          "created_on": {
            "title": "Created On",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CommerceLocationItem": {
        "title": "CommerceLocationItem",
        "required": ["id", "name"],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id of the location in Chift"
          },
          "name": { "title": "Name", "type": "string" }
        }
      },
      "CommerceLocationItemOut": {
        "title": "CommerceLocationItemOut",
        "required": ["id", "name"],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id of the location in Chift"
          },
          "name": { "title": "Name", "type": "string" },
          "source_ref": {
            "title": "Source Ref",
            "allOf": [{ "$ref": "#/components/schemas/Ref" }],
            "description": "Technical id of the location in the target software"
          }
        }
      },
      "CommonAttributeItem": {
        "title": "CommonAttributeItem",
        "required": ["name", "values"],
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "values": {
            "title": "Values",
            "type": "array",
            "items": { "type": "string" }
          }
        }
      },
      "ConsumerItem": {
        "title": "ConsumerItem",
        "required": ["consumerid", "name"],
        "type": "object",
        "properties": {
          "consumerid": {
            "title": "Consumerid",
            "type": "string",
            "format": "uuid"
          },
          "name": { "title": "Name", "minLength": 1, "type": "string" },
          "email": { "title": "Email", "type": "string" },
          "internal_reference": {
            "title": "Internal Reference",
            "type": "string"
          },
          "redirect_url": { "title": "Redirect Url", "type": "string" }
        }
      },
      "ContactGender": {
        "title": "ContactGender",
        "enum": ["H", "F", "N/A"],
        "type": "string",
        "description": "An enumeration."
      },
      "ContactItemIn": {
        "title": "ContactItemIn",
        "type": "object",
        "properties": {
          "is_prospect": {
            "title": "Is Prospect",
            "type": "boolean",
            "description": "Is a prospect?"
          },
          "is_customer": {
            "title": "Is Customer",
            "type": "boolean",
            "description": "Is a customer?"
          },
          "is_supplier": {
            "title": "Is Supplier",
            "type": "boolean",
            "description": "Is a supplier?"
          },
          "is_company": {
            "title": "Is Company",
            "type": "boolean",
            "description": "Is a company?"
          },
          "company_name": {
            "title": "Company Name",
            "type": "string",
            "description": "Name of the company"
          },
          "first_name": {
            "title": "First Name",
            "type": "string",
            "description": "Firstname"
          },
          "last_name": {
            "title": "Last Name",
            "type": "string",
            "description": "Lastname"
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "Email"
          },
          "phone": {
            "title": "Phone",
            "type": "string",
            "description": "Phone"
          },
          "mobile": {
            "title": "Mobile",
            "type": "string",
            "description": "Mobile"
          },
          "company_id": {
            "title": "Company Id",
            "type": "string",
            "description": "Technical id of the contact' company in Chift"
          },
          "vat": {
            "title": "Vat",
            "type": "string",
            "description": "VAT number"
          },
          "company_number": {
            "title": "Company Number",
            "type": "string",
            "description": "Company number (identification number different than the VAT (e.g. siret))"
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "Currency matching target sofware name"
          },
          "language": {
            "title": "Language",
            "type": "string",
            "description": "Language matching target sofware name"
          },
          "comment": {
            "title": "Comment",
            "type": "string",
            "description": "Comment"
          },
          "customer_account_number": {
            "title": "Customer Account Number",
            "type": "string",
            "description": "Number of the accounting account used for sales (e.g. 701000)"
          },
          "supplier_account_number": {
            "title": "Supplier Account Number",
            "type": "string",
            "description": "Number of the accounting account used for purchases (e.g. 601000)"
          },
          "birthdate": {
            "title": "Birthdate",
            "type": "string",
            "description": "Birthdate",
            "format": "date"
          },
          "gender": {
            "allOf": [{ "$ref": "#/components/schemas/ContactGender" }],
            "description": "Gender"
          },
          "addresses": {
            "title": "Addresses",
            "type": "array",
            "items": { "$ref": "#/components/schemas/AddressItemInInvoicing" },
            "description": "Addresses",
            "default": []
          }
        }
      },
      "ContactItemOut": {
        "title": "ContactItemOut",
        "required": ["id", "source_ref"],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id in Chift"
          },
          "source_ref": {
            "title": "Source Ref",
            "allOf": [{ "$ref": "#/components/schemas/Ref" }],
            "description": "Technical id in the target software"
          },
          "is_prospect": {
            "title": "Is Prospect",
            "type": "boolean",
            "description": "Is a prospect?"
          },
          "is_customer": {
            "title": "Is Customer",
            "type": "boolean",
            "description": "Is a customer?"
          },
          "is_supplier": {
            "title": "Is Supplier",
            "type": "boolean",
            "description": "Is a supplier?"
          },
          "is_company": {
            "title": "Is Company",
            "type": "boolean",
            "description": "Is a company?"
          },
          "company_name": {
            "title": "Company Name",
            "type": "string",
            "description": "Name of the company"
          },
          "first_name": {
            "title": "First Name",
            "type": "string",
            "description": "Firstname"
          },
          "last_name": {
            "title": "Last Name",
            "type": "string",
            "description": "Lastname"
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "Email"
          },
          "phone": {
            "title": "Phone",
            "type": "string",
            "description": "Phone"
          },
          "mobile": {
            "title": "Mobile",
            "type": "string",
            "description": "Mobile"
          },
          "company_id": {
            "title": "Company Id",
            "type": "string",
            "description": "Technical id of the contact' company in Chift"
          },
          "vat": {
            "title": "Vat",
            "type": "string",
            "description": "VAT number"
          },
          "company_number": {
            "title": "Company Number",
            "type": "string",
            "description": "Company number (identification number different than the VAT (e.g. siret))"
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "Currency matching target sofware name"
          },
          "language": {
            "title": "Language",
            "type": "string",
            "description": "Language matching target sofware name"
          },
          "comment": {
            "title": "Comment",
            "type": "string",
            "description": "Comment"
          },
          "customer_account_number": {
            "title": "Customer Account Number",
            "type": "string",
            "description": "Number of the accounting account used for sales (e.g. 701000)"
          },
          "supplier_account_number": {
            "title": "Supplier Account Number",
            "type": "string",
            "description": "Number of the accounting account used for purchases (e.g. 601000)"
          },
          "birthdate": {
            "title": "Birthdate",
            "type": "string",
            "description": "Birthdate",
            "format": "date"
          },
          "gender": {
            "allOf": [{ "$ref": "#/components/schemas/ContactGender" }],
            "description": "Gender"
          },
          "addresses": {
            "title": "Addresses",
            "type": "array",
            "items": { "$ref": "#/components/schemas/AddressItemOutInvoicing" },
            "description": "Addresses",
            "default": []
          },
          "external_reference": {
            "title": "External Reference",
            "type": "string",
            "description": "External reference of the contact in the invoicing system"
          }
        }
      },
      "ContactType": {
        "title": "ContactType",
        "enum": ["prospect", "customer", "supplier", "all"],
        "type": "string",
        "description": "An enumeration."
      },
      "CountryItem": {
        "title": "CountryItem",
        "required": ["code", "name"],
        "type": "object",
        "properties": {
          "code": {
            "title": "Code",
            "type": "string",
            "description": "Country ISO Code"
          },
          "name": { "title": "Name", "type": "string" }
        }
      },
      "CreateConsumerSyncItem": {
        "title": "CreateConsumerSyncItem",
        "required": ["syncid"],
        "type": "object",
        "properties": {
          "syncid": { "title": "Syncid", "type": "string", "format": "uuid" },
          "integrationids": {
            "title": "Integrationids",
            "type": "array",
            "items": { "type": "string" },
            "description": "[OPTIONAL] Can be used to specify maximum one integrationid for each One API that you want to highlight. If specified, only this connector will be displayed to your clients.",
            "default": []
          },
          "link_metadata": { "title": "Link Metadata", "type": "object" }
        }
      },
      "CreateFlowItem": {
        "title": "CreateFlowItem",
        "required": ["name", "execution", "triggers"],
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "description": { "title": "Description", "type": "string" },
          "execution": { "$ref": "#/components/schemas/FlowExecution" },
          "config": {
            "title": "Config",
            "allOf": [{ "$ref": "#/components/schemas/FlowConfig" }],
            "default": { "datastores": [] }
          },
          "triggers": {
            "title": "Triggers",
            "type": "array",
            "items": { "$ref": "#/components/schemas/FlowTrigger" }
          }
        }
      },
      "CreateSyncItem": {
        "title": "CreateSyncItem",
        "required": ["name", "connections"],
        "type": "object",
        "properties": {
          "name": { "title": "Name", "minLength": 1, "type": "string" },
          "connections": {
            "title": "Connections",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/backbone_api__app__routers__syncs__ConnectionItem"
            }
          },
          "mappings": {
            "title": "Mappings",
            "type": "array",
            "items": { "$ref": "#/components/schemas/CreateSyncMappingItem" },
            "default": []
          },
          "flows": {
            "title": "Flows",
            "type": "array",
            "items": { "$ref": "#/components/schemas/CreateFlowItem" },
            "default": []
          }
        }
      },
      "CreateSyncMappingItem": {
        "title": "CreateSyncMappingItem",
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "description": { "title": "Description", "type": "string" },
          "display_order": {
            "title": "Display Order",
            "type": "integer",
            "default": 0
          },
          "challenge_question": {
            "title": "Challenge Question",
            "type": "string"
          },
          "sub_mappings": {
            "title": "Sub Mappings",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateSyncMappingToFieldItem"
            },
            "default": []
          }
        }
      },
      "CreateSyncMappingToFieldItem": {
        "title": "CreateSyncMappingToFieldItem",
        "required": ["name", "source_field", "target_field"],
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "description": { "title": "Description", "type": "string" },
          "display_order": {
            "title": "Display Order",
            "type": "integer",
            "default": 0
          },
          "challenge_question": {
            "title": "Challenge Question",
            "type": "string"
          },
          "source_field": { "$ref": "#/components/schemas/FieldItem" },
          "target_field": { "$ref": "#/components/schemas/FieldItem" },
          "display_delete": {
            "title": "Display Delete",
            "type": "boolean",
            "default": false
          },
          "logic": { "title": "Logic", "type": "object" }
        }
      },
      "DataItem": {
        "title": "DataItem",
        "required": ["data"],
        "type": "object",
        "properties": { "data": { "title": "Data", "type": "object" } }
      },
      "DataItemOut": {
        "title": "DataItemOut",
        "required": ["data", "id", "created_on"],
        "type": "object",
        "properties": {
          "data": { "title": "Data", "type": "object" },
          "id": { "title": "Id", "type": "string" },
          "created_on": {
            "title": "Created On",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "DataStoreItem": {
        "title": "DataStoreItem",
        "required": ["id", "name", "definition"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "string" },
          "name": { "title": "Name", "type": "string" },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/backbone_api__app__routers__datastores__Status"
              }
            ],
            "default": "active"
          },
          "definition": { "$ref": "#/components/schemas/DatastoreDef" }
        }
      },
      "DatastoreColumn": {
        "title": "DatastoreColumn",
        "required": ["name", "title", "type"],
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "title": { "title": "Title", "type": "string" },
          "type": { "title": "Type", "type": "string" },
          "optional": {
            "title": "Optional",
            "type": "boolean",
            "default": false
          }
        }
      },
      "DatastoreDef": {
        "title": "DatastoreDef",
        "required": ["columns"],
        "type": "object",
        "properties": {
          "columns": {
            "title": "Columns",
            "type": "array",
            "items": { "$ref": "#/components/schemas/DatastoreColumn" }
          },
          "search_column": {
            "title": "Search Column",
            "type": "string",
            "description": "Column name that will be indexed and used in search if any."
          }
        }
      },
      "DiscountType": {
        "title": "DiscountType",
        "enum": ["OFFERED", "UNKNOWN", "LOSS"],
        "description": "An enumeration."
      },
      "DocumentType": {
        "title": "DocumentType",
        "enum": ["invoice", "entry"],
        "type": "string",
        "description": "An enumeration."
      },
      "EmployeeItem": {
        "title": "EmployeeItem",
        "required": ["id", "name"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "string" },
          "name": { "title": "Name", "type": "string" },
          "first_name": { "title": "First Name", "type": "string" },
          "last_name": { "title": "Last Name", "type": "string" },
          "function": { "title": "Function", "type": "string" },
          "phone": { "title": "Phone", "type": "string" },
          "mobile": { "title": "Mobile", "type": "string" },
          "email": { "title": "Email", "type": "string" },
          "active": { "title": "Active", "type": "boolean", "default": true },
          "reference": { "title": "Reference", "type": "string" },
          "account_number": { "title": "Account Number", "type": "string" }
        }
      },
      "EnableFlowConsumer": {
        "title": "EnableFlowConsumer",
        "type": "object",
        "properties": {
          "integrationids": {
            "title": "Integrationids",
            "type": "array",
            "items": { "type": "string" },
            "description": "List of integrationids of the connections that will be used to enable the flow",
            "default": []
          },
          "triggerid": {
            "title": "Triggerid",
            "type": "string",
            "default": "trigger-1"
          },
          "cronschedule": { "title": "Cronschedule", "type": "string" },
          "data": {
            "title": "Data",
            "type": "object",
            "description": "Object containing the configuration of the flow for the consumer",
            "default": {}
          }
        }
      },
      "EntryLineType": {
        "title": "EntryLineType",
        "enum": [
          "customer_account",
          "supplier_account",
          "employee_account",
          "general_account"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "ExecutionType": {
        "title": "ExecutionType",
        "enum": ["code", "module"],
        "type": "string",
        "description": "An enumeration."
      },
      "FeesItem": {
        "title": "FeesItem",
        "required": [
          "id",
          "source_ref",
          "type",
          "tax_rate",
          "untaxed_amount",
          "tax_amount",
          "total"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id in Chift"
          },
          "source_ref": {
            "title": "Source Ref",
            "allOf": [{ "$ref": "#/components/schemas/Ref" }],
            "description": "Technical id in the target software"
          },
          "created_on": {
            "title": "Created On",
            "type": "string",
            "format": "date-time"
          },
          "type": { "$ref": "#/components/schemas/FeesType" },
          "removed": {
            "title": "Removed",
            "type": "boolean",
            "description": "Indicates if the fee has been removed from the order",
            "default": false
          },
          "tax_rate": { "title": "Tax Rate", "type": "number" },
          "tax_id": {
            "title": "Tax Id",
            "type": "string",
            "description": "Technical id of the tax rate in Chift"
          },
          "discounts": {
            "title": "Discounts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/backbone_common__models__commerce__common__DiscountItem"
            },
            "default": []
          },
          "untaxed_amount": { "title": "Untaxed Amount", "type": "number" },
          "tax_amount": { "title": "Tax Amount", "type": "number" },
          "total": { "title": "Total", "type": "number" }
        }
      },
      "FeesType": {
        "title": "FeesType",
        "enum": ["shipping", "other"],
        "type": "string",
        "description": "An enumeration."
      },
      "FieldItem": {
        "title": "FieldItem",
        "required": ["name", "type"],
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "type": { "$ref": "#/components/schemas/FieldItemType" },
          "display_condition": {
            "title": "Display Condition",
            "type": "object"
          },
          "values": {
            "title": "Values",
            "type": "array",
            "items": { "$ref": "#/components/schemas/FieldItemValue" },
            "default": []
          },
          "api_route": { "title": "Api Route", "type": "string" },
          "connection_type": { "title": "Connection Type", "type": "integer" }
        }
      },
      "FieldItemType": {
        "title": "FieldItemType",
        "enum": ["fixed", "api"],
        "type": "string",
        "description": "An enumeration."
      },
      "FieldItemValue": {
        "title": "FieldItemValue",
        "required": ["id", "label"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "string" },
          "label": { "title": "Label", "type": "string" }
        }
      },
      "FieldRef": {
        "title": "FieldRef",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id in the target software"
          },
          "model": {
            "title": "Model",
            "type": "string",
            "description": "Name of the model/entity in the target software"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Value the field in the target software"
          }
        }
      },
      "FinancialEntryItemIn": {
        "title": "FinancialEntryItemIn",
        "required": ["date", "journal_id", "currency", "items"],
        "type": "object",
        "properties": {
          "date": { "title": "Date", "type": "string", "format": "date" },
          "journal_id": {
            "title": "Journal Id",
            "type": "string",
            "description": "Indicates the journal used in for the operation."
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "Indicates the currency of the operation (e.g. EUR)."
          },
          "currency_exchange_rate": {
            "title": "Currency Exchange Rate",
            "type": "number",
            "description": "Indicates the exchange rate at the date of the operation. Must be filled in when creating the operation in another currency from the default currency of the accounting system.",
            "default": 1
          },
          "reference": { "title": "Reference", "type": "string" },
          "number": { "title": "Number", "type": "string" },
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/FinancialEntryLineItem" }
          },
          "pdf": {
            "title": "Pdf",
            "type": "string",
            "description": "Base 64 string representing the PDF attached to the sale/purchase entry."
          }
        }
      },
      "FinancialEntryItemInOld": {
        "title": "FinancialEntryItemInOld",
        "required": ["date", "journal_id", "currency", "items"],
        "type": "object",
        "properties": {
          "date": { "title": "Date", "type": "string", "format": "date" },
          "journal_id": {
            "title": "Journal Id",
            "type": "string",
            "description": "Indicates the journal used in for the operation."
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "Indicates the currency of the operation (e.g. EUR)."
          },
          "currency_exchange_rate": {
            "title": "Currency Exchange Rate",
            "type": "number",
            "description": "Indicates the exchange rate at the date of the operation. Must be filled in when creating the operation in another currency from the default currency of the accounting system.",
            "default": 1
          },
          "reference": { "title": "Reference", "type": "string" },
          "number": { "title": "Number", "type": "string" },
          "items": {
            "title": "Items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FinancialEntryLineItemOld"
            }
          },
          "pdf": {
            "title": "Pdf",
            "type": "string",
            "description": "Base 64 string representing the PDF attached to the sale/purchase entry."
          }
        }
      },
      "FinancialEntryItemOut": {
        "title": "FinancialEntryItemOut",
        "required": ["date", "journal_id", "currency", "id", "number", "items"],
        "type": "object",
        "properties": {
          "date": { "title": "Date", "type": "string", "format": "date" },
          "journal_id": {
            "title": "Journal Id",
            "type": "string",
            "description": "Indicates the journal used in for the operation."
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "Indicates the currency of the operation (e.g. EUR)."
          },
          "currency_exchange_rate": {
            "title": "Currency Exchange Rate",
            "type": "number",
            "description": "Indicates the exchange rate at the date of the operation. Must be filled in when creating the operation in another currency from the default currency of the accounting system.",
            "default": 1
          },
          "reference": { "title": "Reference", "type": "string" },
          "id": { "title": "Id", "type": "string" },
          "number": { "title": "Number", "type": "string" },
          "items": {
            "title": "Items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FinancialEntryLineItemOut"
            }
          }
        }
      },
      "FinancialEntryItemOutOld": {
        "title": "FinancialEntryItemOutOld",
        "required": ["date", "journal_id", "currency", "id", "number", "items"],
        "type": "object",
        "properties": {
          "date": { "title": "Date", "type": "string", "format": "date" },
          "journal_id": {
            "title": "Journal Id",
            "type": "string",
            "description": "Indicates the journal used in for the operation."
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "Indicates the currency of the operation (e.g. EUR)."
          },
          "currency_exchange_rate": {
            "title": "Currency Exchange Rate",
            "type": "number",
            "description": "Indicates the exchange rate at the date of the operation. Must be filled in when creating the operation in another currency from the default currency of the accounting system.",
            "default": 1
          },
          "reference": { "title": "Reference", "type": "string" },
          "id": { "title": "Id", "type": "string" },
          "number": { "title": "Number", "type": "string" },
          "items": {
            "title": "Items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FinancialEntryLineItemOutOld"
            }
          }
        }
      },
      "FinancialEntryLineItem": {
        "title": "FinancialEntryLineItem",
        "required": ["account_type", "account", "amount"],
        "type": "object",
        "properties": {
          "account_type": { "$ref": "#/components/schemas/EntryLineType" },
          "account": { "title": "Account", "minLength": 1, "type": "string" },
          "amount": {
            "title": "Amount",
            "type": "number",
            "description": "A positive amount represents funds transfered to the bank/cash account. In that case the bank/cash account is debited and the given account_number is credited."
          },
          "description": { "title": "Description", "type": "string" }
        }
      },
      "FinancialEntryLineItemOld": {
        "title": "FinancialEntryLineItemOld",
        "required": ["type", "account_number", "amount"],
        "type": "object",
        "properties": {
          "type": { "$ref": "#/components/schemas/EntryLineType" },
          "account_number": { "title": "Account Number", "type": "string" },
          "partner_id": {
            "title": "Partner Id",
            "type": "string",
            "description": "Must be filled in it is a 'customer_account', 'supplier_account' or 'employee_account' line type."
          },
          "amount": {
            "title": "Amount",
            "type": "number",
            "description": "A positive amount represents funds transfered to the bank/cash account. In that case the bank/cash account is debited and the given account_number is credited."
          },
          "description": { "title": "Description", "type": "string" }
        }
      },
      "FinancialEntryLineItemOut": {
        "title": "FinancialEntryLineItemOut",
        "required": [
          "account_type",
          "account",
          "amount",
          "counterpart_account"
        ],
        "type": "object",
        "properties": {
          "account_type": { "$ref": "#/components/schemas/EntryLineType" },
          "account": { "title": "Account", "minLength": 1, "type": "string" },
          "amount": {
            "title": "Amount",
            "type": "number",
            "description": "A positive amount represents funds transfered to the bank/cash account. In that case the bank/cash account is debited and the given account_number is credited."
          },
          "description": { "title": "Description", "type": "string" },
          "counterpart_account": {
            "title": "Counterpart Account",
            "type": "string"
          }
        }
      },
      "FinancialEntryLineItemOutOld": {
        "title": "FinancialEntryLineItemOutOld",
        "required": ["type", "account_number", "amount", "counterpart_account"],
        "type": "object",
        "properties": {
          "type": { "$ref": "#/components/schemas/EntryLineType" },
          "account_number": { "title": "Account Number", "type": "string" },
          "partner_id": {
            "title": "Partner Id",
            "type": "string",
            "description": "Must be filled in it is a 'customer_account', 'supplier_account' or 'employee_account' line type."
          },
          "amount": {
            "title": "Amount",
            "type": "number",
            "description": "A positive amount represents funds transfered to the bank/cash account. In that case the bank/cash account is debited and the given account_number is credited."
          },
          "description": { "title": "Description", "type": "string" },
          "counterpart_account": {
            "title": "Counterpart Account",
            "type": "string"
          }
        }
      },
      "FlowConfig": {
        "title": "FlowConfig",
        "type": "object",
        "properties": {
          "definitionFields": {
            "title": "Definitionfields",
            "type": "array",
            "items": { "type": "object" }
          },
          "doorkeyFields": {
            "title": "Doorkeyfields",
            "type": "array",
            "items": { "type": "object" }
          },
          "customFields": {
            "title": "Customfields",
            "type": "array",
            "items": { "type": "object" }
          },
          "datastores": {
            "title": "Datastores",
            "type": "array",
            "items": { "$ref": "#/components/schemas/FlowDataStoreItem" },
            "default": []
          }
        }
      },
      "FlowDataStoreItem": {
        "title": "FlowDataStoreItem",
        "required": ["name", "definition"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "string" },
          "name": { "title": "Name", "type": "string" },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/backbone_api__app__routers__datastores__Status"
              }
            ],
            "default": "active"
          },
          "definition": { "$ref": "#/components/schemas/DatastoreDef" }
        }
      },
      "FlowExecution": {
        "title": "FlowExecution",
        "required": ["type"],
        "type": "object",
        "properties": {
          "type": { "$ref": "#/components/schemas/ExecutionType" },
          "data": {
            "title": "Data",
            "anyOf": [
              { "$ref": "#/components/schemas/FlowExecutionChain" },
              { "$ref": "#/components/schemas/FlowExecutionCode" }
            ]
          }
        }
      },
      "FlowExecutionChain": {
        "title": "FlowExecutionChain",
        "required": ["name"],
        "type": "object",
        "properties": { "name": { "title": "Name", "type": "string" } }
      },
      "FlowExecutionCode": {
        "title": "FlowExecutionCode",
        "required": ["code"],
        "type": "object",
        "properties": { "code": { "title": "Code", "type": "string" } }
      },
      "FlowTrigger": {
        "title": "FlowTrigger",
        "required": ["id", "type"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "string" },
          "type": { "$ref": "#/components/schemas/TriggerType" },
          "cronschedules": {
            "title": "Cronschedules",
            "type": "array",
            "items": { "type": "string" }
          },
          "visible": { "title": "Visible", "type": "boolean", "default": true },
          "definitionFields": {
            "title": "Definitionfields",
            "type": "array",
            "items": { "type": "object" }
          },
          "options": { "title": "Options", "type": "object" }
        }
      },
      "FolderItem": {
        "title": "FolderItem",
        "required": ["id", "name"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "string" },
          "name": { "title": "Name", "type": "string" },
          "selected": {
            "title": "Selected",
            "type": "boolean",
            "default": true
          },
          "vat": { "title": "Vat", "type": "string" },
          "company_number": { "title": "Company Number", "type": "string" }
        }
      },
      "GenericJournalEntry": {
        "title": "GenericJournalEntry",
        "required": ["journal_id", "number", "currency", "date", "items"],
        "type": "object",
        "properties": {
          "reference": { "title": "Reference", "type": "string" },
          "due_date": {
            "title": "Due Date",
            "type": "string",
            "format": "date"
          },
          "journal_id": { "title": "Journal Id", "type": "string" },
          "number": { "title": "Number", "minLength": 1, "type": "string" },
          "currency": { "title": "Currency", "minLength": 1, "type": "string" },
          "currency_exchange_rate": {
            "title": "Currency Exchange Rate",
            "type": "number",
            "default": 1
          },
          "date": { "title": "Date", "type": "string", "format": "date" },
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/GenericJournalItem" }
          },
          "pdf": {
            "title": "Pdf",
            "type": "string",
            "description": "Base 64 string representing the PDF attached to the item."
          },
          "posted": { "title": "Posted", "type": "boolean", "default": true },
          "start_date": {
            "title": "Start Date",
            "type": "string",
            "format": "date"
          },
          "end_date": {
            "title": "End Date",
            "type": "string",
            "format": "date"
          }
        }
      },
      "GenericJournalItem": {
        "title": "GenericJournalItem",
        "required": ["account_type", "account", "debit", "credit"],
        "type": "object",
        "properties": {
          "account_type": { "$ref": "#/components/schemas/EntryLineType" },
          "account": { "title": "Account", "minLength": 1, "type": "string" },
          "force_general_account": {
            "title": "Force General Account",
            "type": "string",
            "description": "For ustomer/supplier/employee accounts we determine the general account based on the configurations in the accounting system. The general account can also be forced by specifying the value in this field."
          },
          "prioritise_thirdparty_account": {
            "title": "Prioritise Thirdparty Account",
            "type": "boolean",
            "description": "Indicate if we need to prioritise the information from thirdparty accounts when forcing the general account in a software where only 1 account is accepted.",
            "default": false
          },
          "description": { "title": "Description", "type": "string" },
          "debit": { "title": "Debit", "type": "number" },
          "credit": { "title": "Credit", "type": "number" },
          "analytic_distribution": {
            "title": "Analytic Distribution",
            "type": "array",
            "items": { "$ref": "#/components/schemas/AnalyticDistribution" },
            "default": []
          },
          "tax_code": {
            "title": "Tax Code",
            "type": "string",
            "description": "Indicates the tax code used for the entry item. This is the ID of the Tax Code in the accounting software."
          }
        }
      },
      "HTTPValidationError": {
        "title": "Validation Error",
        "required": ["message"],
        "type": "object",
        "properties": {
          "message": {
            "title": "Message",
            "type": "string",
            "default": "Validation error"
          },
          "status": { "title": "Status", "type": "string", "default": "error" },
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": { "$ref": "#/components/schemas/ValidationError" }
          }
        }
      },
      "ImageItem": {
        "title": "ImageItem",
        "required": ["id", "main_image", "url"],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id of the image in the target software"
          },
          "main_image": { "title": "Main Image", "type": "boolean" },
          "url": { "title": "Url", "type": "string" }
        }
      },
      "ImageType": {
        "title": "ImageType",
        "enum": ["icon", "logo"],
        "description": "An enumeration."
      },
      "IntegrationItem": {
        "title": "IntegrationItem",
        "required": [
          "integrationid",
          "name",
          "status",
          "api",
          "logo_url",
          "icon_url"
        ],
        "type": "object",
        "properties": {
          "integrationid": { "title": "Integrationid", "type": "integer" },
          "name": { "title": "Name", "type": "string" },
          "status": {
            "$ref": "#/components/schemas/backbone_api__app__routers__integrations__Status"
          },
          "api": { "$ref": "#/components/schemas/Api" },
          "logo_url": { "title": "Logo Url", "type": "string" },
          "icon_url": { "title": "Icon Url", "type": "string" },
          "post_connections": {
            "title": "Post Connections",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/backbone_api__app__routers__integrations__PostConnectionItem"
            },
            "description": "List of post-connections that can be activated for this integration.",
            "default": []
          },
          "credentials": {
            "title": "Credentials",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/backbone_api__app__routers__integrations__CredentialItem"
            },
            "description": "List of credentials that must be specified to create a connection. Can be used if you want to pass credentials on connection creation. Not compatible with oAuth2 routes.",
            "default": []
          }
        }
      },
      "InventoryDetailsItem": {
        "title": "InventoryDetailsItem",
        "required": ["location", "available_quantity"],
        "type": "object",
        "properties": {
          "location": { "$ref": "#/components/schemas/CommerceLocationItem" },
          "available_quantity": {
            "title": "Available Quantity",
            "type": "number"
          }
        }
      },
      "InventoryDetailsUpdate": {
        "title": "InventoryDetailsUpdate",
        "required": ["location_id", "available_quantity"],
        "type": "object",
        "properties": {
          "location_id": {
            "title": "Location Id",
            "type": "string",
            "description": "Technical id of the location in Chift"
          },
          "available_quantity": {
            "title": "Available Quantity",
            "minimum": 0.0,
            "type": "number"
          }
        }
      },
      "InvoiceCorrection": {
        "title": "InvoiceCorrection",
        "type": "object",
        "properties": {
          "sale_invoice_correction_tax_code": {
            "title": "Sale Invoice Correction Tax Code",
            "type": "string"
          },
          "purchase_invoice_correction_tax_code": {
            "title": "Purchase Invoice Correction Tax Code",
            "type": "string"
          },
          "invoice_correction_credit_account_number": {
            "title": "Invoice Correction Credit Account Number",
            "type": "string"
          },
          "invoice_correction_debit_account_number": {
            "title": "Invoice Correction Debit Account Number",
            "type": "string"
          }
        }
      },
      "InvoiceItemInMonoAnalyticPlan": {
        "title": "InvoiceItemInMonoAnalyticPlan",
        "required": [
          "invoice_type",
          "currency",
          "untaxed_amount",
          "tax_amount",
          "total",
          "invoice_date",
          "due_date",
          "partner_id",
          "lines"
        ],
        "type": "object",
        "properties": {
          "invoice_type": {
            "$ref": "#/components/schemas/backbone_common__models__accounting__common__InvoiceType"
          },
          "invoice_number": {
            "title": "Invoice Number",
            "type": "string",
            "description": "Number of the invoice. If left empty, will be automatically generated by the accounting system at creation."
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "Indicates the currency of the invoice (e.g. EUR)."
          },
          "untaxed_amount": { "title": "Untaxed Amount", "type": "number" },
          "tax_amount": { "title": "Tax Amount", "type": "number" },
          "total": { "title": "Total", "type": "number" },
          "reference": { "title": "Reference", "type": "string" },
          "payment_communication": {
            "title": "Payment Communication",
            "type": "string"
          },
          "customer_memo": { "title": "Customer Memo", "type": "string" },
          "invoice_date": {
            "title": "Invoice Date",
            "type": "string",
            "format": "date"
          },
          "due_date": {
            "title": "Due Date",
            "type": "string",
            "format": "date"
          },
          "partner_id": {
            "title": "Partner Id",
            "minLength": 1,
            "type": "string"
          },
          "journal_id": {
            "title": "Journal Id",
            "type": "string",
            "description": "Indicates the journal used in for the invoice. If the journal is not given, the journal will be automatically set if only one journal exists otherwise an error will be thrown."
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/InvoiceStatusIn" }],
            "default": "posted"
          },
          "pdf": {
            "title": "Pdf",
            "type": "string",
            "description": "Base 64 string representing the PDF attached to the sale/purchase entry."
          },
          "currency_exchange_rate": {
            "title": "Currency Exchange Rate",
            "type": "number",
            "description": "Indicates the exchange rate at the date of the invoice. Must be filled in when creating the invoice in another currency from the default currency of the accounting system.",
            "default": 1
          },
          "invoice_correction": {
            "title": "Invoice Correction",
            "allOf": [{ "$ref": "#/components/schemas/InvoiceCorrection" }],
            "description": "Information used to add a correction line when roundings have an impact on the total amount of the invoice."
          },
          "nl_payment_terms_split": {
            "$ref": "#/components/schemas/NlPaymentTermsSplit"
          },
          "shipping_country": { "title": "Shipping Country", "type": "string" },
          "lines": {
            "title": "Lines",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceLineItemInMonoAnalyticPlan"
            }
          }
        }
      },
      "InvoiceItemInMultiAnalyticPlans": {
        "title": "InvoiceItemInMultiAnalyticPlans",
        "required": [
          "invoice_type",
          "currency",
          "untaxed_amount",
          "tax_amount",
          "total",
          "invoice_date",
          "due_date",
          "partner_id",
          "lines"
        ],
        "type": "object",
        "properties": {
          "invoice_type": {
            "$ref": "#/components/schemas/backbone_common__models__accounting__common__InvoiceType"
          },
          "invoice_number": {
            "title": "Invoice Number",
            "type": "string",
            "description": "Number of the invoice. If left empty, will be automatically generated by the accounting system at creation."
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "Indicates the currency of the invoice (e.g. EUR)."
          },
          "untaxed_amount": { "title": "Untaxed Amount", "type": "number" },
          "tax_amount": { "title": "Tax Amount", "type": "number" },
          "total": { "title": "Total", "type": "number" },
          "reference": { "title": "Reference", "type": "string" },
          "payment_communication": {
            "title": "Payment Communication",
            "type": "string"
          },
          "customer_memo": { "title": "Customer Memo", "type": "string" },
          "invoice_date": {
            "title": "Invoice Date",
            "type": "string",
            "format": "date"
          },
          "due_date": {
            "title": "Due Date",
            "type": "string",
            "format": "date"
          },
          "partner_id": {
            "title": "Partner Id",
            "minLength": 1,
            "type": "string"
          },
          "journal_id": {
            "title": "Journal Id",
            "type": "string",
            "description": "Indicates the journal used in for the invoice. If the journal is not given, the journal will be automatically set if only one journal exists otherwise an error will be thrown."
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/InvoiceStatusIn" }],
            "default": "posted"
          },
          "pdf": {
            "title": "Pdf",
            "type": "string",
            "description": "Base 64 string representing the PDF attached to the sale/purchase entry."
          },
          "currency_exchange_rate": {
            "title": "Currency Exchange Rate",
            "type": "number",
            "description": "Indicates the exchange rate at the date of the invoice. Must be filled in when creating the invoice in another currency from the default currency of the accounting system.",
            "default": 1
          },
          "invoice_correction": {
            "title": "Invoice Correction",
            "allOf": [{ "$ref": "#/components/schemas/InvoiceCorrection" }],
            "description": "Information used to add a correction line when roundings have an impact on the total amount of the invoice."
          },
          "nl_payment_terms_split": {
            "$ref": "#/components/schemas/NlPaymentTermsSplit"
          },
          "shipping_country": { "title": "Shipping Country", "type": "string" },
          "lines": {
            "title": "Lines",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceLineItemInMultiAnalyticPlans"
            }
          }
        }
      },
      "InvoiceItemOut": {
        "title": "InvoiceItemOut",
        "required": [
          "id",
          "source_ref",
          "currency",
          "invoice_type",
          "status",
          "invoice_date",
          "tax_amount",
          "untaxed_amount",
          "total"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id in Chift"
          },
          "source_ref": {
            "title": "Source Ref",
            "allOf": [{ "$ref": "#/components/schemas/Ref" }],
            "description": "Technical id in the target software"
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "Currency matching target sofware name"
          },
          "invoice_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/backbone_common__models__invoicing__common__InvoiceType"
              }
            ],
            "description": "Invoice type"
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/InvoiceStatus" }],
            "description": "Status"
          },
          "invoice_date": {
            "title": "Invoice Date",
            "type": "string",
            "description": "Invoicing date",
            "format": "date"
          },
          "tax_amount": {
            "title": "Tax Amount",
            "type": "number",
            "description": "Taxes amount"
          },
          "untaxed_amount": {
            "title": "Untaxed Amount",
            "type": "number",
            "description": "Untaxed amount"
          },
          "total": {
            "title": "Total",
            "type": "number",
            "description": "Total amount incl. taxes"
          },
          "lines": {
            "title": "Lines",
            "type": "array",
            "items": { "$ref": "#/components/schemas/InvoiceLineItem" },
            "description": "Invoice lines",
            "default": []
          },
          "partner_id": {
            "title": "Partner Id",
            "type": "string",
            "description": "Technical id of the vendor/customer in Chift"
          },
          "invoice_number": {
            "title": "Invoice Number",
            "type": "string",
            "description": "Number/sequence"
          },
          "due_date": {
            "title": "Due Date",
            "type": "string",
            "description": "Due date",
            "format": "date"
          },
          "reference": {
            "title": "Reference",
            "type": "string",
            "description": "Reference"
          },
          "payment_communication": {
            "title": "Payment Communication",
            "type": "string",
            "description": "Payment communication"
          },
          "customer_memo": {
            "title": "Customer Memo",
            "type": "string",
            "description": "Customer note/memo"
          },
          "journal_ref": {
            "title": "Journal Ref",
            "allOf": [{ "$ref": "#/components/schemas/FieldRef" }],
            "description": "Journal"
          },
          "italian_specificities": {
            "title": "Italian Specificities",
            "allOf": [{ "$ref": "#/components/schemas/ItalianSpecificities" }],
            "description": "Specificities for Italy"
          },
          "last_updated_on": {
            "title": "Last Updated On",
            "type": "string",
            "format": "date-time"
          },
          "outstanding_amount": {
            "title": "Outstanding Amount",
            "type": "number",
            "description": "Amount left to be paid"
          },
          "accounting_date": {
            "title": "Accounting Date",
            "type": "string",
            "description": "Accounting date",
            "format": "date"
          },
          "payment_method_id": {
            "title": "Payment Method Id",
            "type": "string",
            "description": "Technical id of the payment method in Chift"
          },
          "currency_exchange_rate": {
            "title": "Currency Exchange Rate",
            "type": "number",
            "description": "Indicates the exchange rate at the date of the invoice.",
            "default": 1
          }
        }
      },
      "InvoiceItemOutMonoAnalyticPlan": {
        "title": "InvoiceItemOutMonoAnalyticPlan",
        "required": [
          "invoice_type",
          "currency",
          "untaxed_amount",
          "tax_amount",
          "total",
          "invoice_date",
          "due_date",
          "partner_id",
          "journal_id",
          "lines"
        ],
        "type": "object",
        "properties": {
          "invoice_type": {
            "$ref": "#/components/schemas/backbone_common__models__accounting__common__InvoiceType"
          },
          "invoice_number": {
            "title": "Invoice Number",
            "type": "string",
            "description": "Number of the invoice. If left empty, will be automatically generated by the accounting system at creation."
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "Indicates the currency of the invoice (e.g. EUR)."
          },
          "untaxed_amount": { "title": "Untaxed Amount", "type": "number" },
          "tax_amount": { "title": "Tax Amount", "type": "number" },
          "total": { "title": "Total", "type": "number" },
          "reference": { "title": "Reference", "type": "string" },
          "payment_communication": {
            "title": "Payment Communication",
            "type": "string"
          },
          "customer_memo": { "title": "Customer Memo", "type": "string" },
          "id": { "title": "Id", "type": "string" },
          "invoice_date": {
            "title": "Invoice Date",
            "type": "string",
            "description": "Accounting invoice date. It is automatically set to '1970-01-01' if the value is empty in the accounting system.",
            "format": "date"
          },
          "due_date": {
            "title": "Due Date",
            "type": "string",
            "description": "Due date of the invoice. We use the value of the invoice date if the value is not available/empty in the accounting system.",
            "format": "date"
          },
          "partner_id": { "title": "Partner Id", "type": "string" },
          "journal_id": {
            "title": "Journal Id",
            "type": "string",
            "description": "Indicates the journal used in for the invoice. If the journal is not given, the journal will be automatically set if only one journal exists otherwise an error will be thrown."
          },
          "payments": {
            "title": "Payments",
            "type": "array",
            "items": { "$ref": "#/components/schemas/Payment" }
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/InvoiceStatusOut" }],
            "default": "posted"
          },
          "lines": {
            "title": "Lines",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceLineItemOutMonoAnalyticPlan"
            }
          }
        }
      },
      "InvoiceItemOutMultiAnalyticPlans": {
        "title": "InvoiceItemOutMultiAnalyticPlans",
        "required": [
          "invoice_type",
          "currency",
          "untaxed_amount",
          "tax_amount",
          "total",
          "invoice_date",
          "due_date",
          "partner_id",
          "journal_id",
          "lines"
        ],
        "type": "object",
        "properties": {
          "invoice_type": {
            "$ref": "#/components/schemas/backbone_common__models__accounting__common__InvoiceType"
          },
          "invoice_number": {
            "title": "Invoice Number",
            "type": "string",
            "description": "Number of the invoice. If left empty, will be automatically generated by the accounting system at creation."
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "Indicates the currency of the invoice (e.g. EUR)."
          },
          "untaxed_amount": { "title": "Untaxed Amount", "type": "number" },
          "tax_amount": { "title": "Tax Amount", "type": "number" },
          "total": { "title": "Total", "type": "number" },
          "reference": { "title": "Reference", "type": "string" },
          "payment_communication": {
            "title": "Payment Communication",
            "type": "string"
          },
          "customer_memo": { "title": "Customer Memo", "type": "string" },
          "id": { "title": "Id", "type": "string" },
          "invoice_date": {
            "title": "Invoice Date",
            "type": "string",
            "description": "Accounting invoice date. It is automatically set to '1970-01-01' if the value is empty in the accounting system.",
            "format": "date"
          },
          "due_date": {
            "title": "Due Date",
            "type": "string",
            "description": "Due date of the invoice. We use the value of the invoice date if the value is not available/empty in the accounting system.",
            "format": "date"
          },
          "partner_id": { "title": "Partner Id", "type": "string" },
          "journal_id": {
            "title": "Journal Id",
            "type": "string",
            "description": "Indicates the journal used in for the invoice. If the journal is not given, the journal will be automatically set if only one journal exists otherwise an error will be thrown."
          },
          "payments": {
            "title": "Payments",
            "type": "array",
            "items": { "$ref": "#/components/schemas/Payment" }
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/InvoiceStatusOut" }],
            "default": "posted"
          },
          "lines": {
            "title": "Lines",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceLineItemOutMultiAnalyticPlans"
            }
          }
        }
      },
      "InvoiceItemOutSingle": {
        "title": "InvoiceItemOutSingle",
        "required": [
          "id",
          "source_ref",
          "currency",
          "invoice_type",
          "status",
          "invoice_date",
          "tax_amount",
          "untaxed_amount",
          "total"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id in Chift"
          },
          "source_ref": {
            "title": "Source Ref",
            "allOf": [{ "$ref": "#/components/schemas/Ref" }],
            "description": "Technical id in the target software"
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "Currency matching target sofware name"
          },
          "invoice_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/backbone_common__models__invoicing__common__InvoiceType"
              }
            ],
            "description": "Invoice type"
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/InvoiceStatus" }],
            "description": "Status"
          },
          "invoice_date": {
            "title": "Invoice Date",
            "type": "string",
            "description": "Invoicing date",
            "format": "date"
          },
          "tax_amount": {
            "title": "Tax Amount",
            "type": "number",
            "description": "Taxes amount"
          },
          "untaxed_amount": {
            "title": "Untaxed Amount",
            "type": "number",
            "description": "Untaxed amount"
          },
          "total": {
            "title": "Total",
            "type": "number",
            "description": "Total amount incl. taxes"
          },
          "lines": {
            "title": "Lines",
            "type": "array",
            "items": { "$ref": "#/components/schemas/InvoiceLineItem" },
            "description": "Invoice lines",
            "default": []
          },
          "partner_id": {
            "title": "Partner Id",
            "type": "string",
            "description": "Technical id of the vendor/customer in Chift"
          },
          "invoice_number": {
            "title": "Invoice Number",
            "type": "string",
            "description": "Number/sequence"
          },
          "due_date": {
            "title": "Due Date",
            "type": "string",
            "description": "Due date",
            "format": "date"
          },
          "reference": {
            "title": "Reference",
            "type": "string",
            "description": "Reference"
          },
          "payment_communication": {
            "title": "Payment Communication",
            "type": "string",
            "description": "Payment communication"
          },
          "customer_memo": {
            "title": "Customer Memo",
            "type": "string",
            "description": "Customer note/memo"
          },
          "journal_ref": {
            "title": "Journal Ref",
            "allOf": [{ "$ref": "#/components/schemas/FieldRef" }],
            "description": "Journal"
          },
          "italian_specificities": {
            "title": "Italian Specificities",
            "allOf": [{ "$ref": "#/components/schemas/ItalianSpecificities" }],
            "description": "Specificities for Italy"
          },
          "last_updated_on": {
            "title": "Last Updated On",
            "type": "string",
            "format": "date-time"
          },
          "outstanding_amount": {
            "title": "Outstanding Amount",
            "type": "number",
            "description": "Amount left to be paid"
          },
          "accounting_date": {
            "title": "Accounting Date",
            "type": "string",
            "description": "Accounting date",
            "format": "date"
          },
          "payment_method_id": {
            "title": "Payment Method Id",
            "type": "string",
            "description": "Technical id of the payment method in Chift"
          },
          "currency_exchange_rate": {
            "title": "Currency Exchange Rate",
            "type": "number",
            "description": "Indicates the exchange rate at the date of the invoice.",
            "default": 1
          },
          "pdf": {
            "title": "Pdf",
            "type": "string",
            "description": "PDF document in base64"
          }
        },
        "description": "Invoice item returned in get 1 invoice"
      },
      "InvoiceLineItem": {
        "title": "InvoiceLineItem",
        "required": [
          "unit_price",
          "quantity",
          "tax_amount",
          "untaxed_amount",
          "total"
        ],
        "type": "object",
        "properties": {
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Line description"
          },
          "unit_price": {
            "title": "Unit Price",
            "type": "number",
            "description": "Unit price excl. taxes"
          },
          "quantity": {
            "title": "Quantity",
            "type": "number",
            "description": "Quantity"
          },
          "discount_amount": {
            "title": "Discount Amount",
            "type": "number",
            "description": "Line discount amount excl. taxes, (unit_price * quantity) - discount_amount = untaxed_amount",
            "default": 0.0
          },
          "tax_amount": {
            "title": "Tax Amount",
            "type": "number",
            "description": "Line total taxes amount"
          },
          "untaxed_amount": {
            "title": "Untaxed Amount",
            "type": "number",
            "description": "Line total untaxed amount"
          },
          "total": {
            "title": "Total",
            "type": "number",
            "description": "Line total amount incl. taxes, total = tax_amount + untaxed_amount"
          },
          "tax_rate": {
            "title": "Tax Rate",
            "type": "number",
            "description": "Tax rate (e.g. 21.0)"
          },
          "account_number": {
            "title": "Account Number",
            "type": "string",
            "description": "Number of the accounting account used (e.g. 701000)"
          },
          "tax_id": {
            "title": "Tax Id",
            "type": "string",
            "description": "Technical id of the tax in Chift"
          },
          "tax_exemption_reason": {
            "title": "Tax Exemption Reason",
            "type": "string",
            "description": "Tax exemption reason"
          },
          "unit_of_measure": {
            "title": "Unit Of Measure",
            "type": "string",
            "description": "Unit of measure matching target sofware name"
          },
          "product_id": {
            "title": "Product Id",
            "type": "string",
            "description": "Technical id of the product in Chift"
          },
          "product_code": {
            "title": "Product Code",
            "type": "string",
            "description": "Product reference"
          },
          "product_name": {
            "title": "Product Name",
            "type": "string",
            "description": "Product name"
          }
        }
      },
      "InvoiceLineItemInMonoAnalyticPlan": {
        "title": "InvoiceLineItemInMonoAnalyticPlan",
        "required": [
          "description",
          "unit_price",
          "quantity",
          "untaxed_amount",
          "tax_rate",
          "tax_amount",
          "total",
          "account_number",
          "tax_code"
        ],
        "type": "object",
        "properties": {
          "line_number": {
            "title": "Line Number",
            "type": "integer",
            "default": 1
          },
          "description": { "title": "Description", "type": "string" },
          "unit_price": { "title": "Unit Price", "type": "number" },
          "unit_of_measure": {
            "title": "Unit Of Measure",
            "type": "string",
            "description": "A list of default units can be used for which an advanced mapping has been done (units: 'hour', 'day', 'cm', 'm2', 'm3', 'm', 'km', 'mile', 'g', 'kg', 'ton', 'box', 'pallet', 'roll', 'liter', 'unit'). Custom units of measure must have an identical name in the target software."
          },
          "quantity": { "title": "Quantity", "type": "number" },
          "untaxed_amount": { "title": "Untaxed Amount", "type": "number" },
          "tax_rate": {
            "title": "Tax Rate",
            "type": "number",
            "description": "Indicates the tax rate used for the line (e.g. 21.0)."
          },
          "tax_amount": { "title": "Tax Amount", "type": "number" },
          "total": { "title": "Total", "type": "number" },
          "account_number": {
            "title": "Account Number",
            "minLength": 1,
            "type": "string",
            "description": "Indicates the number of the account used for the line (e.g. 701000)."
          },
          "tax_code": {
            "title": "Tax Code",
            "minLength": 1,
            "type": "string",
            "description": "Indicates the tax code used for the line. This is the ID of the Tax Code in the accounting software."
          },
          "analytic_account": { "title": "Analytic Account", "type": "string" }
        }
      },
      "InvoiceLineItemInMultiAnalyticPlans": {
        "title": "InvoiceLineItemInMultiAnalyticPlans",
        "required": [
          "description",
          "unit_price",
          "quantity",
          "untaxed_amount",
          "tax_rate",
          "tax_amount",
          "total",
          "account_number",
          "tax_code"
        ],
        "type": "object",
        "properties": {
          "line_number": {
            "title": "Line Number",
            "type": "integer",
            "default": 1
          },
          "description": { "title": "Description", "type": "string" },
          "unit_price": { "title": "Unit Price", "type": "number" },
          "unit_of_measure": {
            "title": "Unit Of Measure",
            "type": "string",
            "description": "A list of default units can be used for which an advanced mapping has been done (units: 'hour', 'day', 'cm', 'm2', 'm3', 'm', 'km', 'mile', 'g', 'kg', 'ton', 'box', 'pallet', 'roll', 'liter', 'unit'). Custom units of measure must have an identical name in the target software."
          },
          "quantity": { "title": "Quantity", "type": "number" },
          "untaxed_amount": { "title": "Untaxed Amount", "type": "number" },
          "tax_rate": {
            "title": "Tax Rate",
            "type": "number",
            "description": "Indicates the tax rate used for the line (e.g. 21.0)."
          },
          "tax_amount": { "title": "Tax Amount", "type": "number" },
          "total": { "title": "Total", "type": "number" },
          "account_number": {
            "title": "Account Number",
            "minLength": 1,
            "type": "string",
            "description": "Indicates the number of the account used for the line (e.g. 701000)."
          },
          "tax_code": {
            "title": "Tax Code",
            "minLength": 1,
            "type": "string",
            "description": "Indicates the tax code used for the line. This is the ID of the Tax Code in the accounting software."
          },
          "analytic_distribution": {
            "title": "Analytic Distribution",
            "type": "array",
            "items": { "$ref": "#/components/schemas/AnalyticDistribution" },
            "default": []
          }
        }
      },
      "InvoiceLineItemOutMonoAnalyticPlan": {
        "title": "InvoiceLineItemOutMonoAnalyticPlan",
        "required": [
          "description",
          "unit_price",
          "quantity",
          "untaxed_amount",
          "tax_rate",
          "tax_amount",
          "total",
          "account_number"
        ],
        "type": "object",
        "properties": {
          "line_number": {
            "title": "Line Number",
            "type": "integer",
            "default": 1
          },
          "description": { "title": "Description", "type": "string" },
          "unit_price": { "title": "Unit Price", "type": "number" },
          "unit_of_measure": {
            "title": "Unit Of Measure",
            "type": "string",
            "description": "A list of default units can be used for which an advanced mapping has been done (units: 'hour', 'day', 'cm', 'm2', 'm3', 'm', 'km', 'mile', 'g', 'kg', 'ton', 'box', 'pallet', 'roll', 'liter', 'unit'). Custom units of measure must have an identical name in the target software."
          },
          "quantity": { "title": "Quantity", "type": "number" },
          "untaxed_amount": { "title": "Untaxed Amount", "type": "number" },
          "tax_rate": {
            "title": "Tax Rate",
            "type": "number",
            "description": "Indicates the tax rate used for the line (e.g. 21.0)."
          },
          "tax_amount": { "title": "Tax Amount", "type": "number" },
          "total": { "title": "Total", "type": "number" },
          "account_number": {
            "title": "Account Number",
            "type": "string",
            "description": "Indicates the number of the account used for the line (e.g. 701000)."
          },
          "tax_code": {
            "title": "Tax Code",
            "type": "string",
            "description": "Indicates the tax code used for the line. This is the ID of the Tax Code in the accounting software."
          },
          "analytic_account": { "title": "Analytic Account", "type": "string" }
        }
      },
      "InvoiceLineItemOutMultiAnalyticPlans": {
        "title": "InvoiceLineItemOutMultiAnalyticPlans",
        "required": [
          "description",
          "unit_price",
          "quantity",
          "untaxed_amount",
          "tax_rate",
          "tax_amount",
          "total",
          "account_number"
        ],
        "type": "object",
        "properties": {
          "line_number": {
            "title": "Line Number",
            "type": "integer",
            "default": 1
          },
          "description": { "title": "Description", "type": "string" },
          "unit_price": { "title": "Unit Price", "type": "number" },
          "unit_of_measure": {
            "title": "Unit Of Measure",
            "type": "string",
            "description": "A list of default units can be used for which an advanced mapping has been done (units: 'hour', 'day', 'cm', 'm2', 'm3', 'm', 'km', 'mile', 'g', 'kg', 'ton', 'box', 'pallet', 'roll', 'liter', 'unit'). Custom units of measure must have an identical name in the target software."
          },
          "quantity": { "title": "Quantity", "type": "number" },
          "untaxed_amount": { "title": "Untaxed Amount", "type": "number" },
          "tax_rate": {
            "title": "Tax Rate",
            "type": "number",
            "description": "Indicates the tax rate used for the line (e.g. 21.0)."
          },
          "tax_amount": { "title": "Tax Amount", "type": "number" },
          "total": { "title": "Total", "type": "number" },
          "account_number": {
            "title": "Account Number",
            "type": "string",
            "description": "Indicates the number of the account used for the line (e.g. 701000)."
          },
          "tax_code": {
            "title": "Tax Code",
            "type": "string",
            "description": "Indicates the tax code used for the line. This is the ID of the Tax Code in the accounting software."
          },
          "analytic_distribution": {
            "title": "Analytic Distribution",
            "type": "array",
            "items": { "$ref": "#/components/schemas/AnalyticDistribution" },
            "default": []
          }
        }
      },
      "InvoicePartnerItem": {
        "title": "InvoicePartnerItem",
        "required": ["id", "source_ref", "type"],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id in Chift"
          },
          "source_ref": {
            "title": "Source Ref",
            "allOf": [{ "$ref": "#/components/schemas/Ref" }],
            "description": "Technical id in the target software"
          },
          "type": { "$ref": "#/components/schemas/PartnerType" },
          "address": { "$ref": "#/components/schemas/AddressItem" },
          "first_name": { "title": "First Name", "type": "string" },
          "last_name": { "title": "Last Name", "type": "string" },
          "company_name": { "title": "Company Name", "type": "string" }
        }
      },
      "InvoiceStatus": {
        "title": "InvoiceStatus",
        "enum": ["cancelled", "draft", "posted", "paid"],
        "type": "string",
        "description": "An enumeration."
      },
      "InvoiceStatusIn": {
        "title": "InvoiceStatusIn",
        "enum": ["draft", "posted"],
        "type": "string",
        "description": "An enumeration."
      },
      "InvoiceStatusOut": {
        "title": "InvoiceStatusOut",
        "enum": ["cancelled", "draft", "posted", "paid"],
        "type": "string",
        "description": "An enumeration."
      },
      "InvoicingPaymentItem": {
        "title": "InvoicingPaymentItem",
        "required": [
          "id",
          "source_ref",
          "status",
          "description",
          "amount",
          "currency",
          "payment_date",
          "partner_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id in Chift"
          },
          "source_ref": {
            "title": "Source Ref",
            "allOf": [{ "$ref": "#/components/schemas/Ref" }],
            "description": "Technical id in the target software"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/backbone_common__models__payment__common__PaymentStatus"
              }
            ],
            "description": "Payment status"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Description"
          },
          "amount": {
            "title": "Amount",
            "type": "number",
            "description": "Amount"
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "Currency"
          },
          "payment_date": {
            "title": "Payment Date",
            "type": "string",
            "description": "Date of creation",
            "format": "date-time"
          },
          "partner_id": {
            "title": "Partner Id",
            "type": "string",
            "description": "Partner ID"
          },
          "payment_method_id": {
            "title": "Payment Method Id",
            "type": "string",
            "description": "Technical id of the payment method in Chift"
          },
          "payment_method_name": {
            "title": "Payment Method Name",
            "type": "string",
            "description": "Payment method name"
          },
          "invoice_id": {
            "title": "Invoice Id",
            "type": "string",
            "description": "Technical id of the invoice in Chift"
          },
          "invoice_number": {
            "title": "Invoice Number",
            "type": "string",
            "description": "Invoice number"
          }
        }
      },
      "InvoicingPaymentMethodItem": {
        "title": "InvoicingPaymentMethodItem",
        "required": ["id", "source_ref", "name"],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id in Chift"
          },
          "source_ref": {
            "title": "Source Ref",
            "allOf": [{ "$ref": "#/components/schemas/Ref" }],
            "description": "Technical id in the target software"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Payment method name"
          }
        }
      },
      "InvoicingVatCode": {
        "title": "InvoicingVatCode",
        "required": ["id", "source_ref", "label", "rate", "type"],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id in Chift"
          },
          "source_ref": {
            "title": "Source Ref",
            "allOf": [{ "$ref": "#/components/schemas/Ref" }],
            "description": "Technical id in the target software"
          },
          "label": {
            "title": "Label",
            "type": "string",
            "description": "Label"
          },
          "rate": {
            "title": "Rate",
            "type": "number",
            "description": "Tax rate (e.g. 21.0)"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/backbone_common__models__invoicing__common__VatCodeType"
              }
            ],
            "description": "Type"
          },
          "code": { "title": "Code", "type": "string", "description": "Code" },
          "scope": {
            "allOf": [
              {
                "$ref": "#/components/schemas/backbone_common__models__invoicing__common__VatCodeScope"
              }
            ],
            "description": "Scope",
            "default": "unknown"
          }
        }
      },
      "ItalianSpecificities": {
        "title": "ItalianSpecificities",
        "type": "object",
        "properties": {
          "stamp_duty_amount": {
            "title": "Stamp Duty Amount",
            "type": "number",
            "description": "Documentary stamp tax (specific to Italy)"
          },
          "withholding_tax": {
            "title": "Withholding Tax",
            "allOf": [{ "$ref": "#/components/schemas/WithholdingTax" }],
            "description": "Withholding tax (specific to Italy)"
          },
          "welfare_fund": {
            "title": "Welfare Fund",
            "allOf": [{ "$ref": "#/components/schemas/WelfareFund" }],
            "description": "Welfare fund (specific to Italy)"
          },
          "payment_reporting": {
            "title": "Payment Reporting",
            "allOf": [{ "$ref": "#/components/schemas/PaymentReporting" }],
            "description": "Payment reporting (specific to Italy)"
          }
        }
      },
      "Journal": {
        "title": "Journal",
        "required": ["id", "name", "journal_type"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "string" },
          "code": { "title": "Code", "type": "string" },
          "name": { "title": "Name", "type": "string" },
          "journal_type": { "$ref": "#/components/schemas/JournalType" },
          "counterpart_account": {
            "title": "Counterpart Account",
            "type": "string"
          },
          "next_document_numbers": {
            "title": "Next Document Numbers",
            "type": "array",
            "items": { "$ref": "#/components/schemas/NextDocumentNumber" },
            "default": []
          }
        }
      },
      "JournalEntryIn": {
        "title": "JournalEntryIn",
        "required": ["journal_id", "name", "date", "items"],
        "type": "object",
        "properties": {
          "reference": { "title": "Reference", "type": "string" },
          "due_date": {
            "title": "Due Date",
            "type": "string",
            "format": "date"
          },
          "journal_id": { "title": "Journal Id", "type": "string" },
          "name": { "title": "Name", "type": "string" },
          "date": { "title": "Date", "type": "string", "format": "date" },
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/JournalItemIn" }
          },
          "pdf": {
            "title": "Pdf",
            "type": "string",
            "description": "Base 64 string representing the PDF attached to the item."
          }
        }
      },
      "JournalEntryMonoAnalyticPlan": {
        "title": "JournalEntryMonoAnalyticPlan",
        "required": ["journal_id", "journal_name", "id"],
        "type": "object",
        "properties": {
          "reference": { "title": "Reference", "type": "string" },
          "due_date": {
            "title": "Due Date",
            "type": "string",
            "format": "date"
          },
          "journal_id": { "title": "Journal Id", "type": "string" },
          "name": { "title": "Name", "type": "string" },
          "journal_name": { "title": "Journal Name", "type": "string" },
          "date": {
            "title": "Date",
            "type": "string",
            "description": "Accounting date of the journal entry. It is automatically set to '1970-01-01' if the value is not available/empty in the accounting system.",
            "format": "date",
            "default": "1970-01-01"
          },
          "posted": { "title": "Posted", "type": "boolean", "default": false },
          "id": { "title": "Id", "type": "string" },
          "items": {
            "title": "Items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JournalItemMonoAnalyticPlan"
            },
            "default": []
          }
        }
      },
      "JournalEntryMultiAnalyticPlan": {
        "title": "JournalEntryMultiAnalyticPlan",
        "required": ["journal_id", "journal_name", "id"],
        "type": "object",
        "properties": {
          "reference": { "title": "Reference", "type": "string" },
          "due_date": {
            "title": "Due Date",
            "type": "string",
            "format": "date"
          },
          "journal_id": { "title": "Journal Id", "type": "string" },
          "name": { "title": "Name", "type": "string" },
          "journal_name": { "title": "Journal Name", "type": "string" },
          "date": {
            "title": "Date",
            "type": "string",
            "description": "Accounting date of the journal entry. It is automatically set to '1970-01-01' if the value is not available/empty in the accounting system.",
            "format": "date",
            "default": "1970-01-01"
          },
          "posted": { "title": "Posted", "type": "boolean", "default": false },
          "id": { "title": "Id", "type": "string" },
          "items": {
            "title": "Items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JournalItemMultiAnalyticPlan"
            },
            "default": []
          }
        }
      },
      "JournalItemIn": {
        "title": "JournalItemIn",
        "required": ["account_number", "debit", "credit", "currency"],
        "type": "object",
        "properties": {
          "account_number": {
            "title": "Account Number",
            "minLength": 1,
            "type": "string"
          },
          "partner_id": { "title": "Partner Id", "type": "string" },
          "description": { "title": "Description", "type": "string" },
          "debit": { "title": "Debit", "type": "number" },
          "credit": { "title": "Credit", "type": "number" },
          "currency": { "title": "Currency", "minLength": 1, "type": "string" },
          "currency_exchange_rate": {
            "title": "Currency Exchange Rate",
            "type": "number",
            "default": 1
          },
          "analytic_distribution": {
            "title": "Analytic Distribution",
            "type": "array",
            "items": { "$ref": "#/components/schemas/AnalyticDistribution" },
            "default": []
          }
        }
      },
      "JournalItemMonoAnalyticPlan": {
        "title": "JournalItemMonoAnalyticPlan",
        "required": [
          "account_number",
          "debit",
          "credit",
          "currency",
          "id",
          "account_name"
        ],
        "type": "object",
        "properties": {
          "account_number": {
            "title": "Account Number",
            "minLength": 1,
            "type": "string"
          },
          "partner_id": { "title": "Partner Id", "type": "string" },
          "description": { "title": "Description", "type": "string" },
          "debit": { "title": "Debit", "type": "number" },
          "credit": { "title": "Credit", "type": "number" },
          "currency": { "title": "Currency", "minLength": 1, "type": "string" },
          "currency_exchange_rate": {
            "title": "Currency Exchange Rate",
            "type": "number",
            "default": 1
          },
          "id": { "title": "Id", "type": "string" },
          "partner_name": { "title": "Partner Name", "type": "string" },
          "account_name": { "title": "Account Name", "type": "string" },
          "matching_numbers": {
            "title": "Matching Numbers",
            "type": "array",
            "items": { "type": "string" },
            "default": []
          },
          "analytic_account": { "title": "Analytic Account", "type": "string" },
          "analytic_account_name": {
            "title": "Analytic Account Name",
            "type": "string"
          }
        }
      },
      "JournalItemMultiAnalyticPlan": {
        "title": "JournalItemMultiAnalyticPlan",
        "required": [
          "account_number",
          "debit",
          "credit",
          "currency",
          "id",
          "account_name"
        ],
        "type": "object",
        "properties": {
          "account_number": {
            "title": "Account Number",
            "minLength": 1,
            "type": "string"
          },
          "partner_id": { "title": "Partner Id", "type": "string" },
          "description": { "title": "Description", "type": "string" },
          "debit": { "title": "Debit", "type": "number" },
          "credit": { "title": "Credit", "type": "number" },
          "currency": { "title": "Currency", "minLength": 1, "type": "string" },
          "currency_exchange_rate": {
            "title": "Currency Exchange Rate",
            "type": "number",
            "default": 1
          },
          "id": { "title": "Id", "type": "string" },
          "partner_name": { "title": "Partner Name", "type": "string" },
          "account_name": { "title": "Account Name", "type": "string" },
          "matching_numbers": {
            "title": "Matching Numbers",
            "type": "array",
            "items": { "type": "string" },
            "default": []
          },
          "analytic_distribution": {
            "title": "Analytic Distribution",
            "type": "array",
            "items": { "$ref": "#/components/schemas/AnalyticDistribution" },
            "default": []
          }
        }
      },
      "JournalType": {
        "title": "JournalType",
        "enum": [
          "customer_invoice",
          "customer_refund",
          "supplier_invoice",
          "supplier_refund",
          "financial_operation",
          "miscellaneous_operation",
          "unknown"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "LinkItem": {
        "title": "LinkItem",
        "required": ["url"],
        "type": "object",
        "properties": { "url": { "title": "Url", "type": "string" } }
      },
      "LinkSyncItem": {
        "title": "LinkSyncItem",
        "required": ["url"],
        "type": "object",
        "properties": { "url": { "title": "Url", "type": "string" } }
      },
      "LocalAgentInfo": {
        "title": "LocalAgentInfo",
        "required": ["status"],
        "type": "object",
        "properties": {
          "status": { "$ref": "#/components/schemas/LocalAgentStatus" }
        }
      },
      "LocalAgentStatus": {
        "title": "LocalAgentStatus",
        "enum": ["up", "down"],
        "description": "An enumeration."
      },
      "LogoImage": {
        "title": "LogoImage",
        "required": ["integrationid", "data"],
        "type": "object",
        "properties": {
          "integrationid": { "title": "Integrationid", "type": "string" },
          "data": { "title": "Data", "type": "string" }
        }
      },
      "MatchingIn": {
        "title": "MatchingIn",
        "required": ["entries", "partner_id"],
        "type": "object",
        "properties": {
          "entries": {
            "title": "Entries",
            "type": "array",
            "items": { "type": "string" }
          },
          "partner_id": { "title": "Partner Id", "type": "string" }
        }
      },
      "MatchingOut": {
        "title": "MatchingOut",
        "required": ["matching_number", "balance"],
        "type": "object",
        "properties": {
          "matching_number": { "title": "Matching Number", "type": "string" },
          "balance": { "title": "Balance", "type": "number" }
        }
      },
      "MiscellaneousOperationIn": {
        "title": "MiscellaneousOperationIn",
        "required": ["currency", "lines", "operation_date"],
        "type": "object",
        "properties": {
          "operation_number": { "title": "Operation Number", "type": "string" },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "Indicates the currency of the operation (e.g. EUR)."
          },
          "currency_exchange_rate": {
            "title": "Currency Exchange Rate",
            "type": "number",
            "description": "Indicates the exchange rate at the date of the operation. Must be filled in when creating the operation in another currency from the default currency of the accounting system.",
            "default": 1
          },
          "lines": {
            "title": "Lines",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MiscellaneousOperationLine"
            }
          },
          "operation_date": {
            "title": "Operation Date",
            "type": "string",
            "format": "date"
          },
          "journal_id": {
            "title": "Journal Id",
            "type": "string",
            "description": "Indicates the journal used in for the operation. If the journal is not given, the journal will be automatically set if only one journal exists otherwise an error will be thrown."
          },
          "status": {
            "allOf": [
              { "$ref": "#/components/schemas/MiscellaneousOperationStatusIn" }
            ],
            "default": "posted"
          }
        }
      },
      "MiscellaneousOperationLine": {
        "title": "MiscellaneousOperationLine",
        "required": ["amount", "type", "account_number"],
        "type": "object",
        "properties": {
          "line_number": {
            "title": "Line Number",
            "type": "integer",
            "default": 1
          },
          "description": { "title": "Description", "type": "string" },
          "amount": {
            "title": "Amount",
            "type": "number",
            "description": "Positive for Credit and negative for Debit."
          },
          "type": {
            "$ref": "#/components/schemas/MiscellaneousOperationLineType"
          },
          "account_number": { "title": "Account Number", "type": "string" },
          "partner_id": {
            "title": "Partner Id",
            "type": "string",
            "description": "Must be filled in it is a 'customer_account' or 'supplier_account' line type."
          },
          "analytic_account": { "title": "Analytic Account", "type": "string" }
        }
      },
      "MiscellaneousOperationLineType": {
        "title": "MiscellaneousOperationLineType",
        "enum": ["customer_account", "supplier_account", "general_account"],
        "type": "string",
        "description": "An enumeration."
      },
      "MiscellaneousOperationOut": {
        "title": "MiscellaneousOperationOut",
        "required": ["currency", "lines", "journal_id", "status", "id"],
        "type": "object",
        "properties": {
          "operation_number": { "title": "Operation Number", "type": "string" },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "Indicates the currency of the operation (e.g. EUR)."
          },
          "currency_exchange_rate": {
            "title": "Currency Exchange Rate",
            "type": "number",
            "description": "Indicates the exchange rate at the date of the operation. Must be filled in when creating the operation in another currency from the default currency of the accounting system.",
            "default": 1
          },
          "lines": {
            "title": "Lines",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MiscellaneousOperationLine"
            }
          },
          "operation_date": {
            "title": "Operation Date",
            "type": "string",
            "description": "Accounting date of the miscellaneous operation. It is automatically set to '1970-01-01' if the value is not available/empty in the accounting system.",
            "format": "date",
            "default": "1970-01-01"
          },
          "journal_id": {
            "title": "Journal Id",
            "type": "string",
            "description": "Indicates the journal used in for the operation."
          },
          "status": {
            "$ref": "#/components/schemas/MiscellaneousOperationStatusOut"
          },
          "id": { "title": "Id", "type": "string" }
        }
      },
      "MiscellaneousOperationStatusIn": {
        "title": "MiscellaneousOperationStatusIn",
        "enum": ["draft", "posted"],
        "type": "string",
        "description": "An enumeration."
      },
      "MiscellaneousOperationStatusOut": {
        "title": "MiscellaneousOperationStatusOut",
        "enum": ["cancelled", "draft", "posted", "matched"],
        "type": "string",
        "description": "An enumeration."
      },
      "MultipleMatchingIn": {
        "title": "MultipleMatchingIn",
        "required": ["matchings"],
        "type": "object",
        "properties": {
          "matchings": {
            "title": "Matchings",
            "type": "array",
            "items": { "$ref": "#/components/schemas/MatchingIn" }
          }
        }
      },
      "MultipleMatchingOut": {
        "title": "MultipleMatchingOut",
        "required": ["processed"],
        "type": "object",
        "properties": {
          "matching_number": { "title": "Matching Number", "type": "string" },
          "processed": { "title": "Processed", "type": "boolean" },
          "error_msg": { "title": "Error Msg", "type": "object" }
        }
      },
      "NextDocumentNumber": {
        "title": "NextDocumentNumber",
        "type": "object",
        "properties": {
          "bookyear_name": { "title": "Bookyear Name", "type": "string" },
          "next_document_number": {
            "title": "Next Document Number",
            "type": "string"
          },
          "start_date": {
            "title": "Start Date",
            "type": "string",
            "format": "date"
          },
          "end_date": {
            "title": "End Date",
            "type": "string",
            "format": "date"
          }
        }
      },
      "NlPaymentTermsSplit": {
        "title": "NlPaymentTermsSplit",
        "required": ["g_account", "n_account"],
        "type": "object",
        "properties": {
          "g_account": {
            "$ref": "#/components/schemas/PaymentTermAccountInfo"
          },
          "n_account": { "$ref": "#/components/schemas/PaymentTermAccountInfo" }
        }
      },
      "OpportunityItem": {
        "title": "OpportunityItem",
        "required": [
          "id",
          "source_ref",
          "name",
          "total",
          "probability",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id in Chift"
          },
          "source_ref": {
            "title": "Source Ref",
            "allOf": [{ "$ref": "#/components/schemas/Ref" }],
            "description": "Technical id in the target software"
          },
          "name": { "title": "Name", "type": "string", "description": "Name" },
          "total": {
            "title": "Total",
            "type": "number",
            "description": "Total"
          },
          "probability": {
            "title": "Probability",
            "type": "number",
            "description": "Probability of success"
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/OpportunityStatus" }],
            "description": "Status"
          },
          "partner_id": {
            "title": "Partner Id",
            "type": "string",
            "description": "Technical id of the customer in Chift"
          },
          "comment": {
            "title": "Comment",
            "type": "string",
            "description": "Comment"
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "Currency matching target sofware name"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Description"
          },
          "pipe_status": {
            "title": "Pipe Status",
            "type": "string",
            "description": "Current stage in pipeline"
          },
          "pipe_name": {
            "title": "Pipe Name",
            "type": "string",
            "description": "Pipeline name"
          },
          "created_date": {
            "title": "Created Date",
            "type": "string",
            "description": "Date creation",
            "format": "date"
          },
          "due_date": {
            "title": "Due Date",
            "type": "string",
            "description": "Due Date",
            "format": "date"
          },
          "end_date": {
            "title": "End Date",
            "type": "string",
            "description": "End Date",
            "format": "date"
          },
          "is_won": {
            "title": "Is Won",
            "type": "boolean",
            "description": "Is won?"
          },
          "owner_ref": {
            "title": "Owner Ref",
            "allOf": [{ "$ref": "#/components/schemas/FieldRef" }],
            "description": "Employee/User"
          }
        }
      },
      "OpportunityStatus": {
        "title": "OpportunityStatus",
        "enum": ["open", "won", "lost", "cancelled", "closed"],
        "type": "string",
        "description": "An enumeration."
      },
      "OrderCustomerItem": {
        "title": "OrderCustomerItem",
        "required": ["email"],
        "type": "object",
        "properties": {
          "first_name": { "title": "First Name", "type": "string" },
          "last_name": { "title": "Last Name", "type": "string" },
          "phone": { "title": "Phone", "type": "string" },
          "internal_notes": { "title": "Internal Notes", "type": "string" },
          "email": { "title": "Email", "type": "string" }
        }
      },
      "OrderCustomerItemOut": {
        "title": "OrderCustomerItemOut",
        "required": ["id"],
        "type": "object",
        "properties": {
          "first_name": { "title": "First Name", "type": "string" },
          "last_name": { "title": "Last Name", "type": "string" },
          "phone": { "title": "Phone", "type": "string" },
          "internal_notes": { "title": "Internal Notes", "type": "string" },
          "email": { "title": "Email", "type": "string" },
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id of the customer in Chift"
          }
        }
      },
      "OrderItemIn": {
        "title": "OrderItemIn",
        "required": [
          "customer",
          "billing_address",
          "shipping_address",
          "currency",
          "lines"
        ],
        "type": "object",
        "properties": {
          "customer": { "$ref": "#/components/schemas/OrderCustomerItem" },
          "billing_address": {
            "$ref": "#/components/schemas/backbone_common__models__commerce__common__AddressItemIn"
          },
          "shipping_address": {
            "$ref": "#/components/schemas/backbone_common__models__commerce__common__AddressItemIn"
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "Indicates the currency of the order (e.g. EUR)."
          },
          "note": { "title": "Note", "type": "string" },
          "lines": {
            "title": "Lines",
            "type": "array",
            "items": { "$ref": "#/components/schemas/OrderLineItemIn" }
          },
          "payment_method": {
            "title": "Payment Method",
            "type": "string",
            "description": "If filled in the order will be marked as paid and processed by this payment method."
          }
        }
      },
      "OrderItemOut": {
        "title": "OrderItemOut",
        "required": [
          "id",
          "source_ref",
          "status",
          "discount_amount",
          "untaxed_amount_without_fees",
          "tax_amount_without_fees",
          "total_without_fees",
          "current_untaxed_amount",
          "current_tax_amount",
          "current_total",
          "untaxed_amount",
          "tax_amount",
          "total",
          "currency",
          "lines"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id in Chift"
          },
          "source_ref": {
            "title": "Source Ref",
            "allOf": [{ "$ref": "#/components/schemas/Ref" }],
            "description": "Technical id in the target software"
          },
          "order_number": { "title": "Order Number", "type": "string" },
          "customer": { "$ref": "#/components/schemas/OrderCustomerItemOut" },
          "billing_address": {
            "$ref": "#/components/schemas/backbone_common__models__commerce__common__AddressItemOut"
          },
          "shipping_address": {
            "$ref": "#/components/schemas/backbone_common__models__commerce__common__AddressItemOut"
          },
          "created_on": {
            "title": "Created On",
            "type": "string",
            "format": "date-time"
          },
          "last_updated_on": {
            "title": "Last Updated On",
            "type": "string",
            "format": "date-time"
          },
          "confirmed_on": {
            "title": "Confirmed On",
            "type": "string",
            "format": "date-time"
          },
          "delivery_date": {
            "title": "Delivery Date",
            "type": "string",
            "format": "date-time"
          },
          "cancelled_on": {
            "title": "Cancelled On",
            "type": "string",
            "format": "date-time"
          },
          "status": { "$ref": "#/components/schemas/OrderStatus" },
          "discount_amount": { "title": "Discount Amount", "type": "number" },
          "untaxed_amount_without_fees": {
            "title": "Untaxed Amount Without Fees",
            "type": "number",
            "description": "Untaxed amount without fees (e.g. shipping) but with discout. Refunds and returns are not included."
          },
          "tax_amount_without_fees": {
            "title": "Tax Amount Without Fees",
            "type": "number",
            "description": "Total taxes applied to the order without taxes linked to fees (e.g. shipping)."
          },
          "total_without_fees": {
            "title": "Total Without Fees",
            "type": "number",
            "description": "Total of the order without fees (e.g. shipping) but with discount. Refunds and returns are not included."
          },
          "current_untaxed_amount": {
            "title": "Current Untaxed Amount",
            "type": "number",
            "description": "Untaxed amount with discout and any kind of fee (e.g. shipping). After returns, removes and returns."
          },
          "current_tax_amount": {
            "title": "Current Tax Amount",
            "type": "number",
            "description": "Total taxes applied to the order. After returns, removes and returns."
          },
          "current_total": {
            "title": "Current Total",
            "type": "number",
            "description": "Current total of the order with discount. After returns, removes and returns."
          },
          "untaxed_amount": {
            "title": "Untaxed Amount",
            "type": "number",
            "description": "Untaxed amount with discout and any kind of fee (e.g. shipping). Refunds and returns are not included."
          },
          "tax_amount": {
            "title": "Tax Amount",
            "type": "number",
            "description": "Total taxes applied to the order. Refunds and returns are not included."
          },
          "total": {
            "title": "Total",
            "type": "number",
            "description": "Total of the order with discount. Refunds and returns are not included."
          },
          "refunded_amount": {
            "title": "Refunded Amount",
            "type": "number",
            "default": 0
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "Indicates the currency of the order (e.g. EUR)."
          },
          "note": { "title": "Note", "type": "string" },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": { "type": "string" },
            "default": []
          },
          "lines": {
            "title": "Lines",
            "type": "array",
            "items": { "$ref": "#/components/schemas/OrderLineItemOut" }
          },
          "other_fees": {
            "title": "Other Fees",
            "type": "array",
            "items": { "$ref": "#/components/schemas/FeesItem" },
            "default": []
          },
          "payment_method_id": {
            "title": "Payment Method Id",
            "type": "string",
            "description": "Technical id of the payment method in the eCommerce"
          },
          "transactions": {
            "title": "Transactions",
            "type": "array",
            "items": { "$ref": "#/components/schemas/OrderTransactions" },
            "default": []
          },
          "payment_methods": {
            "title": "Payment Methods",
            "type": "array",
            "items": { "$ref": "#/components/schemas/OrderPaymentMethods" },
            "default": []
          },
          "detailed_refunds": {
            "title": "Detailed Refunds",
            "type": "array",
            "items": { "$ref": "#/components/schemas/OrderRefundItem" }
          },
          "returns": {
            "title": "Returns",
            "type": "array",
            "items": { "$ref": "#/components/schemas/OrderReturnItem" },
            "default": []
          }
        }
      },
      "OrderLineItemIn": {
        "title": "OrderLineItemIn",
        "required": ["variant_id", "quantity", "tax_rate", "unit_price"],
        "type": "object",
        "properties": {
          "variant_id": {
            "title": "Variant Id",
            "type": "string",
            "description": "Technical id of the product variant in Chift"
          },
          "quantity": { "title": "Quantity", "type": "integer" },
          "tax_rate": {
            "title": "Tax Rate",
            "type": "number",
            "description": "Indicates the tax rate used for the line (e.g. 21.0)."
          },
          "unit_price": {
            "title": "Unit Price",
            "type": "number",
            "description": "Unit price of the product without taxes."
          }
        }
      },
      "OrderLineItemOut": {
        "title": "OrderLineItemOut",
        "required": [
          "id",
          "source_ref",
          "quantity",
          "current_quantity",
          "unit_price",
          "description",
          "tax_rate",
          "untaxed_amount",
          "tax_amount",
          "total"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id in Chift"
          },
          "source_ref": {
            "title": "Source Ref",
            "allOf": [{ "$ref": "#/components/schemas/Ref" }],
            "description": "Technical id in the target software"
          },
          "created_on": {
            "title": "Created On",
            "type": "string",
            "format": "date-time"
          },
          "variant": {
            "title": "Variant",
            "allOf": [
              { "$ref": "#/components/schemas/OrderLineProductVariantItem" }
            ],
            "description": "Product variant"
          },
          "quantity": { "title": "Quantity", "type": "integer" },
          "current_quantity": {
            "title": "Current Quantity",
            "type": "integer",
            "description": "Quantity without refunds and returns."
          },
          "unit_price": {
            "title": "Unit Price",
            "type": "number",
            "description": "Unit price of the product without taxes."
          },
          "description": { "title": "Description", "type": "string" },
          "tax_id": {
            "title": "Tax Id",
            "type": "string",
            "description": "Technical id of the tax rate in Chift"
          },
          "tax_rate": {
            "title": "Tax Rate",
            "type": "number",
            "description": "Indicates the tax rate used for the line (e.g. 21.0)."
          },
          "untaxed_amount": {
            "title": "Untaxed Amount",
            "type": "number",
            "description": "Untaxed amount of the order line with discount."
          },
          "tax_amount": {
            "title": "Tax Amount",
            "type": "number",
            "description": "Total taxes applied to the order line."
          },
          "total": {
            "title": "Total",
            "type": "number",
            "description": "Total of the order line with discount."
          },
          "discounts": {
            "title": "Discounts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/backbone_common__models__commerce__common__DiscountItem"
            },
            "default": []
          },
          "gift_card": {
            "title": "Gift Card",
            "type": "boolean",
            "default": false
          }
        }
      },
      "OrderLineProductVariantItem": {
        "title": "OrderLineProductVariantItem",
        "required": ["id", "name"],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id of the product variant in Chift"
          },
          "sku": { "title": "Sku", "type": "string" },
          "name": { "title": "Name", "type": "string" },
          "categories": {
            "title": "Categories",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/backbone_common__models__commerce__common__ProductCategoryItem"
            },
            "default": []
          }
        }
      },
      "OrderPaymentMethods": {
        "title": "OrderPaymentMethods",
        "required": ["id"],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id of the payment method in the eCommerce"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the payment method"
          }
        }
      },
      "OrderRefundItem": {
        "title": "OrderRefundItem",
        "required": ["id", "source_ref", "total"],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id in Chift"
          },
          "source_ref": {
            "title": "Source Ref",
            "allOf": [{ "$ref": "#/components/schemas/Ref" }],
            "description": "Technical id in the target software"
          },
          "created_on": {
            "title": "Created On",
            "type": "string",
            "format": "date-time"
          },
          "total": { "title": "Total", "type": "number" },
          "reason": { "title": "Reason", "type": "string" },
          "order_lines": {
            "title": "Order Lines",
            "type": "array",
            "items": { "$ref": "#/components/schemas/RefundOrderLineItem" },
            "default": []
          },
          "other": { "title": "Other", "type": "number", "default": 0 },
          "shipping_refunds": {
            "title": "Shipping Refunds",
            "type": "array",
            "items": { "$ref": "#/components/schemas/ShippingRefund" },
            "default": []
          },
          "other_fees": {
            "title": "Other Fees",
            "type": "array",
            "items": { "$ref": "#/components/schemas/RefundFeesItem" },
            "default": []
          },
          "transactions": {
            "title": "Transactions",
            "type": "array",
            "items": { "$ref": "#/components/schemas/OrderTransactions" },
            "default": []
          }
        }
      },
      "OrderReturnItem": {
        "title": "OrderReturnItem",
        "required": ["id", "source_ref"],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id of the return in Chift"
          },
          "source_ref": {
            "title": "Source Ref",
            "allOf": [{ "$ref": "#/components/schemas/Ref" }],
            "description": "Technical id in the target software"
          },
          "created_on": {
            "title": "Created On",
            "type": "string",
            "format": "date-time"
          },
          "order_lines": {
            "title": "Order Lines",
            "type": "array",
            "items": { "$ref": "#/components/schemas/ReturnOrderLineItem" },
            "default": []
          },
          "new_lines": {
            "title": "New Lines",
            "type": "array",
            "items": { "$ref": "#/components/schemas/ReturnOrderLineItem" },
            "default": []
          },
          "linked_fees": {
            "title": "Linked Fees",
            "type": "array",
            "items": { "$ref": "#/components/schemas/ReturnFeesItem" },
            "default": []
          }
        }
      },
      "OrderStatus": {
        "title": "OrderStatus",
        "enum": [
          "cancelled_unpaid",
          "cancelled",
          "draft",
          "confirmed",
          "shipped",
          "refunded"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "OrderTransactions": {
        "title": "OrderTransactions",
        "required": ["id", "amount", "status"],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id of the transaction in the eCommerce"
          },
          "created_on": {
            "title": "Created On",
            "type": "string",
            "format": "date-time"
          },
          "payment_method_id": {
            "title": "Payment Method Id",
            "type": "string",
            "description": "Technical id of the payment method in the eCommerce"
          },
          "payment_method_name": {
            "title": "Payment Method Name",
            "type": "string",
            "description": "Name of the payment method"
          },
          "amount": { "title": "Amount", "type": "number" },
          "status": { "$ref": "#/components/schemas/TransactionStatus" }
        }
      },
      "OriginalOutstandingItem": {
        "title": "OriginalOutstandingItem",
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "string" },
          "number": { "title": "Number", "type": "string" },
          "journal_id": { "title": "Journal Id", "type": "string" },
          "journal_type": { "$ref": "#/components/schemas/JournalType" },
          "date": { "title": "Date", "type": "string", "format": "date" },
          "due_date": {
            "title": "Due Date",
            "type": "string",
            "format": "date"
          },
          "reference": { "title": "Reference", "type": "string" }
        }
      },
      "OutstandingItem": {
        "title": "OutstandingItem",
        "required": [
          "id",
          "journal_id",
          "journal_type",
          "date",
          "currency",
          "currency_exchange_rate",
          "amount",
          "open_amount",
          "partner_id",
          "account_number",
          "posted"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "string" },
          "number": { "title": "Number", "type": "string" },
          "journal_id": { "title": "Journal Id", "type": "string" },
          "journal_type": { "$ref": "#/components/schemas/JournalType" },
          "date": { "title": "Date", "type": "string", "format": "date" },
          "due_date": {
            "title": "Due Date",
            "type": "string",
            "format": "date"
          },
          "currency": { "title": "Currency", "type": "string" },
          "currency_exchange_rate": {
            "title": "Currency Exchange Rate",
            "type": "number"
          },
          "amount": { "title": "Amount", "type": "number" },
          "open_amount": { "title": "Open Amount", "type": "number" },
          "partner_id": { "title": "Partner Id", "type": "string" },
          "account_number": { "title": "Account Number", "type": "string" },
          "reference": { "title": "Reference", "type": "string" },
          "matching_numbers": {
            "title": "Matching Numbers",
            "type": "array",
            "items": { "type": "string" },
            "default": []
          },
          "payment_communication": {
            "title": "Payment Communication",
            "type": "string"
          },
          "posted": { "title": "Posted", "type": "boolean" },
          "original_document": {
            "$ref": "#/components/schemas/OriginalOutstandingItem"
          }
        }
      },
      "OutstandingType": {
        "title": "OutstandingType",
        "enum": ["client", "supplier"],
        "type": "string",
        "description": "An enumeration."
      },
      "PMSAccountingCategoryItem": {
        "title": "PMSAccountingCategoryItem",
        "required": ["id", "source_ref", "name"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "string" },
          "source_ref": {
            "title": "Source Ref",
            "allOf": [{ "$ref": "#/components/schemas/Ref" }],
            "description": "Technical id in the target software"
          },
          "name": { "title": "Name", "type": "string" },
          "code": {
            "title": "Code",
            "type": "string",
            "description": "Code assigned to the category"
          },
          "ledger_account_code": {
            "title": "Ledger Account Code",
            "type": "string",
            "description": "Ledger account code assigned to the category"
          },
          "posting_account_code": {
            "title": "Posting Account Code",
            "type": "string",
            "description": "Posting account code assigned to the category"
          }
        }
      },
      "PMSClosureItem": {
        "title": "PMSClosureItem",
        "required": ["date", "status"],
        "type": "object",
        "properties": {
          "date": { "title": "Date", "type": "string", "format": "date" },
          "status": { "$ref": "#/components/schemas/ClosureStates" }
        }
      },
      "PMSCustomerItem": {
        "title": "PMSCustomerItem",
        "required": ["id", "source_ref"],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id in Chift"
          },
          "source_ref": {
            "title": "Source Ref",
            "allOf": [{ "$ref": "#/components/schemas/Ref" }],
            "description": "Technical id in the target software"
          },
          "first_name": { "title": "First Name", "type": "string" },
          "last_name": { "title": "Last Name", "type": "string" },
          "company_name": { "title": "Company Name", "type": "string" },
          "phone": { "title": "Phone", "type": "string" },
          "email": { "title": "Email", "type": "string" },
          "account_number": {
            "title": "Account Number",
            "type": "string",
            "description": "Number of the accounting account used (e.g. 701000)"
          },
          "created_on": {
            "title": "Created On",
            "type": "string",
            "format": "date-time"
          },
          "addresses": {
            "title": "Addresses",
            "type": "array",
            "items": { "$ref": "#/components/schemas/AddressItem" }
          }
        }
      },
      "PMSInvoiceFullItem": {
        "title": "PMSInvoiceFullItem",
        "required": ["id", "source_ref", "items", "payments"],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id in Chift"
          },
          "source_ref": {
            "title": "Source Ref",
            "allOf": [{ "$ref": "#/components/schemas/Ref" }],
            "description": "Technical id in the target software"
          },
          "invoice_number": {
            "title": "Invoice Number",
            "type": "string",
            "description": "Number/sequence"
          },
          "creation_date": {
            "title": "Creation Date",
            "type": "string",
            "format": "date-time"
          },
          "closing_date": {
            "title": "Closing Date",
            "type": "string",
            "format": "date-time"
          },
          "partners": {
            "title": "Partners",
            "type": "array",
            "items": { "$ref": "#/components/schemas/InvoicePartnerItem" }
          },
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/PMSOrderLineItem" }
          },
          "payments": {
            "title": "Payments",
            "type": "array",
            "items": { "$ref": "#/components/schemas/PMSPaymentItem" }
          },
          "service_id": {
            "title": "Service Id",
            "type": "string",
            "description": "Reference to the service related to this order"
          },
          "reservation": {
            "title": "Reservation",
            "allOf": [{ "$ref": "#/components/schemas/ReservationItem" }],
            "description": "Reference to the reservation related to this order"
          }
        }
      },
      "PMSLocationItem": {
        "title": "PMSLocationItem",
        "required": ["id", "name"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "string" },
          "name": { "title": "Name", "type": "string" },
          "timezone": {
            "title": "Timezone",
            "type": "string",
            "description": "Indicates the timezone of the location. TZ notation, e.g. Europe/Brussels ."
          },
          "address": { "$ref": "#/components/schemas/AddressItem" }
        }
      },
      "PMSOrderItem": {
        "title": "PMSOrderItem",
        "required": [
          "id",
          "source_ref",
          "creation_date",
          "total",
          "tax_amount",
          "items"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "string" },
          "source_ref": {
            "title": "Source Ref",
            "allOf": [{ "$ref": "#/components/schemas/Ref" }],
            "description": "Technical id in the target software"
          },
          "order_number": { "title": "Order Number", "type": "string" },
          "creation_date": {
            "title": "Creation Date",
            "type": "string",
            "format": "date-time"
          },
          "closing_date": {
            "title": "Closing Date",
            "type": "string",
            "format": "date-time"
          },
          "service_date": {
            "title": "Service Date",
            "type": "string",
            "description": "Indicates the date of the service to which the order belongs (can be used to group orders by closure date)",
            "format": "date-time"
          },
          "device_id": {
            "title": "Device Id",
            "type": "string",
            "description": "ID of device that created the order"
          },
          "total": { "title": "Total", "type": "number" },
          "tax_amount": { "title": "Tax Amount", "type": "number" },
          "total_discount": {
            "title": "Total Discount",
            "type": "number",
            "default": 0
          },
          "total_refund": {
            "title": "Total Refund",
            "type": "number",
            "default": 0
          },
          "total_tip": { "title": "Total Tip", "type": "number", "default": 0 },
          "delivery_fee": {
            "title": "Delivery Fee",
            "type": "number",
            "default": 0
          },
          "currency": { "title": "Currency", "type": "string" },
          "country": { "title": "Country", "type": "string" },
          "loyalty": { "title": "Loyalty", "type": "integer" },
          "customer_id": { "title": "Customer Id", "type": "string" },
          "location_id": { "title": "Location Id", "type": "string" },
          "taxes": {
            "title": "Taxes",
            "type": "array",
            "items": { "$ref": "#/components/schemas/TotalTaxItem" }
          },
          "guests": { "title": "Guests", "type": "integer" },
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/PMSOrderLineItem" }
          },
          "service_id": {
            "title": "Service Id",
            "type": "string",
            "description": "Reference to the service related to this order"
          },
          "reservation": {
            "title": "Reservation",
            "allOf": [{ "$ref": "#/components/schemas/ReservationItem" }],
            "description": "Reference to the reservation related to this order"
          },
          "bills": {
            "title": "Bills",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/backbone_common__models__pms__common__InvoiceItem"
            },
            "description": "Reference to the bills related to this order"
          }
        }
      },
      "PMSOrderLineItem": {
        "title": "PMSOrderLineItem",
        "required": [
          "id",
          "source_ref",
          "quantity",
          "unit_price",
          "total",
          "tax_amount"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "string" },
          "source_ref": {
            "title": "Source Ref",
            "allOf": [{ "$ref": "#/components/schemas/Ref" }],
            "description": "Technical id in the target software"
          },
          "type": { "$ref": "#/components/schemas/POSLineItemType" },
          "menu_id": { "title": "Menu Id", "type": "string" },
          "quantity": { "title": "Quantity", "type": "number" },
          "unit_price": { "title": "Unit Price", "type": "number" },
          "total": { "title": "Total", "type": "number" },
          "tax_amount": { "title": "Tax Amount", "type": "number" },
          "tax_rate": { "title": "Tax Rate", "type": "number" },
          "description": { "title": "Description", "type": "string" },
          "discounts": {
            "title": "Discounts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/backbone_common__models__pos_pms__DiscountItem"
            },
            "default": []
          },
          "product_id": {
            "title": "Product Id",
            "type": "string",
            "description": "Reference to the product related to this item"
          },
          "accounting_category_id": {
            "title": "Accounting Category Id",
            "type": "string",
            "description": "Sometimes used by a POS to give a specific accounting category to an order item"
          }
        }
      },
      "PMSPaymentItem": {
        "title": "PMSPaymentItem",
        "required": ["source_ref", "total"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "string" },
          "source_ref": {
            "title": "Source Ref",
            "allOf": [{ "$ref": "#/components/schemas/Ref" }],
            "description": "Technical id in the target software"
          },
          "payment_method_id": {
            "title": "Payment Method Id",
            "type": "string"
          },
          "payment_method_name": {
            "title": "Payment Method Name",
            "type": "string"
          },
          "total": { "title": "Total", "type": "number" },
          "tip": { "title": "Tip", "type": "number", "default": 0 },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/backbone_common__models__pos_pms__PaymentStatus"
              }
            ],
            "default": "Unknown"
          },
          "currency": { "title": "Currency", "type": "string" },
          "date": { "title": "Date", "type": "string", "format": "date-time" },
          "partner_id": {
            "title": "Partner Id",
            "allOf": [{ "$ref": "#/components/schemas/ChiftId" }],
            "description": "Reference to the customer related to this payment"
          }
        }
      },
      "PMSPaymentMethods": {
        "title": "PMSPaymentMethods",
        "required": ["id", "source_ref", "name"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "string" },
          "source_ref": {
            "title": "Source Ref",
            "allOf": [{ "$ref": "#/components/schemas/Ref" }],
            "description": "Technical id in the target software"
          },
          "name": { "title": "Name", "type": "string" },
          "extra": { "title": "Extra", "type": "string" },
          "ledger_account_code": {
            "title": "Ledger Account Code",
            "type": "string",
            "description": "Ledger account code assigned to the category"
          }
        }
      },
      "PMSStates": {
        "title": "PMSStates",
        "enum": ["consumed", "closed"],
        "description": "An enumeration."
      },
      "POSCreateCustomerItem": {
        "title": "POSCreateCustomerItem",
        "required": ["first_name", "last_name"],
        "type": "object",
        "properties": {
          "first_name": {
            "title": "First Name",
            "minLength": 1,
            "type": "string"
          },
          "last_name": {
            "title": "Last Name",
            "minLength": 1,
            "type": "string"
          },
          "phone": { "title": "Phone", "type": "string" },
          "email": { "title": "Email", "type": "string" },
          "address": { "$ref": "#/components/schemas/PostAddressItem" }
        }
      },
      "POSCustomerItem": {
        "title": "POSCustomerItem",
        "required": ["id", "name"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "string" },
          "first_name": { "title": "First Name", "type": "string" },
          "last_name": { "title": "Last Name", "type": "string" },
          "name": { "title": "Name", "type": "string" },
          "phone": { "title": "Phone", "type": "string" },
          "email": { "title": "Email", "type": "string" },
          "created_on": {
            "title": "Created On",
            "type": "string",
            "format": "date-time"
          },
          "addresses": {
            "title": "Addresses",
            "type": "array",
            "items": { "$ref": "#/components/schemas/AddressItem" }
          },
          "loyalty": { "title": "Loyalty", "type": "integer" },
          "birthdate": {
            "title": "Birthdate",
            "type": "string",
            "description": "Birthdate",
            "format": "date"
          }
        }
      },
      "POSItem": {
        "title": "POSItem",
        "required": ["id", "quantity", "unit_price", "total", "tax_amount"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "string" },
          "type": { "$ref": "#/components/schemas/POSLineItemType" },
          "menu_id": { "title": "Menu Id", "type": "string" },
          "quantity": { "title": "Quantity", "type": "number" },
          "unit_price": { "title": "Unit Price", "type": "number" },
          "total": { "title": "Total", "type": "number" },
          "tax_amount": { "title": "Tax Amount", "type": "number" },
          "tax_rate": { "title": "Tax Rate", "type": "number" },
          "description": { "title": "Description", "type": "string" },
          "discounts": {
            "title": "Discounts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/backbone_common__models__pos_pms__DiscountItem"
            },
            "default": []
          },
          "product_id": {
            "title": "Product Id",
            "type": "string",
            "description": "Reference to the product related to this item"
          },
          "accounting_category_id": {
            "title": "Accounting Category Id",
            "type": "string",
            "description": "Sometimes used by a POS to give a specific accounting category to an order item"
          }
        }
      },
      "POSLineItemType": {
        "title": "POSLineItemType",
        "enum": ["menu", "product"],
        "type": "string",
        "description": "An enumeration."
      },
      "POSLocationItem": {
        "title": "POSLocationItem",
        "required": ["id", "name"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "string" },
          "name": { "title": "Name", "type": "string" },
          "timezone": {
            "title": "Timezone",
            "type": "string",
            "description": "Indicates the timezone of the location. TZ notation, e.g. Europe/Brussels ."
          },
          "address": { "$ref": "#/components/schemas/AddressItem" }
        }
      },
      "POSOrderItem": {
        "title": "POSOrderItem",
        "required": [
          "id",
          "creation_date",
          "total",
          "tax_amount",
          "payments",
          "items"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "string" },
          "order_number": { "title": "Order Number", "type": "string" },
          "creation_date": {
            "title": "Creation Date",
            "type": "string",
            "format": "date-time"
          },
          "closing_date": {
            "title": "Closing Date",
            "type": "string",
            "format": "date-time"
          },
          "service_date": {
            "title": "Service Date",
            "type": "string",
            "description": "Indicates the date of the service to which the order belongs (can be used to group orders by closure date)",
            "format": "date-time"
          },
          "device_id": {
            "title": "Device Id",
            "type": "string",
            "description": "ID of device that created the order"
          },
          "total": { "title": "Total", "type": "number" },
          "tax_amount": { "title": "Tax Amount", "type": "number" },
          "total_discount": {
            "title": "Total Discount",
            "type": "number",
            "default": 0
          },
          "total_refund": {
            "title": "Total Refund",
            "type": "number",
            "default": 0
          },
          "total_tip": { "title": "Total Tip", "type": "number", "default": 0 },
          "delivery_fee": {
            "title": "Delivery Fee",
            "type": "number",
            "default": 0
          },
          "currency": { "title": "Currency", "type": "string" },
          "country": { "title": "Country", "type": "string" },
          "loyalty": { "title": "Loyalty", "type": "integer" },
          "customer_id": { "title": "Customer Id", "type": "string" },
          "location_id": { "title": "Location Id", "type": "string" },
          "taxes": {
            "title": "Taxes",
            "type": "array",
            "items": { "$ref": "#/components/schemas/TotalTaxItem" }
          },
          "guests": { "title": "Guests", "type": "integer" },
          "payments": {
            "title": "Payments",
            "type": "array",
            "items": { "$ref": "#/components/schemas/POSPaymentItem" }
          },
          "items": {
            "title": "Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/POSItem" }
          }
        }
      },
      "POSPaymentItem": {
        "title": "POSPaymentItem",
        "required": ["total"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "string" },
          "payment_method_id": {
            "title": "Payment Method Id",
            "type": "string"
          },
          "payment_method_name": {
            "title": "Payment Method Name",
            "type": "string"
          },
          "total": { "title": "Total", "type": "number" },
          "tip": { "title": "Tip", "type": "number", "default": 0 },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/backbone_common__models__pos_pms__PaymentStatus"
              }
            ],
            "default": "Unknown"
          },
          "currency": { "title": "Currency", "type": "string" },
          "date": { "title": "Date", "type": "string", "format": "date-time" }
        }
      },
      "POSProductItem": {
        "title": "POSProductItem",
        "required": ["id", "name", "prices"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "string" },
          "categories": {
            "title": "Categories",
            "type": "array",
            "items": { "type": "string" },
            "default": []
          },
          "name": { "title": "Name", "type": "string" },
          "description": { "title": "Description", "type": "string" },
          "prices": {
            "title": "Prices",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/backbone_common__models__pos__common__ProductPriceItem"
            }
          },
          "accounting_category_ids": {
            "title": "Accounting Category Ids",
            "type": "array",
            "items": { "type": "string" },
            "description": "Used by a POS to give one or more specific accounting categories to a product item. If not available it will use the category ids"
          }
        }
      },
      "PartnerType": {
        "title": "PartnerType",
        "enum": ["owner", "account"],
        "description": "An enumeration."
      },
      "PatchConnectionItem": {
        "title": "PatchConnectionItem",
        "type": "object",
        "properties": {
          "redirect": {
            "title": "Redirect",
            "type": "boolean",
            "description": "Indicates whether you want to return to the consumer's redirectUrl after update (true) or whether you want to return on the connection page (false)",
            "default": false
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Can be used to update the name of an existing connection"
          },
          "credentials": {
            "title": "Credentials",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/backbone_api__app__routers__connections__CredentialItem"
            },
            "description": "Can be used to update the credentials of an existing connection. Please use the getIntegrations route to see the available credentials for each integration"
          }
        }
      },
      "Payment": {
        "title": "Payment",
        "required": [
          "id",
          "name",
          "currency",
          "amount",
          "payment_date",
          "journal_type",
          "journal_id",
          "journal_name"
        ],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "string" },
          "name": { "title": "Name", "type": "string" },
          "currency": { "title": "Currency", "type": "string" },
          "amount": {
            "title": "Amount",
            "type": "number",
            "description": "Total amount of the payment. A part of this amount could be reconciled with another invoice."
          },
          "dedicated_amount": {
            "title": "Dedicated Amount",
            "type": "number",
            "description": "Amount of the payment dedicated to the invoice. Zero the accounting software doesn't provide the information.",
            "default": 0
          },
          "payment_date": {
            "title": "Payment Date",
            "type": "string",
            "format": "date"
          },
          "journal_type": { "$ref": "#/components/schemas/JournalType" },
          "journal_id": { "title": "Journal Id", "type": "string" },
          "journal_name": { "title": "Journal Name", "type": "string" },
          "reconciled": {
            "title": "Reconciled",
            "type": "boolean",
            "default": false
          },
          "communication": { "title": "Communication", "type": "string" },
          "matching_number": { "title": "Matching Number", "type": "string" }
        }
      },
      "PaymentItemOut": {
        "title": "PaymentItemOut",
        "required": [
          "id",
          "source_ref",
          "status",
          "description",
          "amount",
          "currency",
          "payment_date",
          "partner_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id in Chift"
          },
          "source_ref": {
            "title": "Source Ref",
            "allOf": [{ "$ref": "#/components/schemas/Ref" }],
            "description": "Technical id in the target software"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/backbone_common__models__payment__common__PaymentStatus"
              }
            ],
            "description": "Payment status"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Description"
          },
          "amount": {
            "title": "Amount",
            "type": "number",
            "description": "Amount"
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "Currency"
          },
          "payment_date": {
            "title": "Payment Date",
            "type": "string",
            "description": "Date of creation",
            "format": "date-time"
          },
          "partner_id": {
            "title": "Partner Id",
            "type": "string",
            "description": "Partner ID"
          }
        }
      },
      "PaymentMethodItem": {
        "title": "PaymentMethodItem",
        "required": ["id", "source_ref", "name", "active"],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id in Chift"
          },
          "source_ref": {
            "title": "Source Ref",
            "allOf": [{ "$ref": "#/components/schemas/Ref" }],
            "description": "Technical id in the target software"
          },
          "name": { "title": "Name", "type": "string" },
          "active": { "title": "Active", "type": "boolean" }
        }
      },
      "PaymentMethods": {
        "title": "PaymentMethods",
        "required": ["id", "name"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "string" },
          "name": { "title": "Name", "type": "string" },
          "extra": { "title": "Extra", "type": "string" }
        }
      },
      "PaymentReporting": {
        "title": "PaymentReporting",
        "type": "object",
        "properties": {
          "method": {
            "allOf": [
              { "$ref": "#/components/schemas/PaymentReportingMethod" }
            ],
            "description": "Payment method"
          },
          "conditions": {
            "allOf": [
              { "$ref": "#/components/schemas/PaymentReportingConditions" }
            ],
            "description": "Payment conditions"
          }
        }
      },
      "PaymentReportingConditions": {
        "title": "PaymentReportingConditions",
        "enum": ["TP01", "TP02", "TP03"],
        "type": "string",
        "description": "An enumeration."
      },
      "PaymentReportingMethod": {
        "title": "PaymentReportingMethod",
        "enum": [
          "MP01",
          "MP02",
          "MP03",
          "MP04",
          "MP05",
          "MP06",
          "MP07",
          "MP08",
          "MP09",
          "MP10",
          "MP11",
          "MP12",
          "MP13",
          "MP14",
          "MP15",
          "MP16",
          "MP17",
          "MP18",
          "MP19",
          "MP20",
          "MP21",
          "MP22",
          "MP23"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "PaymentTermAccountInfo": {
        "title": "PaymentTermAccountInfo",
        "required": ["amount", "iban"],
        "type": "object",
        "properties": {
          "amount": { "title": "Amount", "type": "number" },
          "iban": { "title": "Iban", "type": "string" }
        }
      },
      "PostAddressItem": {
        "title": "PostAddressItem",
        "required": ["name", "city", "postal_code"],
        "type": "object",
        "properties": {
          "name": { "title": "Name", "minLength": 1, "type": "string" },
          "street": { "title": "Street", "type": "string" },
          "number": { "title": "Number", "type": "string" },
          "box": { "title": "Box", "type": "string" },
          "city": { "title": "City", "minLength": 1, "type": "string" },
          "postal_code": {
            "title": "Postal Code",
            "minLength": 1,
            "type": "string"
          },
          "country": { "title": "Country", "type": "string" }
        }
      },
      "PostConsumerItem": {
        "title": "PostConsumerItem",
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "email": { "title": "Email", "maxLength": 80, "type": "string" },
          "internal_reference": {
            "title": "Internal Reference",
            "maxLength": 255,
            "type": "string"
          },
          "redirect_url": {
            "title": "Redirect Url",
            "maxLength": 255,
            "type": "string"
          }
        }
      },
      "PostSyncFlowEvent": {
        "title": "PostSyncFlowEvent",
        "type": "object",
        "properties": {
          "consumers": {
            "title": "Consumers",
            "type": "array",
            "items": { "type": "string", "format": "uuid" },
            "default": []
          },
          "data": { "title": "Data", "type": "object", "default": {} }
        }
      },
      "ProductItemOut": {
        "title": "ProductItemOut",
        "required": ["id", "source_ref", "name"],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id in Chift"
          },
          "source_ref": {
            "title": "Source Ref",
            "allOf": [{ "$ref": "#/components/schemas/Ref" }],
            "description": "Technical id in the target software"
          },
          "name": { "title": "Name", "type": "string", "description": "Name" },
          "unit_price": {
            "title": "Unit Price",
            "type": "number",
            "description": "Unit price"
          },
          "tax_id": {
            "title": "Tax Id",
            "type": "string",
            "description": "Technical id of the tax in Chift"
          },
          "code": {
            "title": "Code",
            "type": "string",
            "description": "Reference/code"
          },
          "unit": {
            "title": "Unit",
            "type": "string",
            "description": "Unit of measure matching target sofware name"
          },
          "category": {
            "title": "Category",
            "type": "string",
            "description": "Category matching target sofware name"
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "Currency matching target sofware name"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Description"
          },
          "available_quantity": {
            "title": "Available Quantity",
            "type": "number",
            "description": "Available quanity of the product in stock. Will only be used for products that have an inventory (services will always be 0)",
            "default": 0
          },
          "cost": {
            "title": "Cost",
            "type": "number",
            "description": "Cost of the product",
            "default": 0
          }
        }
      },
      "ProductStatus": {
        "title": "ProductStatus",
        "enum": ["unknown", "archived", "unpublished", "published"],
        "type": "string",
        "description": "An enumeration."
      },
      "ProductVariantItem": {
        "title": "ProductVariantItem",
        "required": ["id", "source_ref", "parent_id", "name"],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id in Chift"
          },
          "source_ref": {
            "title": "Source Ref",
            "allOf": [{ "$ref": "#/components/schemas/Ref" }],
            "description": "Technical id in the target software"
          },
          "parent_id": {
            "title": "Parent Id",
            "type": "string",
            "description": "Technical id of the parent product in Chift"
          },
          "name": { "title": "Name", "type": "string" },
          "description": { "title": "Description", "type": "string" },
          "description_html": { "title": "Description Html", "type": "string" },
          "categories": {
            "title": "Categories",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/backbone_common__models__commerce__common__ProductCategoryItem"
            },
            "default": []
          },
          "created_on": {
            "title": "Created On",
            "type": "string",
            "format": "date-time"
          },
          "sku": { "title": "Sku", "type": "string" },
          "barcode": { "title": "Barcode", "type": "string" },
          "available_quantity": {
            "title": "Available Quantity",
            "type": "number",
            "default": 0
          },
          "prices": {
            "title": "Prices",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/backbone_common__models__commerce__common__ProductPriceItem"
            },
            "default": []
          },
          "unit_of_measure": { "title": "Unit Of Measure", "type": "string" },
          "weight": { "title": "Weight", "type": "number", "default": 0 },
          "weight_unit": { "title": "Weight Unit", "type": "string" },
          "status": { "$ref": "#/components/schemas/ProductStatus" },
          "variant_attributes": {
            "title": "Variant Attributes",
            "type": "array",
            "items": { "$ref": "#/components/schemas/VariantAttributeItem" },
            "description": "List of attributes that are specific to the variant of the product.",
            "default": []
          },
          "variant_images": {
            "title": "Variant Images",
            "type": "array",
            "items": { "$ref": "#/components/schemas/ImageItem" },
            "description": "List of images that are specific to the variant of the product.",
            "default": []
          }
        }
      },
      "ReadFlowConsumerItem": {
        "title": "ReadFlowConsumerItem",
        "required": ["name", "id", "values", "trigger"],
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "description": { "title": "Description", "type": "string" },
          "id": { "title": "Id", "type": "string" },
          "config": { "$ref": "#/components/schemas/FlowConfig" },
          "values": { "title": "Values", "type": "object" },
          "enabled_on": {
            "title": "Enabled On",
            "type": "string",
            "description": "Date on which the flow was enabled for this consumer",
            "format": "date-time"
          },
          "trigger": { "$ref": "#/components/schemas/ReadFlowTrigger" }
        }
      },
      "ReadFlowItem": {
        "title": "ReadFlowItem",
        "required": ["name", "id"],
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "description": { "title": "Description", "type": "string" },
          "id": { "title": "Id", "type": "string" },
          "execution": { "$ref": "#/components/schemas/FlowExecution" },
          "config": {
            "title": "Config",
            "allOf": [{ "$ref": "#/components/schemas/FlowConfig" }],
            "default": { "datastores": [] }
          },
          "triggers": {
            "title": "Triggers",
            "type": "array",
            "items": { "$ref": "#/components/schemas/FlowTrigger" }
          }
        }
      },
      "ReadFlowTrigger": {
        "title": "ReadFlowTrigger",
        "required": ["id", "type"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "string" },
          "type": { "$ref": "#/components/schemas/TriggerType" },
          "cronschedule": { "title": "Cronschedule", "type": "string" }
        }
      },
      "ReadMappingItem": {
        "title": "ReadMappingItem",
        "required": ["source_id", "target_id"],
        "type": "object",
        "properties": {
          "source_id": { "title": "Source Id", "type": "string" },
          "target_id": { "title": "Target Id", "type": "string" }
        }
      },
      "ReadSyncItem": {
        "title": "ReadSyncItem",
        "required": ["name", "connections", "syncid", "consumers", "flows"],
        "type": "object",
        "properties": {
          "name": { "title": "Name", "minLength": 1, "type": "string" },
          "connections": {
            "title": "Connections",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/backbone_api__app__routers__syncs__ConnectionItem"
            }
          },
          "mappings": {
            "title": "Mappings",
            "type": "array",
            "items": { "$ref": "#/components/schemas/CreateSyncMappingItem" },
            "default": []
          },
          "syncid": { "title": "Syncid", "type": "string", "format": "uuid" },
          "consumers": {
            "title": "Consumers",
            "type": "array",
            "items": { "type": "string" }
          },
          "flows": {
            "title": "Flows",
            "type": "array",
            "items": { "$ref": "#/components/schemas/ReadFlowItem" }
          }
        }
      },
      "ReadSyncMappingItem": {
        "title": "ReadSyncMappingItem",
        "required": ["name", "values", "sub_mapping_name"],
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "description": { "title": "Description", "type": "string" },
          "display_order": {
            "title": "Display Order",
            "type": "integer",
            "default": 0
          },
          "challenge_question": {
            "title": "Challenge Question",
            "type": "string"
          },
          "values": {
            "title": "Values",
            "type": "array",
            "items": { "$ref": "#/components/schemas/ReadMappingItem" }
          },
          "sub_mapping_name": { "title": "Sub Mapping Name", "type": "string" },
          "sub_mapping_description": {
            "title": "Sub Mapping Description",
            "type": "string"
          }
        }
      },
      "Ref": {
        "title": "Ref",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id in the target software"
          },
          "model": {
            "title": "Model",
            "type": "string",
            "description": "Name of the model/entity in the target software"
          }
        }
      },
      "RefundFeesItem": {
        "title": "RefundFeesItem",
        "required": [
          "id",
          "source_ref",
          "type",
          "untaxed_amount",
          "tax_amount",
          "total"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id of the fee in Chift"
          },
          "source_ref": {
            "title": "Source Ref",
            "allOf": [{ "$ref": "#/components/schemas/Ref" }],
            "description": "Technical id in the target software"
          },
          "type": { "$ref": "#/components/schemas/FeesType" },
          "untaxed_amount": { "title": "Untaxed Amount", "type": "number" },
          "tax_amount": { "title": "Tax Amount", "type": "number" },
          "total": { "title": "Total", "type": "number" }
        }
      },
      "RefundItemOut": {
        "title": "RefundItemOut",
        "required": [
          "id",
          "source_ref",
          "status",
          "description",
          "amount",
          "currency",
          "refund_date"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id in Chift"
          },
          "source_ref": {
            "title": "Source Ref",
            "allOf": [{ "$ref": "#/components/schemas/Ref" }],
            "description": "Technical id in the target software"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/backbone_common__models__payment__common__PaymentStatus"
              }
            ],
            "description": "Payment status"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Description"
          },
          "amount": {
            "title": "Amount",
            "type": "number",
            "description": "Amount"
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "Currency"
          },
          "refund_date": {
            "title": "Refund Date",
            "type": "string",
            "description": "Date of creation",
            "format": "date-time"
          },
          "payment_id": {
            "title": "Payment Id",
            "type": "string",
            "description": "ID of the payment being refunded"
          }
        }
      },
      "RefundOrderLineItem": {
        "title": "RefundOrderLineItem",
        "required": ["id", "quantity", "untaxed_amount", "tax_amount", "total"],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id of the order line in Chift"
          },
          "variant": {
            "title": "Variant",
            "allOf": [
              { "$ref": "#/components/schemas/OrderLineProductVariantItem" }
            ],
            "description": "Product variant"
          },
          "quantity": { "title": "Quantity", "type": "integer" },
          "untaxed_amount": {
            "title": "Untaxed Amount",
            "type": "number",
            "description": "Untaxed amount refunded (after discount)."
          },
          "tax_amount": {
            "title": "Tax Amount",
            "type": "number",
            "description": "Total taxes refunded (after discount)."
          },
          "total": {
            "title": "Total",
            "type": "number",
            "description": "Total refunded (after discount)."
          }
        }
      },
      "ReservationItem": {
        "title": "ReservationItem",
        "required": ["id", "source_ref"],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id in Chift"
          },
          "source_ref": {
            "title": "Source Ref",
            "allOf": [{ "$ref": "#/components/schemas/Ref" }],
            "description": "Technical id in the target software"
          },
          "start_date": {
            "title": "Start Date",
            "type": "string",
            "format": "date-time"
          },
          "end_date": {
            "title": "End Date",
            "type": "string",
            "format": "date-time"
          },
          "creation_date": {
            "title": "Creation Date",
            "type": "string",
            "format": "date-time"
          },
          "resource_id": { "$ref": "#/components/schemas/ChiftId" },
          "resource_name": { "title": "Resource Name", "type": "string" },
          "resource_identifier": {
            "title": "Resource Identifier",
            "type": "string"
          }
        }
      },
      "ReturnFeesItem": {
        "title": "ReturnFeesItem",
        "required": [
          "id",
          "source_ref",
          "type",
          "untaxed_amount",
          "tax_amount",
          "total"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id of the fee in Chift"
          },
          "source_ref": {
            "title": "Source Ref",
            "allOf": [{ "$ref": "#/components/schemas/Ref" }],
            "description": "Technical id in the target software"
          },
          "type": { "$ref": "#/components/schemas/FeesType" },
          "untaxed_amount": { "title": "Untaxed Amount", "type": "number" },
          "tax_amount": { "title": "Tax Amount", "type": "number" },
          "total": { "title": "Total", "type": "number" }
        }
      },
      "ReturnOrderLineItem": {
        "title": "ReturnOrderLineItem",
        "required": ["id", "quantity", "untaxed_amount", "tax_amount", "total"],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id of the order line in Chift"
          },
          "variant": {
            "title": "Variant",
            "allOf": [
              { "$ref": "#/components/schemas/OrderLineProductVariantItem" }
            ],
            "description": "Product variant"
          },
          "quantity": { "title": "Quantity", "type": "integer" },
          "untaxed_amount": {
            "title": "Untaxed Amount",
            "type": "number",
            "description": "Untaxed amount refunded (after discount)."
          },
          "tax_amount": {
            "title": "Tax Amount",
            "type": "number",
            "description": "Total taxes refunded (after discount)."
          },
          "total": {
            "title": "Total",
            "type": "number",
            "description": "Total refunded (after discount)."
          }
        }
      },
      "SalesItem": {
        "title": "SalesItem",
        "required": ["total", "tax_amount"],
        "type": "object",
        "properties": {
          "total": { "title": "Total", "type": "number" },
          "tax_amount": { "title": "Tax Amount", "type": "number" },
          "taxes": {
            "title": "Taxes",
            "type": "array",
            "items": { "$ref": "#/components/schemas/TotalTaxItem" }
          }
        }
      },
      "ShippingRefund": {
        "title": "ShippingRefund",
        "required": [
          "id",
          "source_ref",
          "untaxed_amount",
          "tax_amount",
          "total"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id in Chift"
          },
          "source_ref": {
            "title": "Source Ref",
            "allOf": [{ "$ref": "#/components/schemas/Ref" }],
            "description": "Technical id in the target software"
          },
          "untaxed_amount": {
            "title": "Untaxed Amount",
            "type": "number",
            "description": "Untaxed amount refunded (after discount)."
          },
          "tax_amount": {
            "title": "Tax Amount",
            "type": "number",
            "description": "Total taxes refunded (after discount)."
          },
          "total": {
            "title": "Total",
            "type": "number",
            "description": "Total refunded (after discount)."
          }
        }
      },
      "States": {
        "title": "States",
        "enum": ["open", "closed", "all"],
        "description": "An enumeration."
      },
      "SupplierItemIn": {
        "title": "SupplierItemIn",
        "required": ["name", "addresses"],
        "type": "object",
        "properties": {
          "external_reference": {
            "title": "External Reference",
            "type": "string"
          },
          "first_name": {
            "title": "First Name",
            "type": "string",
            "description": "Only used when the supplier is an individual (is_company=false). Indicates the first name of the supplier."
          },
          "last_name": {
            "title": "Last Name",
            "type": "string",
            "description": "Only used when the supplier is an individual (is_company=false). Indicates the last name of the supplier."
          },
          "name": { "title": "Name", "minLength": 1, "type": "string" },
          "function": {
            "title": "Function",
            "type": "string",
            "description": "Only used when the supplier is an individual (is_company=false). Indicates the function of the supplier."
          },
          "is_company": {
            "title": "Is Company",
            "type": "boolean",
            "description": "Indicates if the supplier is an individual or a company.",
            "default": true
          },
          "company_id": {
            "title": "Company Id",
            "type": "string",
            "description": "Only used when the supplier is an individual (is_company=false). Indicates the id of the company linked to the supplier."
          },
          "phone": { "title": "Phone", "type": "string" },
          "mobile": { "title": "Mobile", "type": "string" },
          "email": { "title": "Email", "type": "string" },
          "language": {
            "title": "Language",
            "type": "string",
            "description": "Format: ISO 639-1 codes."
          },
          "internal_notes": { "title": "Internal Notes", "type": "string" },
          "website": { "title": "Website", "type": "string" },
          "vat": { "title": "Vat", "type": "string" },
          "iban": {
            "title": "Iban",
            "type": "string",
            "description": "IBAN Account number of the supplier."
          },
          "bank_account": {
            "title": "Bank Account",
            "type": "string",
            "description": "Bank account number of the supplier."
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "Indicates the currency of the supplier (e.g. EUR)."
          },
          "active": { "title": "Active", "type": "boolean", "default": true },
          "addresses": {
            "title": "Addresses",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/backbone_common__models__common__AddressItemIn"
            }
          },
          "account_number": { "title": "Account Number", "type": "string" }
        }
      },
      "SupplierItemOut": {
        "title": "SupplierItemOut",
        "type": "object",
        "properties": {
          "external_reference": {
            "title": "External Reference",
            "type": "string"
          },
          "first_name": {
            "title": "First Name",
            "type": "string",
            "description": "Only used when the supplier is an individual (is_company=false). Indicates the first name of the supplier."
          },
          "last_name": {
            "title": "Last Name",
            "type": "string",
            "description": "Only used when the supplier is an individual (is_company=false). Indicates the last name of the supplier."
          },
          "name": { "title": "Name", "type": "string" },
          "function": {
            "title": "Function",
            "type": "string",
            "description": "Only used when the supplier is an individual (is_company=false). Indicates the function of the supplier."
          },
          "is_company": {
            "title": "Is Company",
            "type": "boolean",
            "description": "Indicates if the supplier is an individual or a company.",
            "default": true
          },
          "company_id": {
            "title": "Company Id",
            "type": "string",
            "description": "Only used when the supplier is an individual (is_company=false). Indicates the id of the company linked to the supplier."
          },
          "phone": { "title": "Phone", "type": "string" },
          "mobile": { "title": "Mobile", "type": "string" },
          "email": { "title": "Email", "type": "string" },
          "language": {
            "title": "Language",
            "type": "string",
            "description": "Format: ISO 639-1 codes."
          },
          "internal_notes": { "title": "Internal Notes", "type": "string" },
          "website": { "title": "Website", "type": "string" },
          "vat": { "title": "Vat", "type": "string" },
          "iban": {
            "title": "Iban",
            "type": "string",
            "description": "IBAN Account number of the supplier."
          },
          "bank_account": {
            "title": "Bank Account",
            "type": "string",
            "description": "Bank account number of the supplier."
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "Indicates the currency of the supplier (e.g. EUR)."
          },
          "active": { "title": "Active", "type": "boolean", "default": true },
          "addresses": {
            "title": "Addresses",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/backbone_common__models__common__AddressItemOut"
            },
            "default": []
          },
          "account_number": { "title": "Account Number", "type": "string" },
          "company_number": { "title": "Company Number", "type": "string" },
          "id": { "title": "Id", "type": "string" }
        }
      },
      "SupplierItemUpdate": {
        "title": "SupplierItemUpdate",
        "type": "object",
        "properties": {
          "external_reference": {
            "title": "External Reference",
            "type": "string"
          },
          "first_name": {
            "title": "First Name",
            "type": "string",
            "description": "Only used when the supplier is an individual (is_company=false). Indicates the first name of the supplier."
          },
          "last_name": {
            "title": "Last Name",
            "type": "string",
            "description": "Only used when the supplier is an individual (is_company=false). Indicates the last name of the supplier."
          },
          "name": { "title": "Name", "type": "string" },
          "function": {
            "title": "Function",
            "type": "string",
            "description": "Only used when the supplier is an individual (is_company=false). Indicates the function of the supplier."
          },
          "is_company": {
            "title": "Is Company",
            "type": "boolean",
            "description": "Indicates if the supplier is an individual or a company.",
            "default": true
          },
          "company_id": {
            "title": "Company Id",
            "type": "string",
            "description": "Only used when the supplier is an individual (is_company=false). Indicates the id of the company linked to the supplier."
          },
          "phone": { "title": "Phone", "type": "string" },
          "mobile": { "title": "Mobile", "type": "string" },
          "email": { "title": "Email", "type": "string" },
          "language": {
            "title": "Language",
            "type": "string",
            "description": "Format: ISO 639-1 codes."
          },
          "internal_notes": { "title": "Internal Notes", "type": "string" },
          "website": { "title": "Website", "type": "string" },
          "vat": { "title": "Vat", "type": "string" },
          "iban": {
            "title": "Iban",
            "type": "string",
            "description": "IBAN Account number of the supplier."
          },
          "bank_account": {
            "title": "Bank Account",
            "type": "string",
            "description": "Bank account number of the supplier."
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "Indicates the currency of the supplier (e.g. EUR)."
          },
          "active": { "title": "Active", "type": "boolean", "default": true },
          "addresses": {
            "title": "Addresses",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/backbone_common__models__common__AddressItemOut"
            },
            "default": []
          }
        }
      },
      "SyncConsumerItem": {
        "title": "SyncConsumerItem",
        "required": ["syncid", "sync_name", "link_createdon"],
        "type": "object",
        "properties": {
          "syncid": { "title": "Syncid", "type": "string", "format": "uuid" },
          "sync_name": {
            "title": "Sync Name",
            "type": "string",
            "description": "Name of the sync"
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/SyncConsumerStatus" }],
            "description": "Indicates whether the consumer has setup the sync. If the setup is complete, it will return 'active'. Otherwise 'inactive'.",
            "default": "inactive"
          },
          "status_details": {
            "title": "Status Details",
            "type": "string",
            "description": "Gives additional information if the status is inactive"
          },
          "link_createdon": {
            "title": "Link Createdon",
            "type": "string",
            "description": "Date on which the consumer first navigated to the link to setup the sync",
            "format": "date-time"
          },
          "link_mappings": {
            "title": "Link Mappings",
            "type": "array",
            "items": { "$ref": "#/components/schemas/ReadSyncMappingItem" },
            "description": "Values of the mappings requested for the sync for the specific consumer"
          },
          "link_metadata": {
            "title": "Link Metadata",
            "type": "object",
            "description": "Metadata passed during creation"
          },
          "enabled_flows": {
            "title": "Enabled Flows",
            "type": "array",
            "items": { "$ref": "#/components/schemas/ReadFlowConsumerItem" },
            "description": "List of flows that the consumer has enabled"
          }
        }
      },
      "SyncConsumerStatus": {
        "title": "SyncConsumerStatus",
        "enum": ["active", "inactive"],
        "description": "An enumeration."
      },
      "TaxRateItem": {
        "title": "TaxRateItem",
        "required": ["id", "source_ref", "label", "rate"],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id in Chift"
          },
          "source_ref": {
            "title": "Source Ref",
            "allOf": [{ "$ref": "#/components/schemas/Ref" }],
            "description": "Technical id in the target software"
          },
          "label": { "title": "Label", "type": "string" },
          "rate": { "title": "Rate", "type": "number" },
          "country": { "title": "Country", "type": "string" }
        }
      },
      "Token": {
        "title": "Token",
        "required": ["access_token", "token_type", "expires_in", "expires_on"],
        "type": "object",
        "properties": {
          "access_token": { "title": "Access Token", "type": "string" },
          "token_type": { "title": "Token Type", "type": "string" },
          "expires_in": { "title": "Expires In", "type": "integer" },
          "expires_on": { "title": "Expires On", "type": "integer" }
        }
      },
      "TotalTaxItem": {
        "title": "TotalTaxItem",
        "required": ["tax_rate", "tax_amount", "total"],
        "type": "object",
        "properties": {
          "tax_rate": { "title": "Tax Rate", "type": "number" },
          "tax_amount": { "title": "Tax Amount", "type": "number" },
          "total": { "title": "Total", "type": "number" }
        }
      },
      "TransactionAccountingCategory": {
        "title": "TransactionAccountingCategory",
        "enum": [
          "all",
          "unknown",
          "payout",
          "payout_cancel",
          "payment",
          "payment_cancel",
          "fee",
          "fee_cancel"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "TransactionFilterDateType": {
        "title": "TransactionFilterDateType",
        "enum": ["value_date", "execution_date"],
        "type": "string",
        "description": "An enumeration."
      },
      "TransactionItemOut": {
        "title": "TransactionItemOut",
        "required": [
          "id",
          "source_ref",
          "total",
          "fee",
          "currency",
          "exchange_rate",
          "create_date",
          "application_type",
          "accounting_category"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id in Chift"
          },
          "source_ref": {
            "title": "Source Ref",
            "allOf": [{ "$ref": "#/components/schemas/Ref" }],
            "description": "Technical id in the target software"
          },
          "total": {
            "title": "Total",
            "type": "number",
            "description": "Total amount incl. fee"
          },
          "fee": {
            "title": "Fee",
            "type": "number",
            "description": "Total fee"
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "Currency"
          },
          "exchange_rate": {
            "title": "Exchange Rate",
            "type": "number",
            "description": "Exchange rate"
          },
          "create_date": {
            "title": "Create Date",
            "type": "string",
            "description": "Create Date",
            "format": "date-time"
          },
          "application_type": {
            "title": "Application Type",
            "type": "string",
            "description": "Type of the transaction as recorded in the target software"
          },
          "accounting_category": {
            "allOf": [
              { "$ref": "#/components/schemas/TransactionAccountingCategory" }
            ],
            "description": "Accounting category"
          },
          "refund_id": { "title": "Refund Id", "type": "string" },
          "payment_id": { "title": "Payment Id", "type": "string" }
        }
      },
      "TransactionStatus": {
        "title": "TransactionStatus",
        "enum": ["failed", "pending", "success"],
        "type": "string",
        "description": "An enumeration."
      },
      "TriggerResponse": {
        "title": "TriggerResponse",
        "required": ["status", "message"],
        "type": "object",
        "properties": {
          "status": { "title": "Status", "type": "string" },
          "message": { "title": "Message", "type": "string" },
          "data": { "title": "Data", "type": "object" }
        }
      },
      "TriggerType": {
        "title": "TriggerType",
        "enum": ["timer", "event"],
        "type": "string",
        "description": "An enumeration."
      },
      "UpdateConsumerItem": {
        "title": "UpdateConsumerItem",
        "type": "object",
        "properties": {
          "name": { "title": "Name", "maxLength": 255, "type": "string" },
          "email": { "title": "Email", "maxLength": 80, "type": "string" },
          "internal_reference": {
            "title": "Internal Reference",
            "maxLength": 255,
            "type": "string"
          },
          "redirect_url": {
            "title": "Redirect Url",
            "maxLength": 255,
            "type": "string"
          }
        }
      },
      "UpdateFlowConsumer": {
        "title": "UpdateFlowConsumer",
        "type": "object",
        "properties": {
          "triggerid": {
            "title": "Triggerid",
            "type": "string",
            "default": "trigger-1"
          },
          "data": {
            "title": "Data",
            "type": "object",
            "description": "Object containing the configuration of the flow for the consumer",
            "default": {}
          }
        }
      },
      "UpdateOrderItem": {
        "title": "UpdateOrderItem",
        "type": "object",
        "properties": {
          "customer_id": { "title": "Customer Id", "type": "string" }
        }
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": ["loc", "msg", "type"],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": { "anyOf": [{ "type": "string" }, { "type": "integer" }] }
          },
          "msg": { "title": "Message", "type": "string" },
          "type": { "title": "Error Type", "type": "string" }
        }
      },
      "VariantAttributeItem": {
        "title": "VariantAttributeItem",
        "required": ["name", "value"],
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "value": { "title": "Value", "type": "string" }
        }
      },
      "VariantAttributeOptionItem": {
        "title": "VariantAttributeOptionItem",
        "required": ["name", "values"],
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "values": {
            "title": "Values",
            "type": "array",
            "items": { "type": "string" }
          }
        }
      },
      "VariantItem": {
        "title": "VariantItem",
        "required": ["id", "source_ref", "parent_id", "name"],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id in Chift"
          },
          "source_ref": {
            "title": "Source Ref",
            "allOf": [{ "$ref": "#/components/schemas/Ref" }],
            "description": "Technical id in the target software"
          },
          "parent_id": {
            "title": "Parent Id",
            "type": "string",
            "description": "Technical id of the parent product in Chift"
          },
          "name": { "title": "Name", "type": "string" },
          "description": { "title": "Description", "type": "string" },
          "description_html": { "title": "Description Html", "type": "string" },
          "categories": {
            "title": "Categories",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/backbone_common__models__commerce__common__ProductCategoryItem"
            },
            "default": []
          },
          "created_on": {
            "title": "Created On",
            "type": "string",
            "format": "date-time"
          },
          "sku": { "title": "Sku", "type": "string" },
          "barcode": { "title": "Barcode", "type": "string" },
          "available_quantity": {
            "title": "Available Quantity",
            "type": "number",
            "default": 0
          },
          "prices": {
            "title": "Prices",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/backbone_common__models__commerce__common__ProductPriceItem"
            },
            "default": []
          },
          "unit_of_measure": { "title": "Unit Of Measure", "type": "string" },
          "weight": { "title": "Weight", "type": "number", "default": 0 },
          "weight_unit": { "title": "Weight Unit", "type": "string" },
          "status": { "$ref": "#/components/schemas/ProductStatus" },
          "inventory_details": {
            "title": "Inventory Details",
            "type": "array",
            "items": { "$ref": "#/components/schemas/InventoryDetailsItem" },
            "default": []
          },
          "common_attributes": {
            "title": "Common Attributes",
            "type": "array",
            "items": { "$ref": "#/components/schemas/CommonAttributeItem" },
            "description": "List of attributes that are shared by all variants of the product.",
            "default": []
          },
          "variant_attributes": {
            "title": "Variant Attributes",
            "type": "array",
            "items": { "$ref": "#/components/schemas/VariantAttributeItem" },
            "description": "List of attributes that are specific to the variant of the product.",
            "default": []
          },
          "common_images": {
            "title": "Common Images",
            "type": "array",
            "items": { "$ref": "#/components/schemas/ImageItem" },
            "description": "List of images that are shared by all variants of the product.",
            "default": []
          },
          "variant_images": {
            "title": "Variant Images",
            "type": "array",
            "items": { "$ref": "#/components/schemas/ImageItem" },
            "description": "List of images that are specific to the variant of the product.",
            "default": []
          }
        }
      },
      "WebhookInstanceGetItem": {
        "title": "WebhookInstanceGetItem",
        "required": [
          "webhookid",
          "accountid",
          "createdon",
          "event",
          "url",
          "status"
        ],
        "type": "object",
        "properties": {
          "webhookid": {
            "title": "Webhookid",
            "type": "string",
            "format": "uuid"
          },
          "accountid": {
            "title": "Accountid",
            "type": "string",
            "format": "uuid"
          },
          "createdby": {
            "title": "Createdby",
            "type": "string",
            "format": "uuid"
          },
          "createdon": {
            "title": "Createdon",
            "type": "string",
            "format": "date-time"
          },
          "event": { "title": "Event", "type": "string" },
          "url": { "title": "Url", "type": "string" },
          "status": {
            "$ref": "#/components/schemas/backbone_api__app__routers__webhooks__Status"
          },
          "integrationid": { "title": "Integrationid", "type": "integer" }
        }
      },
      "WebhookInstancePatchItem": {
        "title": "WebhookInstancePatchItem",
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/backbone_api__app__routers__webhooks__Status"
          },
          "url": { "title": "Url", "maxLength": 500, "type": "string" },
          "signingsecret": {
            "title": "Signingsecret",
            "maxLength": 100,
            "type": "string"
          }
        }
      },
      "WebhookInstancePostItem": {
        "title": "WebhookInstancePostItem",
        "required": ["event", "url"],
        "type": "object",
        "properties": {
          "event": { "title": "Event", "maxLength": 80, "type": "string" },
          "url": { "title": "Url", "maxLength": 500, "type": "string" },
          "signingsecret": {
            "title": "Signingsecret",
            "maxLength": 100,
            "type": "string"
          },
          "integrationid": {
            "title": "Integrationid",
            "type": "integer",
            "description": "Can be used to specify the integration code of a specific connector. This is mandatory in case you create a webhook related to a specific One API."
          }
        }
      },
      "WebhookItem": {
        "title": "WebhookItem",
        "required": ["event"],
        "type": "object",
        "properties": {
          "event": { "title": "Event", "type": "string" },
          "api": { "title": "Api", "type": "string" }
        }
      },
      "WebhookLogItem": {
        "title": "WebhookLogItem",
        "required": [
          "webhooklogid",
          "webhookid",
          "event",
          "url",
          "accountid",
          "createdon",
          "httpstatus"
        ],
        "type": "object",
        "properties": {
          "webhooklogid": {
            "title": "Webhooklogid",
            "type": "string",
            "format": "uuid"
          },
          "webhookid": {
            "title": "Webhookid",
            "type": "string",
            "format": "uuid"
          },
          "event": { "title": "Event", "type": "string" },
          "url": { "title": "Url", "type": "string" },
          "accountid": { "title": "Accountid", "type": "string" },
          "createdon": {
            "title": "Createdon",
            "type": "string",
            "format": "date-time"
          },
          "httpstatus": { "title": "Httpstatus", "type": "integer" },
          "integrationid": { "title": "Integrationid", "type": "integer" }
        }
      },
      "WelfareFund": {
        "title": "WelfareFund",
        "required": ["rate", "amount"],
        "type": "object",
        "properties": {
          "rate": { "title": "Rate", "type": "number", "description": "Rate" },
          "amount": {
            "title": "Amount",
            "type": "number",
            "description": "Amount"
          },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/WelfareFundType" }],
            "description": "Type"
          }
        }
      },
      "WelfareFundType": {
        "title": "WelfareFundType",
        "enum": [
          "TC01",
          "TC02",
          "TC03",
          "TC04",
          "TC05",
          "TC06",
          "TC07",
          "TC08",
          "TC09",
          "TC10",
          "TC11",
          "TC12",
          "TC13",
          "TC14",
          "TC15",
          "TC16",
          "TC17",
          "TC18",
          "TC19",
          "TC20",
          "TC21",
          "TC22"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "WithholdingTax": {
        "title": "WithholdingTax",
        "required": ["rate", "amount"],
        "type": "object",
        "properties": {
          "rate": { "title": "Rate", "type": "number", "description": "Rate" },
          "amount": {
            "title": "Amount",
            "type": "number",
            "description": "Amount"
          },
          "reason": {
            "allOf": [{ "$ref": "#/components/schemas/WithholdingTaxReason" }],
            "description": "Reason"
          },
          "payment_reason": {
            "allOf": [
              { "$ref": "#/components/schemas/WithholdingTaxPaymentReason" }
            ],
            "description": "Payment reason"
          }
        }
      },
      "WithholdingTaxPaymentReason": {
        "title": "WithholdingTaxPaymentReason",
        "enum": [
          "A",
          "U",
          "R",
          "Q",
          "H",
          "V",
          "V2",
          "I",
          "J",
          "K",
          "P",
          "S",
          "T",
          "W",
          "X",
          "Y",
          "B",
          "C",
          "D",
          "E",
          "F",
          "G",
          "L",
          "L1",
          "M",
          "M1",
          "M2",
          "IN",
          "O",
          "O1",
          "V1"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "WithholdingTaxReason": {
        "title": "WithholdingTaxReason",
        "enum": ["RT01", "RT02", "RT03", "RT04", "RT05", "RT06"],
        "type": "string",
        "description": "An enumeration."
      },
      "backbone_api__app__routers__connections__ConnectionItem": {
        "title": "ConnectionItem",
        "required": [
          "connectionid",
          "name",
          "integration",
          "integrationid",
          "api",
          "status"
        ],
        "type": "object",
        "properties": {
          "connectionid": {
            "title": "Connectionid",
            "type": "string",
            "format": "uuid"
          },
          "name": { "title": "Name", "type": "string" },
          "integration": { "title": "Integration", "type": "string" },
          "integrationid": { "title": "Integrationid", "type": "integer" },
          "api": { "title": "Api", "type": "string" },
          "data": { "title": "Data", "type": "object" },
          "status": {
            "$ref": "#/components/schemas/backbone_api__app__routers__connections__Status"
          },
          "agent": {
            "title": "Agent",
            "allOf": [{ "$ref": "#/components/schemas/LocalAgentInfo" }],
            "description": "For local agent only. Indicates whether the local agent is up and running"
          }
        }
      },
      "backbone_api__app__routers__connections__CredentialItem": {
        "title": "CredentialItem",
        "required": ["key", "value"],
        "type": "object",
        "properties": {
          "key": { "title": "Key", "type": "string" },
          "value": { "title": "Value", "type": "string" }
        }
      },
      "backbone_api__app__routers__connections__PostConnectionItem": {
        "title": "PostConnectionItem",
        "type": "object",
        "properties": {
          "integrationid": {
            "title": "Integrationid",
            "type": "integer",
            "description": "Can be used to specify the integration code of a specific connector. If specified, the url will will point directly to the connection page of the connector and will redirect on save to the redirect url of the consumer if specified."
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Can be used to specify the name of the connection. Must be used in combination with an integrationid."
          },
          "credentials": {
            "title": "Credentials",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/backbone_api__app__routers__connections__CredentialItem"
            },
            "description": "Can be used to specify the credentials of your connection. Must be used in combination with an integrationid and a name. Please use the getIntegrations route to see the available credentials for each integration"
          }
        }
      },
      "backbone_api__app__routers__connections__Status": {
        "title": "Status",
        "enum": ["active", "inactive"],
        "description": "An enumeration."
      },
      "backbone_api__app__routers__datastores__Status": {
        "title": "Status",
        "enum": ["active", "inactive"],
        "description": "An enumeration."
      },
      "backbone_api__app__routers__integrations__CredentialItem": {
        "title": "CredentialItem",
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "optional": {
            "title": "Optional",
            "type": "boolean",
            "default": false
          }
        }
      },
      "backbone_api__app__routers__integrations__PostConnectionItem": {
        "title": "PostConnectionItem",
        "required": ["title", "optional", "resource"],
        "type": "object",
        "properties": {
          "title": { "title": "Title", "type": "string" },
          "optional": { "title": "Optional", "type": "boolean" },
          "resource": { "title": "Resource", "type": "string" }
        }
      },
      "backbone_api__app__routers__integrations__Status": {
        "title": "Status",
        "enum": ["active", "inactive"],
        "description": "An enumeration."
      },
      "backbone_api__app__routers__syncs__ConnectionItem": {
        "title": "ConnectionItem",
        "type": "object",
        "properties": {
          "one_api": { "title": "One Api", "type": "integer" },
          "connection_type": { "title": "Connection Type", "type": "integer" },
          "display_order": {
            "title": "Display Order",
            "type": "integer",
            "default": 0
          },
          "display_hidden": {
            "title": "Display Hidden",
            "type": "boolean",
            "default": false
          }
        }
      },
      "backbone_api__app__routers__webhooks__Status": {
        "title": "Status",
        "enum": ["active", "inactive"],
        "description": "An enumeration."
      },
      "backbone_common__models__accounting__common__InvoiceType": {
        "title": "InvoiceType",
        "enum": [
          "customer_invoice",
          "customer_refund",
          "supplier_invoice",
          "supplier_refund"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "backbone_common__models__accounting__common__VatCodeScope": {
        "title": "VatCodeScope",
        "enum": ["nat", "eu", "int", "unknown"],
        "type": "string",
        "description": "An enumeration."
      },
      "backbone_common__models__accounting__common__VatCodeType": {
        "title": "VatCodeType",
        "enum": ["sale", "purchase", "both", "unknown"],
        "type": "string",
        "description": "An enumeration."
      },
      "backbone_common__models__commerce__common__AddressItemIn": {
        "title": "AddressItemIn",
        "required": [
          "first_name",
          "last_name",
          "street",
          "number",
          "city",
          "country"
        ],
        "type": "object",
        "properties": {
          "first_name": { "title": "First Name", "type": "string" },
          "last_name": { "title": "Last Name", "type": "string" },
          "street": { "title": "Street", "type": "string" },
          "number": { "title": "Number", "type": "string" },
          "box": { "title": "Box", "type": "string" },
          "city": { "title": "City", "type": "string" },
          "postal_code": { "title": "Postal Code", "type": "string" },
          "country": {
            "title": "Country",
            "type": "string",
            "description": "Format: ISO 3166-1 codes."
          },
          "phone": { "title": "Phone", "type": "string" },
          "email": { "title": "Email", "type": "string" }
        }
      },
      "backbone_common__models__commerce__common__AddressItemOut": {
        "title": "AddressItemOut",
        "required": ["address_type"],
        "type": "object",
        "properties": {
          "address_type": { "$ref": "#/components/schemas/AddressType" },
          "company_name": { "title": "Company Name", "type": "string" },
          "first_name": { "title": "First Name", "type": "string" },
          "last_name": { "title": "Last Name", "type": "string" },
          "street": { "title": "Street", "type": "string" },
          "number": { "title": "Number", "type": "string" },
          "box": { "title": "Box", "type": "string" },
          "city": { "title": "City", "type": "string" },
          "postal_code": { "title": "Postal Code", "type": "string" },
          "country": {
            "title": "Country",
            "type": "string",
            "description": "Format: ISO 3166-1 codes."
          },
          "phone": { "title": "Phone", "type": "string" },
          "email": { "title": "Email", "type": "string" }
        }
      },
      "backbone_common__models__commerce__common__DiscountItem": {
        "title": "DiscountItem",
        "required": ["name", "description", "amount"],
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "description": { "title": "Description", "type": "string" },
          "amount": { "title": "Amount", "type": "number" }
        }
      },
      "backbone_common__models__commerce__common__ProductCategoryItem": {
        "title": "ProductCategoryItem",
        "required": ["id", "name"],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id of the category in Chift"
          },
          "name": { "title": "Name", "type": "string" }
        }
      },
      "backbone_common__models__commerce__common__ProductItem": {
        "title": "ProductItem",
        "required": ["id", "source_ref", "name"],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id in Chift"
          },
          "source_ref": {
            "title": "Source Ref",
            "allOf": [{ "$ref": "#/components/schemas/Ref" }],
            "description": "Technical id in the target software"
          },
          "name": { "title": "Name", "type": "string" },
          "description": { "title": "Description", "type": "string" },
          "description_html": { "title": "Description Html", "type": "string" },
          "categories": {
            "title": "Categories",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/backbone_common__models__commerce__common__ProductCategoryItem"
            },
            "default": []
          },
          "created_on": {
            "title": "Created On",
            "type": "string",
            "format": "date-time"
          },
          "variants": {
            "title": "Variants",
            "type": "array",
            "items": { "$ref": "#/components/schemas/ProductVariantItem" },
            "default": []
          },
          "status": { "$ref": "#/components/schemas/ProductStatus" },
          "common_attributes": {
            "title": "Common Attributes",
            "type": "array",
            "items": { "$ref": "#/components/schemas/CommonAttributeItem" },
            "description": "List of attributes that are shared by all variants of the product.",
            "default": []
          },
          "variant_attributes_options": {
            "title": "Variant Attributes Options",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VariantAttributeOptionItem"
            },
            "default": []
          },
          "common_images": {
            "title": "Common Images",
            "type": "array",
            "items": { "$ref": "#/components/schemas/ImageItem" },
            "description": "List of images that are shared by all variants of the product.",
            "default": []
          }
        }
      },
      "backbone_common__models__commerce__common__ProductPriceItem": {
        "title": "ProductPriceItem",
        "required": ["currency"],
        "type": "object",
        "properties": {
          "currency": { "title": "Currency", "type": "string" },
          "price": { "title": "Price", "type": "number", "default": 0 }
        }
      },
      "backbone_common__models__common__AddressItemIn": {
        "title": "AddressItemIn",
        "required": [
          "address_type",
          "street",
          "city",
          "postal_code",
          "country"
        ],
        "type": "object",
        "properties": {
          "address_type": { "$ref": "#/components/schemas/AddressType" },
          "name": { "title": "Name", "type": "string" },
          "number": { "title": "Number", "type": "string" },
          "box": { "title": "Box", "type": "string" },
          "phone": { "title": "Phone", "type": "string" },
          "mobile": { "title": "Mobile", "type": "string" },
          "email": { "title": "Email", "type": "string" },
          "street": { "title": "Street", "type": "string" },
          "city": { "title": "City", "type": "string" },
          "postal_code": { "title": "Postal Code", "type": "string" },
          "country": {
            "title": "Country",
            "type": "string",
            "description": "Format: ISO 3166-1 codes."
          }
        }
      },
      "backbone_common__models__common__AddressItemOut": {
        "title": "AddressItemOut",
        "required": ["address_type"],
        "type": "object",
        "properties": {
          "address_type": { "$ref": "#/components/schemas/AddressType" },
          "name": { "title": "Name", "type": "string" },
          "number": { "title": "Number", "type": "string" },
          "box": { "title": "Box", "type": "string" },
          "phone": { "title": "Phone", "type": "string" },
          "mobile": { "title": "Mobile", "type": "string" },
          "email": { "title": "Email", "type": "string" },
          "street": { "title": "Street", "type": "string" },
          "city": { "title": "City", "type": "string" },
          "postal_code": { "title": "Postal Code", "type": "string" },
          "country": {
            "title": "Country",
            "type": "string",
            "description": "Format: ISO 3166-1 codes."
          }
        }
      },
      "backbone_common__models__common__PaymentStatus": {
        "title": "PaymentStatus",
        "enum": ["all", "unpaid", "paid"],
        "type": "string",
        "description": "An enumeration."
      },
      "backbone_common__models__invoicing__common__InvoiceItem": {
        "title": "InvoiceItem",
        "required": [
          "currency",
          "invoice_type",
          "status",
          "invoice_date",
          "tax_amount",
          "untaxed_amount",
          "total"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "Currency matching target sofware name"
          },
          "invoice_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/backbone_common__models__invoicing__common__InvoiceType"
              }
            ],
            "description": "Invoice type"
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/InvoiceStatus" }],
            "description": "Status"
          },
          "invoice_date": {
            "title": "Invoice Date",
            "type": "string",
            "description": "Invoicing date",
            "format": "date"
          },
          "tax_amount": {
            "title": "Tax Amount",
            "type": "number",
            "description": "Taxes amount"
          },
          "untaxed_amount": {
            "title": "Untaxed Amount",
            "type": "number",
            "description": "Untaxed amount"
          },
          "total": {
            "title": "Total",
            "type": "number",
            "description": "Total amount incl. taxes"
          },
          "lines": {
            "title": "Lines",
            "type": "array",
            "items": { "$ref": "#/components/schemas/InvoiceLineItem" },
            "description": "Invoice lines",
            "default": []
          },
          "partner_id": {
            "title": "Partner Id",
            "type": "string",
            "description": "Technical id of the vendor/customer in Chift"
          },
          "invoice_number": {
            "title": "Invoice Number",
            "type": "string",
            "description": "Number/sequence"
          },
          "due_date": {
            "title": "Due Date",
            "type": "string",
            "description": "Due date",
            "format": "date"
          },
          "reference": {
            "title": "Reference",
            "type": "string",
            "description": "Reference"
          },
          "payment_communication": {
            "title": "Payment Communication",
            "type": "string",
            "description": "Payment communication"
          },
          "customer_memo": {
            "title": "Customer Memo",
            "type": "string",
            "description": "Customer note/memo"
          },
          "journal_ref": {
            "title": "Journal Ref",
            "allOf": [{ "$ref": "#/components/schemas/FieldRef" }],
            "description": "Journal"
          },
          "italian_specificities": {
            "title": "Italian Specificities",
            "allOf": [{ "$ref": "#/components/schemas/ItalianSpecificities" }],
            "description": "Specificities for Italy"
          }
        }
      },
      "backbone_common__models__invoicing__common__InvoiceType": {
        "title": "InvoiceType",
        "enum": [
          "customer_invoice",
          "customer_refund",
          "supplier_invoice",
          "supplier_refund",
          "all"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "backbone_common__models__invoicing__common__ProductItem": {
        "title": "ProductItem",
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string", "description": "Name" },
          "unit_price": {
            "title": "Unit Price",
            "type": "number",
            "description": "Unit price"
          },
          "tax_id": {
            "title": "Tax Id",
            "type": "string",
            "description": "Technical id of the tax in Chift"
          },
          "code": {
            "title": "Code",
            "type": "string",
            "description": "Reference/code"
          },
          "unit": {
            "title": "Unit",
            "type": "string",
            "description": "Unit of measure matching target sofware name"
          },
          "category": {
            "title": "Category",
            "type": "string",
            "description": "Category matching target sofware name"
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "Currency matching target sofware name"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Description"
          }
        }
      },
      "backbone_common__models__invoicing__common__VatCodeScope": {
        "title": "VatCodeScope",
        "enum": ["nat", "eu", "int", "unknown"],
        "type": "string",
        "description": "An enumeration."
      },
      "backbone_common__models__invoicing__common__VatCodeType": {
        "title": "VatCodeType",
        "enum": ["sale", "purchase", "both", "unknown"],
        "type": "string",
        "description": "An enumeration."
      },
      "backbone_common__models__payment__common__PaymentStatus": {
        "title": "PaymentStatus",
        "enum": [
          "pending",
          "completed",
          "canceled",
          "failed",
          "unknown",
          "authorized"
        ],
        "description": "An enumeration."
      },
      "backbone_common__models__pms__common__InvoiceItem": {
        "title": "InvoiceItem",
        "required": ["id", "source_ref"],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Technical id in Chift"
          },
          "source_ref": {
            "title": "Source Ref",
            "allOf": [{ "$ref": "#/components/schemas/Ref" }],
            "description": "Technical id in the target software"
          },
          "invoice_number": {
            "title": "Invoice Number",
            "type": "string",
            "description": "Number/sequence"
          },
          "creation_date": {
            "title": "Creation Date",
            "type": "string",
            "format": "date-time"
          },
          "closing_date": {
            "title": "Closing Date",
            "type": "string",
            "format": "date-time"
          },
          "partners": {
            "title": "Partners",
            "type": "array",
            "items": { "$ref": "#/components/schemas/InvoicePartnerItem" }
          }
        }
      },
      "backbone_common__models__pos__common__ProductCategoryItem": {
        "title": "ProductCategoryItem",
        "required": ["id", "name"],
        "type": "object",
        "properties": {
          "id": { "title": "Id", "type": "string" },
          "name": { "title": "Name", "type": "string" },
          "description": { "title": "Description", "type": "string" },
          "id_parent": {
            "title": "Id Parent",
            "type": "string",
            "description": "Indicates if the category belongs to a parent category"
          }
        }
      },
      "backbone_common__models__pos__common__ProductPriceItem": {
        "title": "ProductPriceItem",
        "required": ["unit_price"],
        "type": "object",
        "properties": {
          "unit_price": { "title": "Unit Price", "type": "number" },
          "tax_rate": { "title": "Tax Rate", "type": "number" }
        }
      },
      "backbone_common__models__pos_pms__DiscountItem": {
        "title": "DiscountItem",
        "required": ["total"],
        "type": "object",
        "properties": {
          "name": { "title": "Name", "type": "string" },
          "total": { "title": "Total", "type": "number" },
          "type": {
            "allOf": [{ "$ref": "#/components/schemas/DiscountType" }],
            "default": "UNKNOWN"
          }
        }
      },
      "backbone_common__models__pos_pms__PaymentStatus": {
        "title": "PaymentStatus",
        "enum": [
          "Pending",
          "Completed",
          "Canceled",
          "Failed",
          "Unknown",
          "Authorised"
        ],
        "description": "An enumeration."
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "This access token needs to be included in each of your request to the Chift API."
      }
    }
  },
  "security": [{ "bearerAuth": [] }]
}
